#!/bin/bash
#
# lib/cfgmgr.source
#

declare cfgmgr_loaded=true

[ -n "$MYDATA" ] || {
	declare MYDATA=
	MYDATA=$(realpath ./.data)
}
[ -d "$MYDATA" ] || mkdir -p "$MYDATA"

declare usagestr=

usagestr=$(
cat <<EOF

cfgmgr - Configuration file manager.
         Call this library script by name from the command line
	 to see this help text.

A script configuration manager.

Arguments
---------
configtable: name of the associative array, which must be declared
             by the user in the calling script, e.g:
             declare -A mycfgtable
             It is passed by reference, so no leading $ in front of
             the identifier when calling cfg_start.

configfile:  Optional path of the file to contain the configtable
             contents between invocations of the encapsulating script.
	     If no name is provided, cfgmgr will create one in ./.data
	     relative to the PWD of the executing script and using the
	     script's basename with .conf extension, e.g.
	     ./.data/myscript.conf.

Public Functions
----------------
cfg_start configtable [configfile]
            Called at the beginning of your script to initialize and
	    synchronize your script's config table asssociative array
	    with its config file.

cfg_read_cfgfile configtable
            Reads the contents of the config file into the config table
	    associative array.

cfg_write_cfgfile configtable
            Writes the contents of the config table associative array
	    into the config file.

cfg_dump_cfgtbl configtable
            Dumps the contents of the config table associative array
	    to the screen.
\0
EOF
)

declare cfgfile=

# Print the help text to the screen if this lib source is called from the
# command line. Help text will not be printed if this file is sourced in
# another script.
# From:
# https://stackoverflow.com/questions/2683279/how-to-detect-if-a-script-is-being-sourced
(return 0 2>/dev/null) || {
	echo -e "$usagestr"
	exit 0
}

#** is_inarray: returns 0 if exact matching string is in array
#
# $1 - array name passed by reference, no leading $
# $2 - string being sought, passed by value
#
# Returns 0 if match is found, 1 if not
#*
is_inarray () {
    local -n ar=$1
    local fld="$2"
    local -i ix

    for ((ix = 0; ix < ${#ar[@]}; ix++))
    do
        [ "${ar[ix]}" == "$fld" ] && return 0
    done

    return 1
}

# cfg_init_cfgfile: init the config file with contents of cfgtbl
#
# PRIVATE: Not to be called externally
# ************************************
#
cfg_init_cfgfile() {
	for key in ${!cfgtbl[@]}; do
		echo "$key = ${cfgtbl["$key"]}" >> "$cfgfile"
	done
}

# cfg_set_cfgfile: if the cfgfile doesn't exist, then create it
#
# PRIVATE: Not to be called externally
# ************************************
#
# If $1 is empty, then create a configfile in the MYDATA directory
# using the basename of the script with '.confg' extension.
#
# Globals
#   cfgfile: file containing the contents of the cfgtbl
#
cfg_set_cfgfile() {
	cfgfile="$1"

	[ -n "$cfgfile" ] || {
		cfgfile="$MYDATA"/"$(basename "0")".conf
	}
}

# cfg_diff_cfgfile: diff the contents of the cfgfile with those in the cfgtbl
#
# PRIVATE: Not to be called externally
# ************************************
#
# We want to do this without disturbing the existing contents of the cfgfile.
#
# If the cfgtbl has fewer entries than the cfgfile, remove the deprecated
# entries from the cfgfile.
#
# If the cfgtbl has more entries than the cfgfile, then add the new entries
# to the cfgfile.
#
# If the cfgtbl has different entries than the cfgfile, then reconcile the
# differences.
#
# Globals
#    cfgfile; passed by user
#    cfgtbl : passed as a reference to the user's config table in the
#             calling function
#
# Returns
#    0 - no differences found
#    1 - there were diffs
#
cfg_diff_cfgfile() {
	local -a fkeys=()
	local -a tkeys=()
	local -i idx
	local -i tblentries
	local -i filentries
	local -i stat=0
	local -i i
	local key

	[ -s "$cfgfile" ] || {
		cfg_init_cfgfile
		return 0
	}

	tblentries=${#cfgtbl[@]}

	# Get all the keys from the cfgfile using callback defined in
	# the mapfile call. Mapfile delivers the index as $1 and the
	# line as $2 to the callback.
	#
	mapfile -c1 -C 'f() {
		# Extract the fkeys field from each line
		fkeys[$1]=$(echo $2 | cut -d'=' -f1)
		# remove all spaces from the fkeys field
		fkeys[$1]=${fkeys[$1]// /}
	}; f' < "$cfgfile"

	# Get all the keys from the cfgtbl
	#
	mapfile -t -d' ' tkeys <<< "${!cfgtbl[@]}"

	# If there are any differences, add the different key to the
	# cfgfile. The stale keys will be removed from the cfgfile by
	# the code following this.
	#
	for ((i = 0; i < tblentries; i++)); do
		key="${tkeys[i]}"

		# Remove all non-alphanum chars
		#
		key="${key//[!a-zA-Z0-9]/}"
		is_inarray fkeys "$key" && continue
		echo "$key = ${cfgtbl["$key"]}" >> "$cfgfile"
		stat=1
	done

	filentries=$(wc -l < "$cfgfile")
	# If there are more entries in the cfgfile than in the cfgtbl
	# Delete the entries from the cfgfile.
	#
	((filentries > tblentries)) && {
		for key in ${fkeys[@]}; do
			key="${key//[!a-zA-Z0-9]/}"
			is_inarray tkeys $key && continue
			sed -i "/$key/d" "$cfgfile"
			stat=1
		done
	}

	# If there are more entries in the config table than in the cfgfile
	# Add the new cfgtbl entries to the cfgfile.
	#
	((tblentries > filentries)) && {
		for key in ${tkeys[@]}; do
			key="${key//[!a-zA-Z0-9]/}"
			is_inarray fkeys $key && continue
			echo "$key = ${cfgtbl["$key"]}" >> "$cfgfile"
			stat=1
		done
	}

	return $stat
}

# cfg_dump_cfgtbl: dump the contents of the cfgtbl to the screen
#
# Arguments:
# $1 - reference to user's cfgtbl associative array
#      no leading $ when calling
#
cfg_dump_cfgtbl() {
	local -n cfgtbl="$1"
	local key

	for key in "${!cfgtbl[@]}"; do
		echo "$key = ${cfgtbl["$key"]}"
	done
}

# cfg_read_cfgfile: read the contents of the config file into user's table
#
# Globals
#    cfgfile; either passed by user or created by cfg_check_cfgfile above.
#
# Arguments
#    $1 - cfgtbl : reference to the user's config table
#                  When used in calls initiated by cfg_start, the cfgtbl
#                  was inited in cfgtbl and is inherited from that func.
#
cfg_read_cfgfile() {
	(($# == 1)) && local -n cfgtbl="$1"
	local key
	local value

	while IFS+="=" read -r key val; do
		cfgtbl["$key"]=$val
	done < "$cfgfile"
}

# cfg_write_cfgfile: write the contents of the cfgtbl into cfgfile
#
# Globals
#    cfgfile; passed by user in call to cfg_start
#
# Arguments:
#    $1 - cfgtbl : user's cfgtbl passed by reference
#
cfg_write_cfgfile() {
	local -n cfgtbl="$1"
	local key

	> "$cfgfile"

	for key in "${!cfgtbl[@]}"; do
		echo "$key = ${cfgtbl["$key"]}" >> "$cfgfile"
	done
}

# cfg_start: start the cfgmgr
#
# Globals
#    cfgfile; passed by user
#
cfg_start() {
	local -n cfgtbl="$1"

	cfg_set_cfgfile "$(realpath "$2")"
	cfg_diff_cfgfile
	cfg_read_cfgfile
}
