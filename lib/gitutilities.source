#!/bin/bash
#
# gitutilities.src
#
# NOTE: ~/bin/ui.source must be included before this file.
#

declare gitutilities_loaded=true

[ "$MYDIR" ] || {
	declare MYDIR=
	MYDIR="$(dirname "$(which "$(basename "$0")")")"
}

[ "$MYLIB" ]             || declare MYLIB="$MYDIR"/lib
[ "$ui_loaded" ]         || source "$MYLIB"/ui.source
[ "$patchutils_loaded" ] || source "$MYLIB"/patch-utils.source

# return_msg - uses exit messages from lib/ui.source
#
gut_retmsg() {
	local -i msgindex="$1"
	local artifact="$2"
	local msg

	msg="$WRN${ui_err_msg[msgindex]}$OFF"
	[ -n "$artifact" ] && msg="$MNU$artifact $msg"
	echo -e "$msg"
}

gut_exit() { gut_retmst "$1" "$2"; exit "$1"; }

gut_chdir() {
	local dir="$1"
	local dirstr

	if [ "$dir" == "-" ]; then dirstr="cd -"; else dirstr="$dir"; fi

	cd "$dir" > /dev/null || gut_exit "$ui_err_invdir" "$dirstr"
}

# git_commit2patchset
# 	creates a patchset from contiguous commits starting with the most
#	recent.
#
# $1 - number of commits to format
# $2 - destination directory for the patch set.
# $3 - optional commit to start from (most recent of the set)
#
git_commit2patchset() {
	local patchcount=$1
	local destdir="$2"
	local commit="$3"

	git format-patch --no-renames -s -n"$patchcount" "$commit" -o "$destdir"
	return 0
}

# git_commit2patch
# 	creates one patch from a given commit in a series, using the
# 	number in the series of the commit in the patch as a part of
# 	its name.
#
# $1 - number of the commit in the series
# $2 - commit hash
# $3 - destination directory
#
git_commit2patch() {
	local index=$1
	local commit=$2
	local destdir=$3
	local pfx

	pfx=$(printf "%04d" "$index")

	if ((${#commitnum} > 1)); then
		git format-patch -1 -k --no-renames --start-number "$index" \
			"$commit" -o "$destdir" \
		||

		# If we could not format the patch, then create an empty
		# patch with the bad patch number in it.
		#
		echo "invalid commit: $commit" > "$destdir/$pfx-inv.patch"
	else
		echo -n "" > "$destdir/$pfx-no.patch"
	fi
}

# git_file2patchset
# 	creates a patchset from a file containing a list of discontiguous
#	commits.
#
# The commits list must be organized so that the most recent commit is the
# last line in the file and the oldest commit is at the top of the file.
# git_comments2commitsfile() and git_mailhead2commitsfile() can be used to
# generate such a file.
#
# Generated patches will be suitable for applying with "git am" or for
# comparing to other patches.
#
# $1 - path of file containing the list of commits.
# $2 - destination directory for the patch set.
# $3 - optional verbose true or false
#
git_file2patchset() {
	$ui_b_debug && echo -e "${STA}git_file2patchset$OFF"
	local commitsfile="$1"
	local destdir="$2"
	local argc=$#
	local patchcount
	local commit=""
	local commitnum=0
	local index=1
	local pfx=""
	local pad=
	local remotearray=()
	local outline
	local banner
	local notfound
	local escnt

	if ((argc == 3)); then b_verbose=$3; else b_verbose=true; fi

	patchcount=$(wc -l < "$commitsfile")
	if ((patchcount == 0)); then
		echo
		echo -e "${WRN}File $STA$commitsfile$WRN is empty.$OFF"
		echo
		return 1
	fi

	banner="${INF}Formatting $STA$patchcount$INF patches from "
	banner+="$STA$commitsfile$INF into $STA$destdir$OFF"

	notfound="was not found in any of the upstream repos in "
	notfound+="your .git/config file"

	escnt=$(( (${#STA} * 3) + (${#INF} * 3) + ${#OFF} ))


	pad="$(ui_putnchar '=' $(( ${#banner} - escnt )))"
	echo -e "$banner\n$INF$pad$OFF"
	$verbose || echo

	while read -r line; do
		[ "${line:0:1}" == "#" ] && continue
		commit=$(echo "$line" | cut -d' ' -f1 | tr -dc "[:xdigit:]")
		commitnum=$(echo "$commit" | tr -s 0)
		pfx=$(printf "%04d" $index)

		if (( 16#${commitnum} == 0)); then
			outline="No upstream commit detected for patch $index."
			echo "$outline" > "$destdir/$pfx-nocommit.patch"
		else
			if git show "$commit" > /dev/null 2>&1; then
				outline=$(git format-patch -1 -k \
					--start-number "$index" "$commit" -o "$destdir")
			else
				# If we could not format the patch, then create an empty
				# patch with the bad patch number in it.
				#
				create_remote_array remotearray
				echo "Commit $commit" > "$destdir/$pfx-notfound.patch"
				echo "$notfound" >> "$destdir/$pfx-notfound.patch"
				echo >> "$destdir/$pfx-notfound.patch"
				show_remotes >> "$destdir/$pfx-notfound.patch"
				outline="No upstream found for $commit"
			fi
		fi

		if $b_verbose; then
			echo "$outline"
		else
			ui_clearline
			echo -n "$outline"
		fi

		((index++))
	done < "$commitsfile"

	$b_verbose || echo
	return 0
}

# git_setsubjectprefix - set the subject prefix in .git/config
#
git_setsubjectprefix() {
	local newpfx

	newpfx="$(git config format.subjectprefix)"

	echo -e \
"Just press $BLD\0ENTER$OFF to leave the current subject prefix unchanged."
	getuser "New subject prefix: " newpfx
	[ "$newpfx" ] || return
	git config format.subjectprefix "$newpfx"
}

# git_getsubjectprefix - determine the subject prefix stored in .git/config
#
# $1 - query, ask user if he wants to change the prefix
#
git_getsubjectprefix() {
	local newpfx=
	local b_ans=true
	local b_query=false

	[ "$1" == "query" ] && b_query=true

	newpfx="$(git config format.subjectprefix)"

	while true; do
		echo -e "Current subject prefix: $STA$newpfx$OFF"
		$b_query && getyn "Change subject prefix?" b_ans
		if $b_ans; then
			getuser "New prefix: " newpfx
			git config format.subjectprefix "$newpfx"
			$b_query || break
		else
			break
		fi
	done
}

# git_excisecommit - excise the commit hash from the line
#
# If there appears to be more than one hash on the line, just take the
# first one.
#
# $1 - the line to be grep'd
# $2 - the size of the hash (40 or 7,40)
#
git_excisecommit() {
	local line="$1"
	local hashsize="$2"

	grep -E -o "\b[0-9a-f]{$hashsize}\b" <<< "$line"| head -1
}

# extract_subject - get the subject from the subject line of the patch
#
# The subject line is expected to have the following format.
#
# Subject: [yada-yada] some explicatory text
#
# Even without the square brackets in the subject line, this function will
# return the correct subject string.
#
# $1 - file containing the subject line
#
extract_subject() {
	local file="$1"
	local subject
	local subline
	local subext=

	subject=$(grep -n -m1 'Subject: ' "$file")
	subline=$(echo "$subject" | cut -d':' -f1)

	# Remove the line number from the grep of the subject
	subject=$(echo "$subject" | cut -d':' -f2-)

	# Get the line after the subject line, in case it was too long
	# for the mail client to fit on the same line. If the line does
	# not begin with a white space character, then it is not a part
	# of the subject line, so zero it.
	#
	subext=$(ui_readline $((subline + 1)) "$file")
	[[ "${subext:0:1}" =~ [[:space:]] ]] || subext=

	echo "$subject$subext"
}

# validate_commit - check the hash for a repo and congruent subject
#
# GLOBALS
# 	valfuzz - commit validation fuzz level
#
# ARGUMENTS
# $1 - commit hash from the submitted patch
# $2 - subject line from the submitted patch
#
# OPTIONS
#  -f - fuzz level, 0..3
#  -u - upstream directory
#
# RETURNS
# 	0   - if match is determined
# 	1   - if not sufficiently matched
#	128 - if invalid commit (from 'git log')
#
validate_commit() {
	local    commit
	local    rhsubj
	local -i valfuzz=1   # default fuzz level is case-insensitive
	local    ussubj=
	local -a ussubary=()
	local -a rhsubary=()
	local    delimiters=" "
	local -i stat
	local -i index
	local -i ustoks
	local -i rhtoks
	local -i rhindex
	local    b_nocase=false
	local    updir=

	# Parse the options
	while [ "${1:0:1}" == "-" ]; do
		opt="$1"
		case $opt in
			"-f" ) valfuzz="$2"; shift 2;;
			"-u" ) updir="$2"; shift 2;;
		esac
	done

	# get the command line arguments
	commit="$1"
	rhsubj="$2"

	# Get the fuzz level
	# 0 - upstream and RHEL git log summaries must be identical
	# 1 - case insensitive
	# 2 - ignore commas
	# 3 - ignore all punctuation chars
	#
	case $valfuzz in
		0 ) delimiters=" "
		    ;;
		1 ) b_nocase=true
		    ;;
		2 ) delimiters=" ,"
		    ;;
		3 ) delimiters=" ""$punctset"
		    ;;
	esac

	# Get the upstream commit subj line or return the error.
	# Send error output to /dev/null
	[ -n "$updir" ] && gut_chdir "$updir"
	ussubj="$(git log --oneline -n1 "$commit" 2> /dev/null)"
	stat=$?

	[ -n "$updir" ] && gut_chdir -

	((stat == 0)) || return $stat

	# strip the leading commit hash off the 'git log --oneline'
	ussubj=$(echo "$ussubj" | cut -d' ' -f2-)

	# Tokenize the subject strings.
	ui_strtok "$ussubj" "$delimiters" ussubary
	ui_strtok "$rhsubj" "$delimiters" rhsubary

	# strip out extra space chars and nulls by redeclaring the array
	# contents without double quotes.
	ussubary=( "${ussubary[@]}" )
	rhsubary=( "${rhsubary[@]}" )

	# Remove the word "Subject" in the rhsubary if it's there.
	[ "${rhsubary[0]}" == "Subject" ] && rhsubary=( "${rhsubary[@]:1}" )

	# Get the number of elements in each array.
	ustoks=${#ussubary[@]}
	rhtoks=${#rhsubary[@]}

	# If there are more tokens in the rhsubary, it's almost 100% certain
	# the rh maintainer added stuff to the beginning of the summary line,
	# so let's move beyond that.
	((rhtoks > ustoks)) && rhsubary=( "${rhsubary[@]:((rhtoks - ustoks))}" )

#echo -e "delimiters: \"$delimiters\""
#echo "rhsubary: "${rhsubary[@]}""
#echo "ussubary: "${ussubary[@]}""
#echo "rhtoks: ${#rhsubary[@]}"
#echo "ustoks: ${#ussubary[@]}"
#echo
	# Case insensitive match, because people are not especially careful
	$b_nocase && shopt -s nocasematch

	# Find the first instance in the rhsubary of the first token in the
	# ussubary. If we can't find any, return 1.
	#
#echo "ussubary[0]: |${ussubary[0]}|"
	for ((index = 0; index < rhtoks; ++index)); do
#echo "rhsubary[i]: |${rhsubary[index]}|[index]"
		[ "${rhsubary[index]}" == "${ussubary[0]}" ] && break
	done

	# If we loop through the whole rhsubary without finding a match,
	# return 1.
	#
	((index > rhtoks)) && return 1
	rhtoks=$((rhtoks - index))
	rhindex=$((index))

	# Now see if the arrays are the same from here out.
	for ((index = 1; index < rhtoks; ++index)); do
#echo "rh tok: ${rhsubary[$rhindex + $index]}"
#echo "us tok: ${ussubary[$udex]}"

		[[ "${rhsubary[rhindex + index]}" == "${ussubary[index]}" ]] || break
	done
#echo "index: $index  rhtoks: $rhtoks"

	# Restore case sensitivity.
	$b_nocase && shopt -u nocasematch

	if ((index == rhtoks)); then return 0; else return 1; fi
}

# git_comment2commitsfile
#	Create a file containing a list of commits from taken from the "commit"
#	line in each patch in a directory. The patches in the directory are
#	backported patches with upstream commits identified in the backported
#	patch commit log.
#
# NOTE: The only files that will be parsed are those that have ".patch" at the
#	end of their names.
#
# Argumnent Options:
# -i - srcdir REQUIRED directory containing the backported patches
# -o - commitsfile REQUIRED path to file that will get the upstream commits
# -h - hashsize OPTIONAL default is 40
# -f - valfuzz OPTIONAL default is 1
# -q - b_quiet OPTIONAL default is false
#
git_comment2commitsfile() {
	# echo -e "${MNU}git_comment2commitsfile$OFF"
	local    srcdir=
	local    commitsfile=
	local -i hashsize=40
	local -i valfuzz=1
	local    srcfile=
	local    line=
	local -i index=1
	local    patchlist=
	local -i cmtindex=1
	local -i linenumber=0
	local -a rawcmtarray=()
	local -a commitarray=()
	local    valpatchlist
	local -i filecount
	local    subject
	local    commit
	local -i stat=0
	local    banner=
	local    b_quiet=false
	local    opt
	local    remdir=

	while [ -n "$1" ]; do
		opt="$1"
		case "$opt" in
			"-i" ) srcdir="$2"; shift 2;;
			"-o" ) commitsfile="$2"; shift 2;;
			"-h" ) hashsize=$2; shift 2;;
			"-f" ) valfuzz=$2; shift 2;;
			"-r" ) remdir="$2"; shift 2;;
			"-q" ) b_quiet=true; shift 1;;
		esac
	done

	[ -d "$srcdir" ] || return $ui_err_invdir
	[ -f "$commitsfile" ] || return $ui_err_invfile

	: > "$commitsfile"

	patchlist="$(find "$srcdir" -maxdepth 1 -name "*.patch" | sort -V)"
	patchtotal=$(wc -w <<< "$patchlist")

	create_patchlist "$patchlist" valpatchlist
	filecount=$( wc -w <<< "$valpatchlist")

	banner="$patchtotal Patches in $indir"
	pad="$(ui_putnchar '=' ${#banner})"
	echo -e "$INF$banner\n$pad$OFF"

	for srcfile in $valpatchlist; do

		# If verbose is off, then just print each file on one
		# line.
		# Else, print every file on a newline.
		if $b_quiet; then
			ui_clearline
			echo -n "$srcfile"
		else
			echo "$srcfile"
		fi

		subject="$(extract_subject "$srcfile")"

		linenumber=0
		commitarray=()
		rawcmtarray=()

		# The default number of digits for a commit hash is 40.
		#
		# Gather anything that looks like an upstream commit into the
		# rawcmtarray.
		# Skip over reverted commits and use sort -u to squeeze out
		# duplicates
		#
		mapfile -t rawcmtarray < \
			<(grep -Ew '(commit|cherry-picked from)' "$srcfile" \
			| grep -vi 'revert' \
			| grep -E -o "\b[0-9a-f]{$hashsize}\b" \
			| sort -u)

		cmtindex=0

		for commit in "${rawcmtarray[@]}"; do
# echo "commit: $commit"
			if ((${#rawcmtarray[@]} == 1)); then
				gut_chdir "$remdir"
				git log --oneline -n1 "$commit" > /dev/null 2>&1
				stat=$?
				gut_chdir -
			else
				# If there's more than one commit cited in the
				# commit log, and more than one of them can be
				# found upstream, minimize the user's pain by
				# matching the subject line of the RHEL patch
				# to the summary line of the upstream commit.
				validate_commit \
					-f "$valfuzz" -u "$remdir" "$commit" "$subject"
				stat=$?
			fi

			case $stat in
				# commit not found upstream
				128 ) continue
				      ;;
				# valid commit but subject doesn't match summary
				# Create an array of these to present if we can't
				# find a match for the summary.
				1   ) commitarray[cmtindex]="$commit"
				      ((cmtindex++))
				      ;;
				# commit found and subject matches summary
				# We're done. No need to present a list to the
				# user.
				0   ) commitarray=( "$commit" )
				      break
				      ;;
			esac

		done

		if [ ${#commitarray[@]} -gt 1 ]; then

			echo -en "\n${INF}There is more than one upstream commit "
			echo -e  "mentioned in patch$STA $index $INF \n"
			echo -e  "Please choose one of the following.\n"
# set -x
			gut_chdir "$remdir"

			for ((cmtindex=0; cmtindex < ${#commitarray[@]}; cmtindex++))
			do
				cmtstr="$(git log --oneline -n1 "${commitarray[$cmtindex]}")"
				printf "${MNU}%d${INF} - $cmtstr$OFF\n" $((cmtindex +1))
			done

			gut_chdir -
			echo

			loop_range 1 "$cmtindex" linenumber
		else
			linenumber=1
		fi

		cmtindex=$((linenumber - 1))
		commit=${commitarray[$cmtindex]}

		if [ -n "$commit" ]; then
			echo "$commit $index/$filecount" >> "$commitsfile"
		else
			# If we didn't get a commit in this srcfile, then
			# indicate that in the commitsfile by printing 40
			# zeroes where the commit number should be.
			#
			printf "%040d $index/$filecount\n" 0 >> "$commitsfile"
		fi
		((index++))
#set +x
	done

	$b_quiet && echo
	return 0
}

# git_mailhead2commitsfile
#	Create a file containing a list of commits from taken from the "From"
#	line in each git-formatted patch in a directory. The patches were
#	extracted from a mail client, like mutt.
#
# NOTE: The only files that will be parsed are those that have ".patch" at the
#	end of their names.
#
# $1 - directory where the git-formatted patches were extracted
# $2 - filename, including path, of the commits file.
#
git_mailhead2commitsfile() {
	local srcdir="$1"
	local commitsfile="$2"

	cat /dev/null > "$commitsfile"
	grep "From " "$srcdir"/*.patch | cut -d' ' -f2 >> "$commitsfile"
}

# git_checkrepo
# 	Determines whether the current directory is a valid git repo
#
# returns 0 valid repo, else returns 1
#
# usage:
# 	$(git_checkrepo) || echo "$PWD is not a valid git repo" || exit 1
#
git_checkrepo() {
	[ -d .git ] || gut_exit "$ui_err_norepo" "$PWD"
	return 0
}

# git_get_lasttag <tagstr> [path]
#
# Obtains the most recent tag in the current branch and stores it in
# /dev/shm/lasttag, or the optional path submitted in $2 by the caller.
#
# Returns the tag in $1.
#
# Deletes the previously recorded last tagin /dev/shm/lasttag or the
# optional path submitted by caller.
#
# This operation can take some time, so the git command is spawned
# and we perform a wait for the tag file to appear.
#
# $1 - receives the last tag string
# $2 - path to store lasttag file
#
git_get_lasttag() {

	local -n gut_lasttag="$1"
	local ltfile="$2"
	local mypid

	[ -z "$ltfile" ] && {
		echo -en "${MNU}git_get_lasttag${WRN}: "
		echo -e  "requires path to last tag file as 2nd arg$OFF"
		return 1
	}

	[ -f "$ltfile" ] && rm -f "$ltfile" > /dev/null 2>&1

	echo -en "${INF}Getting most recent git tag..$OFF"
	git describe --tags --abbrev=0 > "$ltfile" &
	mypid=$!
	ui_waitonproc $mypid .1
	gut_lasttag=$(< "$ltfile")
	echo
	return 0
}

# git_getcurrentbranch
#
# echoes the current branch in the git tree after checking that it's a
# valid repo
#
# usage:
# 	local current_branch=$(git_getcurrentbranch)
#
git_getcurrentbranch() {
 	git_checkrepo
	git branch | grep -E '^\*' | cut -d' ' -f2
}

# git_setbranch outdir
#
# $1 if it exists sets the outpath. Default is /dev/shm/branchlist
#
git_setbranch() {
	local -i argc=$#
	local -i index=1
	local line
	local gitbranch
	local linenumber
	local outpath="/dev/shm/branchlist"

	((argc == 1)) && outpath="$1"

	git branch > "$outpath"
	echo
	echo -e "$BLD$UND\0Change Current Branch$OFF\n"

	while read -r line; do
		printf "$BLD%2d$OFF  $line\n" "$index"
		((index++))
	done < "$outpath"

	echo
	loop_range_q 1 $((index - 1)) linenumber || return 1

	gitbranch="$(ui_readline $linenumber "$outpath" | tr -d [\*" "])"
	echo "git checkout $gitbranch"
	git am --abort 2>/dev/null
	git checkout "$gitbranch" || return $?
	git log --oneline -n1
	return 0
}

# find_fixes - grep for all the commits since the one passed as $1 where
#              $1 is named as a fix.
#
# See : https://www.kernel.org/doc/html/v4.17/process/submitting-patches.html
#
#       "If your patch fixes a bug in a specific commit, e.g. you found an
#        issue using git bisect, please use the ‘Fixes:’ tag with the first
#        12 characters of the SHA-1 ID, and the one line summary. For example:
#        Fixes: e21d2170f366 ("video: remove unnecessary platform_set_drvdata()")
#
# $1 - a line expected to contain only a valid commit.
# $2 - file to receive the output
# $3 - directory of the remote repo
# $4 - the remote branch to parse
#
find_fixes () {
	local commit_id="$1"
	local outfil="$2"
	local remdir="$3"
	local rembranch="$4"
	local commit_info=
	local short_hash=
	local commit_date=

	# cd to the remote repo directory
	#
	gut_chdir "$remdir"

	# get the author date, which is what is displayed in git-log output
	commit_info="$(git log --pretty="%h|%ad" -1 "$commit_id" 2>/dev/null)" \
		|| return 1
	short_hash=$(echo "$commit_info" | awk -F "|"  ' { print $1 } ')
	commit_date=$(echo "$commit_info" | awk -F "|"  ' { print $2 } ')


	# Make the commit date the first line in the outfil
	#
	echo "$commit_date" > "$outfil"

	# use the date to do a git log --since=$commit_date and grep for Fixes?
	# then look for short hash
	git --no-pager log \
		--oneline \
		--pretty='%h ("%s")' \
		--since="$commit_date" \
		--grep="Fixes: $short_hash" \
		"$rembranch" >> "$outfil"

	# Return to the original directory
	#
	gut_chdir -
}

# extract_commitlog - extract the commit log from a patch
#
# $1 - patchfile
# $2 - destination file
#
extract_commitlog() {
	local patchfile="$1"
	local outfile="$2"

	: > "$outfile"

	while read -r line; do
		[ "${line:0:3}" == "---" ] && break
		echo "$line" >> "$outfile"
	done < "$patchfile"
}

# parse_missingfix - parse the missing fix
#
# Determine whether the fix has already been included in RHEL, or was
# intentionally omitted, or is truly missing. Send output to the screen
# and to the missing_commits file.
#
# $1 - commit date to start search
# $2 - line to parse
# $3 - enumeration of the commit id in the series
# $4 - file containing the list of RHEL commits being reviewed
# $5 - file that will contain any missing fixes
# $6 - file containing Merge Request commit log for the specific patch
# $7 - verbose flag
#
# Returns 1 if a fix is really missing, 0 otherwise.
#
parse_missingfix() {
	local cmtdate="$1"
	local fix_line="$2"
	local commitnum="$3"
	local commitsfile="$4"
	local missing_file=$5
	local mr_commitlog="$6"

	local fix_id=
	local currentbranch=
	local missing="Missing Fix:"
	local tskip="Intentionally Omitted Fix:"
	local dmerged
	local tokay="contains Fix:"
	local tmsg="WARNING: found $missing"
	local found=
	local found_id=
	local mypid=

	fix_id="$(echo "$fix_line" | awk ' { print $1 } ')"
	currentbranch="$(git branch | grep -E '^\*' | cut -d' ' -f2)"
	dmerged="$currentbranch branch in $PWD has Fix:"

	# If the "missing" commit was intentionally omitted, print a message
	# and return.
	if grep -i "omitted.fix" "$mr_commitlog" | grep -q "$fix_id" || \
	   grep -i "omitted.fix" "$mrcomments"   | grep -q "$fix_id"; then
		echo -e "$INF$tskip $fix_line for $commitnum $OFF"
		echo "$tskip $fix_line for $commitnum" >> "$missing_file"
		return 1
	fi

	# If the missing fix is in the list of upstream commits, see if it's
	# applied later in the current MR series.
	if found=$(grep "$fix_id" "$commitsfile"); then
		found_id=$(echo "$found" | cut -d' ' -f2)
		echo -e "$INF$found_id $tokay $fix_line for $commitnum$OFF"
		echo "$found_id $tokay $fix_line for $commitnum" >> "$missing_file"
		return 1
	fi

	# If the "missing" commit is in the current branch,
	# then the upstream commitid has already been applied.
	# In that case, inform the user and return.
	git log --since="$cmtdate" | grep -m1 "commit $fix_id" > /dev/null 2>&1 & mypid=$!
	if ui_waitonproc_tty $mypid .05; then
		echo -e "$INF$dmerged $fix_line for $commitnum$OFF"
		echo "$dmerged $fix_line for $commitnum"  >> "$missing_file"
		return 1
	else
		# The missing fix is truly missing, so warn accordingly.
		echo -e "$WRN$tmsg $MNU$fix_line$WRN for $STA$commitnum$OFF"
		echo "$tmsg $fix_line for $commitnum" >> "$missing_file"
		return 2
	fi

	return 0
}

is_validcmthash() {
	local hash="$1"

	[ -z "$hash" ] && return 1
	((0x$hash == 0)) && return 1
	[[ $hash =~ ^[a-zA-Z0-9]{40}$ ]] && return 0
	return 1
}

# check_fixes - look for missing fixes
#
# Walk through the file of upstream commits looking for any that may have
# been missed. If the upstream commits have already been applied, then the
# backported commits will be reported as false positives, so precaution is
# taken to see if the "missing" commits are in the current branch.
#
# GLOBALS
#   indir - directory containing the MR patches
#
# $1 - path to the file containing the upstream commits. Each commit is
#      expected to be the first field in each line of the file.
#
# $2 - remote directory containing the remote_repo/remote_branch
#
# $3 - the remote_repo/remote_branch in which to seek missing fixes
#
# $4 - file to contain the list of missing fixes
#
# $5 - optional verbose boolean true or false. Default is true.
#
# Returns
# 	0 - all is well
# 	1 - something went wrong
#
check_fixes() {
	local commitsfile="$1"
	local remdir="$2"
	local rembranch="$3"
	local missing_file="$4"
	local line=
	local commitid=
	local fixline=
	local tmsg="WARNING: found missing fix "
	local tskip="Intentionally Omitted Fix : "
	local mypid
	local fixfile="/dev/shm/fixfile"
	local currentbranch=
	local verbose=true
	local patch=
	local mr_commitlog="/dev/shm/mr_commit.log"
	local patch_filename=
	local stat=0
	local cmtdate=
	local tmpcmtsfile="/dev/shm/tmpcmtsfile"

	currentbranch=$(git branch | grep '^\*' | cut -d' ' -f2)
	[ -n "$5" ] && verbose=$5

	[ -f "$commitsfile" ] || {
		echo -e "${INF}Expecting file: $STA$commitsfile$OFF"
		echo -en "${INF}to contain the upstream commits to be checked, but"
		echo -e "$WRN it does not exist$OFF"
		return 1
	}

	echo -e "\n${INF}Looking for missing fixes in $STA$remdir : $rembranch$INF...$OFF"

	: > "$tmpcmtsfile"
	cp -f "$commitsfile" "$tmpcmtsfile" > /dev/null 2>&1

	while read -r line; do
		commitid=$(echo "$line" | cut -d' ' -f1)
		patch=$(echo "$line" | cut -d' ' -f2)

		# If the commitid is empty, get the next line in commitsfile.
		is_validcmthash "$commitid" || continue

		find_fixes "$commitid" "$fixfile" "$remdir" "$rembranch" & mypid=$!
		ui_waitonproc_tty $mypid .05 "${INF}Checking $STA$patch${INF}: $commitid$OFF"
		$verbose || ui_nclearline 1

		# The fixfile will always have at least one line in it. The first line
		# is always the date of the commit being tested for fixes.
		#
		if [ -f "$fixfile" ] && (($(wc -l < "$fixfile") > 1)); then
			patch_filename="$(find_filebynumber "$patch" "$indir")"
			extract_commitlog "$patch_filename" "$mr_commitlog"

			cmtdate=
			while read -r fixline; do
				# first line in the file is the date
				# get that and continue
				[ -z "$cmtdate" ] && { cmtdate="$fixline"; continue; }

				parse_missingfix \
					"$cmtdate" \
					"$fixline" \
					"$patch" \
					"$tmpcmtsfile" \
					"$missing_file" \
					"$mr_commitlog" & mypid=$!
				wait $mypid || stat=1

			done < "$fixfile"
		fi

	done < "$commitsfile"

	rm -f "$tmpcmtsfile" > /dev/null 2>&1

	[ -f "$fixfile" ] && rm -f "$fixfile" > /dev/null 2>&1
	return $stat
}

show_remotes() {
	local line
	local -a toks=()
	local -a gitcfgarray=()
	local remoteurl=

	gitcfgarray=("$(grep -w '\[remote' .git/config)")
	while read -r line; do
		ui_strtok "$line" '" ' toks
		remote=$(echo "${toks[1]}" | sed  's/]//')
		remoteurl=$(show_remote_url "$remote")
		echo -e "$remote"
		echo -e "$remoteurl"
		echo
	done <<< "${gitcfgarray[@]}"
}

create_remote_array() {
	# echo "create_remote_array"
	local line
	local -a toks=()
	local -n remarray="$1"
	local -a gitcfgarray=()

	gitcfgarray=("$(grep -w '\[remote' .git/config)")
	while read -r line; do
		ui_strtok "$line" '" ' toks
		remote=$(echo "${toks[1]}" | sed  's/]//')
		remarray+=("$remote")
	done <<< "${gitcfgarray[@]}"
}

select_remrepo() {
	# echo "select_remrepo"
	local -n cur="$1"
	local remotearray=()
	local num_of_remotes
	local stat

	create_remote_array remotearray
	num_of_remotes=${#remotearray[@]}

	case $num_of_remotes in
		0 ) echo -e "${WRN}No remotes could be detected in .git/config.$OFF"
		    return 1
		    ;;
		1 ) cur="${remotearray[0]}"
		    stat=0
		    ;;
		* ) select_from_array remotearray "remote repos" cur
		    stat=$?
	esac

	return $stat
}

show_remote_url() {
	local reponame="$1"
	local url
	[ -z "$reponame" ] && return
	url=$(grep -A1 "remote \"$reponame" .git/config | grep url | cut -d'=' -f2)
	echo "$url"
}

select_rembranch() {
	local repo="$1"
	local cur="${!2}"
	local brstr=
	local brancharray=()

	# Get all the branches into one string
	brstr=$(git branch -r | grep "$repo" | cut -d'/' -f2)

	# Filter out lines with '-> in them, because they are not branches
	while read -r s; do [[ $s == *"->"* ]] || brancharray+=("$s"); done <<< "$brstr"

	if [ ${#brancharray[@]} -gt 1 ]; then
		select_from_array brancharray "remote branches in $remote_repo" cur
	else
		cur=${brancharray[0]}
		echo -e "$INF Only one branch in this repo: $STA$cur$OFF"
		echo -e "$INF Nothing else to choose from.$OFF"
	fi

	eval "$2"="$cur"
	return 0
}
