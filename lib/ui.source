#!/bin/bash
#
# ui.source
#
# v0.1
#
# bash library
#
# when adding routines to this library, be sure to declare local variables
# as local. You may otherwise experience behavior that is difficult to debug.
#

##############################
# Global Variables and Consts
##############################

declare ui_loaded=true
declare ui_b_debug=false

#** Text Attributes
#
# $BLD - bold
# $UND - underline
# $OFF - turn all attributes and colors off
#*
unset BLD && declare BLD='\e[1m'
unset UND && declare UND='\e[4m'
unset OFF && declare OFF='\e[m'
#
# Text color definitions
# For color tables see:
# http://bitmote.com/index.php?post/2012/11/19/Using-ANSI-Color-Codes-to-Colorize-Your-Bash-Prompt-on-Linux

#** Color Attributes
#
# Plain colors
# $BLK
# $RED
# $GRN
# $YEL
# $BLU
# $MGT
# $CYN
# $WHT
#
# Bold or bright colors
# $BBLK
# $BRED
# $BGRN
# $BYEL
# $BBLU
# $BMGT
# $BCYN
# $BWHT
#*
unset BLK && declare BLK='\e[0;30m'
unset RED && declare RED='\e[0;31m'
unset GRN && declare GRN='\e[0;32m'
unset YEL && declare YEL='\e[0;33m'
unset BLU && declare BLU='\e[0;34m'
unset MGT && declare MGT='\e[0;35m'
unset CYN && declare CYN='\e[0;36m'
unset WHT && declare WHT='\e[0;37m'
#
# Bright colors
#
unset BBLK && declare BBLK='\e[1;90m'
unset BRED && declare BRED='\e[1;91m'
unset BGRN && declare BGRN='\e[1;92m'
unset BYEL && declare BYEL='\e[1;93m'
unset BBLU && declare BBLU='\e[1;94m'
unset BMGT && declare BMGT='\e[1;95m'
unset BCYN && declare BCYN='\e[1;96m'
unset BWHT && declare BWHT='\e[1;97m'

unset BWOR && declare BWOR='\e[1;37;41m'

declare -i terminal_background=0
declare -i tb_lite=0
declare -i tb_dark=1
declare b_color=

# Terminal magic
#
declare -i tlines=$(tput lines)	# number of lines in the terminal
declare -i tcols=$(tput cols)	# number of columns in the terminal
declare CL1="\e["$tcols"D"	# column 1 of the current line
declare CCR="\e[K"    		# clear line and carriage return
declare UP1="\e[1A"		# move cursor up one line

declare punctset="#$%&'()*+,-./:;<=>?@[\\]^\`{|}~!\""
declare qstr="${MNU}'q'$OFF"
declare msgretry="${INF}Retry or type $qstr$INF to quit: $OFF"

#** Exit codes and messages
#
declare -i ui_exit_ok=0
declare -i ui_err_invargc=1
declare -i ui_err_invfile=2
declare -i ui_err_invdir=3
declare -i ui_err_invlinec=4
declare -i ui_err_nofiles=5
declare -i ui_err_notdigit=6
declare -i ui_err_missing_arg=7
declare -i ui_err_bashver=8
declare -i ui_err_norepo=9
declare -i ui_err_invcmd=10
declare -i ui_err_invcmd_arg=11
declare -i ui_err_boundary="$ui_err_invcmd_arg"

declare -a ui_err_msg=(
""
"Invalid argument count"
"Invalid file"
"Invalid directory"
"Invalid line count"
"No files found"
"not a didgit"
"missing argument"
"wrong bash version"
"not a valid git repo"
"not a valid command"
"not a valid command argument"
""
)
#*

# Contlol-C exit code
# see http://www.tldp.org/LDP/abs/html/exitcodes.html
#
# If it hasn't been defined in the environment, then define it here.
#
declare -p CTLC_EXIT > /dev/null 2>&1 || declare -i CTLC_EXIT=130

declare ui_tempfile="/dev/shm/ui_temp_file"

#** FUNCTIONS
#*

#** ui_exit: exit with exit code and corresponding message
#
# $1 - exit code
# $2 - optional artifact to precede error messag string
#*
ui_exit() {
	local -i msgindex="$1"
	local artifact="$2"
	local msg

	msg="$WRN${ui_err_msg[msgindex]}$OFF"
	[ -n "$artifact" ] && msg="$MNU$artifact $msg"
	echo -e "$msg"
	exit "$msgindex"
}

#** ui_testbash: test for bash 4.0+
#*
#   bash version must be 4 or higher to use this script
#
ui_testbash() {
	local verstr
	local warnstr

	warnstr=$(
cat <<EOF
$WRN
GNU bash version less than 4.0!$MNU
You must be using GNU bash 4.0 or higher.$OFF
\0
EOF
)
	verstr=$(bash --version | grep -m1 -o '[0-9].*')
	((${verstr:0:1} >= 4)) && return
	echo -e "$warnstr"
	ui_exit $ui_err_bashver
}

# ui_popterm
#  pop up a default user terminal an optionally execute a command in it.
#
# Arguments:
#  $1 - optional command to execute in the popup terminal
#
# Usage:
#  Optional command must be quoted with single or double quotes
#
#  ui_popterm 'less ~/bin/lib/ui.source'
#
ui_popterm() {
	cmd="$1"
	if [ -n "$cmd" ]; then
		x-terminal-emulator -e "$cmd"
	else
		x-terminal-emulator
	fi
}

ui_get_screenbackground() {
	echo
	echo "Is your terminal background best described as:"
	echo "1. light"
	echo "2. dark"

	loop_range 1 2 terminal_background
}

ui_set_colors() {
	$b_color || {
		b_color=false
		INF=
		MNU="$BLD"
		STA="$BLD"
		WRN="$BLD"
		qstr="${STA}q${OFF}"
		return 1
	}

	case "$terminal_background" in
		"$tb_lite" ) INF="$OFF""\033[38;5;90m"
			     MNU="\033[1;38;5;21m"
			     STA="\033[1;38;5;28m"
			     WRN=$BRED
			     ;;
		"$tb_dark" ) INF=$OFF$YEL
			     MNU=$BYEL
			     STA=$BGRN
			     # WRN=$BWOR
			     WRN=$BRED
			     ;;
	esac

	qstr="${STA}q${OFF}"

	return 0
}

# is_darkbg: returns 0 if dark terminal background, else returns 1
#
# from:
# https://stackoverflow.com/questions/2507337/how-to-determine-a-terminals-background-color
#
ui_isdarkbg() {
	local bgraw
	local bg
	local -a bga=()
	local -i sum=0

	read -rs -d \\ -p $'\e]11;?\e\\' bgraw
	bg=$(echo "$bgraw" | xxd -c 32 | cut -d':' -f3)
	ui_strtok "$bg" "/." bga

	for n in "${bga[@]}"; do ((sum += 0x${n:0:2})); done

	if ((sum < 300)); then
		return 0
	else
		return 1
	fi
}

#** ui_setbg: Automatically sets colors according to background color
#*
ui_setbg() {
	local -n uibg="$1"

	b_color=true

	if ui_isdarkbg; then
		uibg=$tb_dark
		terminal_background=$tb_dark
	else
		uibg=$tb_lite
		terminal_background=$tb_lite
	fi

	ui_set_colors
}


ui_query_colors() {
	[ -z $b_color ] &&loop_yn "Do you want color text? y/n : " b_color
	$b_color || return
	ui_get_screenbackground
	ui_set_colors
}

ui_use_colors() {
	b_color=true
	ui_get_screenbackground
	ui_set_colors
}

ui_do_colors() {
	terminal_background="$1"
	b_color=true
	ui_set_colors
}

#** ui_putnchar: repeat print a char "n" times as directed
#
# $1 - the character to repeat print
# $2 - the number of times to repeat it.
#*
# Example:
#
#    24_A=$(ui_putnchar "A" 24)  # creates a string with 24 "A" chars in it.
#
ui_putnchar() {
	local ch="$1"
	local -i num="$2"
	local -i i

	for ((i = 0; i < num; ++i)); do
		echo -n "$ch"
	done
}

#** ui_rptchr: put a chr repeatedly n times
#
# This function is preferred over ui_putnchar
#
# $1 - char to repeat
# $2 - number of times to repeat it
#
# Example:
# 	pad=$(ui_rptchr "-" 5)
# 	echo "$pad"
#
# 	prints "-----" to the teminal
#*
ui_rptchr() {
	local chr="$1"
	local -i num=$2
	local tstr=

	((num <= 0)) && return
	tstr="$(printf "%*c" $num "$chr")"
	echo "${tstr// /"$chr"}"
}

#** ui_padfield - pad a string with a given character to fill a field
#
#  The pad will be placed BEFORE the string in the returned string
#
#  $1 - str
#  $2 - pad character
#  $3 - field width
#
#  Example:
#  	paddedstr=$(ui_padfield "foo" "." 6
#  	echo $paddedstr
#  	...foo
#*
ui_padfield() {
	local str="$1"
	local padch="$2"
	local -i fldw="$3"
	local -i padn
	local padstr

	((${#str} >= fldw)) && echo -n "$str" && return
	padn=$((fldw - ${#str}))
	padstr=$(ui_putnchar "$padch" "$padn")
	echo -n "$padstr$str"
	return
}

#** ui_padfield_aft - pad a string with a given character to fill a field
#
#  The pad will be placed AFTER the string in the returned string
#
#  $1 - str
#  $2 - pad character
#  $3 - field width
#
#  Example:
#  	paddedstr=$(ui_padfield "foo" "." 6
#  	echo $paddedstr
#  	foo...
#*
ui_padfield_aft() {
	local str="$1"
	local padch="$2"
	local -i fldw="$3"
	local -i padn
	local padstr

	((${#str} >= fldw)) && echo -n "$str" && return
	padn=$((fldw - ${#str}))
	padstr=$(ui_putnchar "$padch" "$padn")
	echo -n "$str$padstr"
	return
}

#** ui_clrline: clear the current line
#
# $1 - if not empty, moves the cursor up one line.
#*
# GLOBALS
# 	CL1 - puts cursor at column 1
# 	CCR - clears the line and issues a carriage return
# 	UP1 - moves the cursor up one line
#
ui_clearline() {
	# Erase the line and put the cursor back in the first column of the
	# line. Leave the TTY calls as discrete echos for the sake of
	# clarity. The bash interpreter will merge them anyway.
	#
	echo -en "$CL1"
	echo -en "$CCR"
	echo -en "$CL1"
	echo -en "$CCR"
}

#** ui_nclrline: clear the current line and move cursor up by 'n'
#
# $1 - number of lines to move the cursor up
#*
# GLOBALS
# 	CL1 - puts cursor at column 1
# 	CCR - clears the line and issues a carriage return
# 	UP1 - moves the cursor up one line
#
ui_nclearline() {
	local up="$1"
	local -i i
	# Erase the line and put the cursor back in the first column of the
	# line. Leave the TTY calls as discrete echos for the sake of
	# clarity. The bash interpreter will merge them anyway.
	#
	echo -en "$CL1"
	echo -en "$CCR"
	while ((up--)); do
		echo -en "$UP1"
	done
	echo -en "$CL1"
	echo -en "$CCR"
}

#** ui_waitonproc: prints dots while waiting for pid
#
# $1 - PID of process we are waiting for.
# $2 - optional time arg can be given as decimal fractions of a second
#
# Prints a dot to the screen every second until the passed PID
# completes.
#
# If user provides a second arg, then that will be used to time
# the output of the dots.
#*
ui_waitonproc () {
    local -i pid="$1"
    local time=1
    local stat=0
    local -i argc=$#

    ((argc == 2)) && time="$2"

    while kill -0 "$pid" > /dev/null 2>&1; do
        echo -n '.'
        sleep "$time"
    done

    wait "$pid" || stat=$?
    return $stat
}

#** ui_waitonproc_tty: prints dots and erases line while waiting for pid
#
# $1 - PID of process we are waiting for.
# $2 - time argument can be given as decimal fractions of a second
# $3 - optional text
#
# Prints a dot to the screen according to the time argument. When the dots
# reach the rightmost column of the screen, the line is erased and the dots
# start again from the leftmost column.
#
# An optional text message is written first before the dots.
#*
# GLOBALS
#   tcols - number of columns in the terminal
#
ui_waitonproc_tty () {
    local -i pid="$1"
    local tmo="$2"
    local txt="$3"
    local -i tcnt=1
    local -i stat=0

    [ -z "$txt" ] || echo -e "$txt"
    while kill -0 "$pid" > /dev/null 2>&1; do
        echo -n '.'
        sleep "$tmo"
	((++tcnt))

	((tcnt >= tcols)) && {
            ui_clearline
	    tcnt=1
    	}
    done

    # Leave the TTY as it was before we were called.
    #
    ui_clearline
    wait "$pid" || stat=$?
    return $stat
}

#######################
# User Input Routines
#######################

#** getyn(): gets user 'y' or 'n' response to prompt
#
# $1 - prompt string
# $2 - optional arg to receive true or false value
#*
# Takes $1 for a prompt string and adds color emphasis, if color is enabled.
# Places true or false into $2, which is an optional argument.
# User is prompted for (y/n) answer at the end of the prompt string.
#
getyn() {
	local promptstring="$1"
	local -i argc=$#
	local answer

	((argc == 2)) && local -n uip_retval="$2"

	while true; do

		echo -en "$INF$promptstring $MNU(y/n) : $OFF"
		read -r -n1 answer
		echo

		if [[ $answer =~ [yY] ]]; then
			((argc == 2)) && uip_retval=true
			return 0
		fi

		if [[ $answer =~ [nN] ]]; then
			((argc == 2)) && uip_retval=false
			return 1
		fi

		echo -e "${INF}Please enter$MNU y$INF or$MNU n$OFF."
	done
}

# doyn() $1 $2 [$3] [$4]
#
# $1 -	Calls getyn() with $1 for a prompt string.
# $2 -	A string containing the command that will be executed if the user
#	responded "y"
# $3 -	Optional. A string containing the command that will be executed if
#	the user responded "n"
# $4 - 	Optional. Will contain the value of the user's response. If there is
#	no action for $3 to do, then a null string "" must be passed for $3.
#
doyn() {
	local promptstring="$1"
	local y_command="$2"
	local n_command="$3"
	local -i argc=$#
	local response

	((argc == 4)) && local -n uip_response="$4"

	getyn "$promptstring" response
	((argc < 3)) && n_command=""

	if $response ; then
		$y_command
	fi

	if ! $response ; then
		$n_command
	fi

	((argc == 4)) && uip_response="$response"
}

#** getuser: reads user input
#
# Read multi char input terminated by RETURN/ENTER.
# Input is returned in the reference variable
#
# $1 - prompt string
# $2 - reference variable to receive user input
#*
getuser() {
	local promptstring="$1"
	local -n uigu_var="$2"

	echo -ne "$INF$promptstring$OFF"
	read -r uigu_var
}

#** getch(): reads one char user input without echoing the char
#
# Returns character in the reference variable.
# User does not need to press RETURN/ENTER
#
# $1 - reference variable to receive the char
#*
getch() {
	local -n uichar="$1"
	read -r -n1 uichar
}

#** getchar(): reads one char and echoes it to the screen
#
# Returns the char in the reference veriable.
# User does not need to press RETURN/ENTER
#
# $1 - reference variable to receive the char
#*
getchar() {
	local -n uigc_char="$1"
	read -r -n1 uigc_char
	echo
}

#** promptgetchar(): print a prompt and get a char with echo
#
# Returns the character in the reference variable
# User does not need to press RETURN/ENTER
#
# $1 - prompt, may include escape chars
# $2 - reference variable to receive the char
#*
# Prints a prompt passed in $1 and returns the char in $2
#
promptgetchar() {
	echo -en "$1"
	getchar "$2"
}

#** loop_yn(): loop until we get y or n from user
#
# $1 - prompt string
# $2 - optional boolean value to be returned in reference variable
#
# Print the prompt and loop until user gives either a y or n answer.
# If a reference variable is provided, it will receive the corresponding
# true or false value.
#
# Returns
#  0 for yes
#  1 for no
#*
loop_yn() {
	if [ -n "$2" ]; then local -n uilyn_retval="$2"; else local uilyn_retval; fi
	local ans

	while true; do
		promptgetchar "$1" ans
		[ -z "$ans" ] && continue
		[[ $ans =~ [yY] ]] && uilyn_retval=true  && return 0
		[[ $ans =~ [nN] ]] && uilyn_retval=false && return 1
		echo -e "${MNU}Please enter 'y' or 'n'.$OFF"
	done
}

#** loop_yn_ro() - return-only version
#
# Loop until user gives either a y or n answer.
#
# $1 - prompt string
#
# RETURNS
#  0 for yes
#  1 for no
#*
loop_yn_ro() {
	local ans
	while true; do
		promptgetchar "$1" ans
		[ -z "$ans" ] && continue
		[[ $ans =~ [yY] ]] && return 0
		[[ $ans =~ [nN] ]] && return 1
		echo -e "${MNU}Please enter 'y' or 'n'.$OFF"
	done
}

#** loop_range(): loop until user enters number within range
#
# $1 - minimum
# $2 - maximum
# $3 - reference value to receive the user's choice
#*
# Loop until user gives a number in the range defined by the args
#
loop_range() {
	local min=$1
	local max=$2
	local number
	local cmd
	local pstr=\
"$OFF${INF}Please enter a number between $MNU$min$INF and $MNU$max$OFF: "

	((max < 10)) && cmd=promptgetchar || cmd=getuser
	# echo "cmd: $cmd"

	while true; do
		$cmd "$pstr" number

		if [[ $number =~ ^-?[0-9]+$ ]]  && \
		   [[ $number -ge $min ]]       && \
		   [[ $number -le $max ]]; then
			eval "$3"="$number"
			echo
			return 0
		fi
	done
}

#** loop_range_q()
#
# $1 - minimum
# $2 - maximum
# $3 - reference value to receive the user's choice
#
# Loop until user gives a number in the range defined by the args or
# enters 'q' to quit and return to the caller with the 'q'
#*
loop_range_q() {
	local min="$1"
	local max="$2"
	local number
	local cmd
	local pstr=\
"$OFF${INF}Please enter a number between $MNU$min$INF and $MNU$max$OFF or $qstr: "

	echo -e "${INF}Press $qstr$INF to return without making a selection.$OFF"
	((max < 10)) && cmd=promptgetchar || cmd=getuser
	# echo "cmd: $cmd"

	while true; do
		$cmd "$pstr" number

		[ "$number" = "q" ] && return 1

		if [[ $number =~ ^-?[0-9]+$ ]]  && \
		   [[ $number -ge $min ]]       && \
		   [[ $number -le $max ]]; then
			eval "$3"="$number"
			echo
			return 0
		fi
	done
}

#** select_from_array: select an item from an enumerated list
#
# $1 - array name, passed without the leading '$'
# $2 - prompt string
# $3 - reference variable that receives the user's selected number
#
# An enumerated list of the contents of the array is presented for
# the user to choose one of the numbered items.
#*
#
select_from_array() {
	local contents="$1[@]"
	local promptstr="$2"
	local -n uisfa_current="$3"

	local -a array=("${!contents}")
	local -i asize=asize=${#array[@]}
	local -i i
	local element
	local selection

	echo -en "\n${MNU}Choose one of the $STA$promptstr$OFF"
	echo -e "$MNU in the following list.$OFF"
	echo -e "${INF}Current selection is :$STA $current$OFF"

	for ((i = 0; i < asize; ++i)); do
		element="${array[i]}"
		if [ "$element" == "$uisfa_current" ]; then
			echo -e "$STA * $((i+1)). $element$OFF"
		else
			echo -e "   $MNU$((i+1)).$OFF $element"
		fi
	done

	echo

	while true; do
		if loop_range_q 1 "$asize" selection; then
			eval "$3"="${array[$((selection-1))]}"
		else
			return 1
		fi

		if is_array_member array "$uisfa_current"; then
			break
		else
			echo -e "${STA}$uisfa_current$WRN is not a valid selection$OFF"
			continue
		fi
	done

	return 0
}

#** is_array_member: determines if $2 is a member of $1
#
# $1 - array name passed without leading $
# $2 - the item to find in the array
#
# Returns
# 0 - if the item was found
# 1 - if the item was not found.
#*
is_array_member() {
	local -n uiiam_array="$1"
	local member="$2"

	local -a array=("${!contents}")
	local -i asize=${#uiiam_array[@]}
	local -i i
	local mem

	for ((i = 0; i < asize; ++i)); do
		mem=${uiiam_array[i]}
		[ "$mem" == "$member" ] && return 0
	done

	return 1
}

#** is_validnumber: returns 0 if $1 is a valid decimal integer
#*
#
is_validnumber() {
	local ui_num="$1"

	[ -n "$ui_num" ] && [[ $ui_num =~ ^-?[0-9]+$ ]] && return 0
	return 1
}

############################
# Directory Routines
#############################

#** ui_getfilespec: get a pathname to a file and loop until we get
#                   a legitimate file name
# $1 - prompt
# $2 - reference variable to receive returned filespec
#*
ui_getfilespec() {
	local prompt="$1"
	local filespec
	local retval=0
	local msginvfilnam="${WRN}Invalid file name. $msgretry"

	while :; do
		getuser "$prompt" filespec
		[ "$filespec" ] || echo -e "$msginvfilnam"
		[ "$filespec" = "q" ] && return 1
		[ -f "$filespec" ] && break
		echo -e "$WRN$filespec is not a valid file.$OFF"
	done

	eval "$2"="$filespec"
	return $retval
}

#** ui_chkdir: determine whether the string in $1 is file or dir or neither
#
# $1 - a string supposedly naming a directory
#
# returns
#	0 if the string exists as a valid directory
#	1 if the string was empty
#	2 if string exists as a file
#	3 if the string is neither a file nor a directory
#	4 if the string is "q" for "quit trying"
#*
ui_chkdir() {
	[ "$1" = "q" ] && return 4
	[ "$1" ]       || return 1
	[ -f "$1" ]    && return 2
	[ -d "$1" ]    || return 3
	return 0
}

# ui_verifydir() - determines whether the name is a valid directory
#
# $1 - the name of the directory to verify
#
# Returns 0 if the directory is valid, else returns 1
#
ui_verifydir() {
	local dir="$1"
	local stat

	ui_chkdir "$dir"
	stat=$?

	case $stat in
		4 )	;&
		1 )	;&
		3 )	echo "$MNU\"$dir\"$WRN does not exist.$OFF"
			return 1
			;;
		2 )	echo -e "$MNU\"$dir\"$WRN already exists as a file.$OFF"
			return 1
	esac
	return 0
}

#** ui_getnewdir: promt user for new directory
#
# $1 - prompt
# $2 - will contain the new directory name
#
# Prompts the user for a name to create a new directory and passes
# it back to the caller in the "name" argument.
# If the name already exists as a file, prompts for a new name.
# If the name already exists as a directory, asks if user wants to
# use that directory, warning that all its contents may be altered.
#
# Returns:
# 	0 - valid existing directory
# 	3 - newly created directory
# 	4 - user quitting
#*
ui_getnewdir() {
	local prompt="$1"
	local newdir
	local stat
	local ans=true
	local exists="$WRN\"$newdir\" already exists as a file. $msgretry"
	local noexist="${INF}: does not exist.$OFF"
	local fail="${WRN}Could not create directory: $newdir$OFF"

	while true; do
		getuser "$prompt" newdir

		ui_chkdir "$newdir"
		stat=$?

		case $stat in
		0 ) 	eval "$2"="$newdir"	# valid existing directory
			return $stat
			;;
		1 )	echo -e "${WRN}Nothing entered. $msgretry"
			;;
		2 )	echo -e "$exists"
			;;
		3 )	echo -e "$STA$newdir $noexist"
			if getyn "Want to create $newdir now?"; then
				mkdir -p "$newdir" || {
					echo -e "$fail"
					continue
				}
			else
				continue
			fi
			eval "$2"="$newdir"
			return $stat
			;;
		4 )	# echo "ui_getnewdir: newdir: $newdir"
			return $stat	# user wants to quit trying
		esac
	done
}

ui_testdir() {
	local tstdir="$1"
	local stat
	local createstr="${INF}Want to create it now?$OFF"

	while true; do

		ui_chkdir "$tstdir"
		stat=$?

		if ((stat == 0)); then
			echo -e "$STA$tstdir$INF does not exist."
			doyn "$createstr" "mkdir -p $tstdir"
			eval "$2"="$tstdir"
			return $stat
		fi

		if ((stat == 1)); then
			echo -e "$STA$tstdir$INF exists as a file. Try again."
			getuser "Gimme a valid directory: " tstdir
			continue;
		fi

		if ((stat == 2)); then
			eval "$2"="$tstdir"
			return $stat
		fi
	done
}

# ui_remove_spaces - remove spaces from filenames in the current directory
#
# The intention is that the calling function has already issued cd to the
# directory in which ui_remove_spaces will execute.
#
# No globals, no arguments.
#
ui_remove_spaces() {
    local sp=" "
    while IFS= read -r -d '' file
    do
	[[ $file == *$sp* ]] || continue
	mv -v "$file" "$(echo "$file" | tr ' ' '_' )"
    done < <(find . -maxdepth 1 -type f -print0)
}

#** ui_cd - cd with return test and error message exit on fault
#
# This is necessary, because you must test the return value of
# every cd. A failed cd could have dire consequences when
# subsequent directory and file commands are executed,
#*
ui_cd() {
	local dir="$1"
	local dirstr

	if [ "$dir" == "-" ]; then dirstr="cd -"; else dirstr="$dir"; fi

	cd "$dir" > /dev/null || ui_exit "$ui_err_invdir" "$dirstr"
}

##########################
# Miscellaneous
##########################

# ui_catoneline
# cat the nth line of a file.
# $1 - the file
# $2 - one-based number of the line
#
ui_catoneline() {
	head -"$2" "$1" | tail -1
}

#** ui_replaceline: replace a numbered line in a file
#
# Replaces one line in a file, using only the line number instead of
# pattern matching.
#
# $1 - Line number
# $2 - Text to write over the existing text in the line
# $3 - File
#
# Returns 1 if the line number exceeds the number of lines in the file.
#*
ui_replaceline() {
	local -i line
	local new_content

	(($# != 3)) && return "$ui_err_invargc"
	check_lineargs "$1" "$3" || return $?

	awk -v line="$1" -v new_content="$2" '{
		if (NR == line) {
			print new_content;
		} else {
			print $0;
		}
	}' "$3" > "$ui_tempfile"
	[ -f "$ui_tempfile" ] && mv -f "$ui_tempfile" "$3"
	return 0
}

#** ui_replaceline_raw: replaces a numbered line in a file without checking
#
# Replaces one line in a file, using only the line number instead of
# pattern matching.
#
# NOTE:
#  This "raw" version does not check arguments for integrity, so you
#  must be sure that you have valid arguments, or enjoy indeterminate
#  results.
#
# $1 - Line number
# $2 - Text to write over the existing text in the line
# $3 - File
#*
ui_replaceline_raw() {
	local -i linenum
	local newtext

	awk -v linenum="$1" -v newtext="$2" \
		'NR==linenum {$0=newtext} {print}' \
		"$3" > "$ui_tempfile"
	[ -f "$ui_tempfile" ] && mv -f "$ui_tempfile" "$3"
	return 0
}

check_lineargs() {
	local -i number="$1"
	local file="$2"
	local -i lines
	local -i argc=$#

	((argc == 2)) || return "$ui_err_invargc"
	ui_isdigit "$number" return "$ui_err_notdigit"
	[ -f "$file" ] || return "$ui_err_invfile"
	lines=$(wc -l < "$file")
	((number > lines)) && return "$ui_err_invlinec"
	((number == 0)) && return "$ui_err_invlinec"
	return 0
}

#** ui_readline: reads a numbered line in a file
#
# $1 - line number
# $2 - file to read
#
# Returns nonzero on inconsistent input.
# 	ui_err_invargc
#	ui_err_notdigit
#	ui_err_notfile
#	ui_err_invlinec
#
# call: line=$(ui_readline line file)
#*
ui_readline() {
	local -i line

	check_lineargs "$1" "$2" || return $?

	awk -v line="$1" '{
		if (NR == line) {
			print $0;
		}
	}' "$2"
	return 0
}

#** ui_readline_raw: reads a numbered line in a file without checking
#
# Reads one line in a file given the line number.
# $1 - line number
# $2 - file to read
#
# Always returns 0, so you'd better know what you're doing
# when you use this. There are no input consistency checks.
#
# call: line=$(ui_readline line file)
#*
ui_readline_raw() {
	local -i line

	awk -v line="$1" '{
		if (NR == line) {
			print $0;
		}
	}' "$2"
	return 0
}

#** ui_insertline: insert a line into a file at the given line number.
#
# If the line number is greater than the number of lines in the file,
# the line is appended to the end of the file.
#
# $1 - line number
# $2 - text to insert
# $3 - file
#*
ui_insertline() {
	local -i lc
	local -i line
	local new_content

	lc=$(wc -l < "$3")

	(($# == 3)) || return "$ui_err_invargc"

	ui_isdigit "$1" || return "$ui_err_notdigit"

	[ -f "$3" ] || return "$ui_err_invfile"

	if (($1 > lc)); then
		echo "$2" >> "$3"
	else
		awk -v line="$1" -v new_content="$2" '{
			if (NR == line) {
				print new_content;
			}
			print $0;
		}' "$3" > "$ui_tempfile"
		mv -f "$ui_tempfile" "$3"
	fi
}

#** ui_deleteline: delete a line in the file at the given line number
#
# $1 - line number
# $2 - file
#*
ui_deleteline() {
	local -i line

	check_lineargs "$1" "$2" || return $?

	awk -v line="$1" '{
		if (NR != line) {
			print $0;
		}
	}' "$2" > "$ui_tempfile"
	mv -f "$ui_tempfile" "$2"
}

#** ui_toggle: toggle a boolean value
#
# $1 - value is toggled by reference
#*
ui_toggle() {
	local boolean=${!1}
	if $boolean; then eval "$1"=false; else eval "$1"=true; fi
}

#** ui_cycle_state - cycle through the states of a variable
#
# $1 - variable value changed by reference
# $2 - number of states
#*
ui_cycle_state() {
	local -n uics_var=$1
	local states=$2

	((++uics_var))
	((uics_var >= states)) && uics_var=0
}

#** ui_digit2bool - convert 0 and 1 to true and false
#
# $1 - reference to convert to boolean, must be 0 or 1
#*
ui_digit2bool() {
	local boolean=${!1}
	if $boolean; then eval "$1"=true; else eval "$1"=false; fi
}

#** ui_strindex string-1 string-2
#
# $1 - string to search
# $2 - string to find
#
# Echo zero-based index of the first instance of string-2 in string-1
# Echoes -1 if string-2 is not found in string-1
#*
ui_strindex() {
	local x="${1%%$2*}"
	[[ $x = "$1" ]] && echo -1 || echo ${#x}
}

# ui_getlastch char string
#
# Return zero based index of the last incidence of the given char in
# the given string.
#
# Returns the position of the last $1 in the string, or zero if none
# is found.
#
# $1 - character of which we're looking for the last instance
# $2 - the string to search for that character
#
ui_getlastch() {
	ch="$1"
	str="$2"

	echo "$str" | awk -F"$ch" '{print length($0)-length($NF)}'
}

#** ui_inarray(): looks for an integer in an integer array
#
# $1 value
# $2 array, must be passed by reference, without leading '$'
# $3 optional return value will contain the zero-based index of where the
#    value parameter was found. Will be left unmolested if not found.
#
# Returns 0 if found, 1  if not.
# Optionally returns the index of the item in the array by reference.
#
# Examples:
#
#   declare -a array=(3 8 12 7 16 9 3)
#
#   # The following will echo "found"
#   #
#   inarray 12 array[@]
#   [ $? -eq 0 ] && echo "found" || echo "not found"
#
#   # The following will echo '2', because 12 is at index 2
#   #
#   ui_inarray 12 array[@] index
#   echo $index
#*
ui_inarray() {
	local -i index="$1"
	local -a ary=("${!2}")
	local -i i
	local -i j=0

	(($# == 3)) && local -i -n jdx="$3"

	for i in "${ary[@]}"; do
		if ((i == index)); then

			# If there is a third argument, then give it the value
			# of the current index, j.
			#
			(($# == 3)) && jdx="$j"
			return 0
		fi
		((j++))
	done

	return 1
}

#** ui_nextinarray: seeks next highest int in an int array, given an int
#
# $1 input value
# $2 array, must be passed by reference, without leading '$'
# $3 return value will contain the index of the next integer in the array
#    that has a higher value than the input.
#    If the input is greater than the largest number in the array, then
#    the index of the largest number will be returned.
#
# Returns 0 if found, 1  if the input integer is higher than any in the array.
# Returns the index of the number in the array that is closest in value but
# higher than the input value.
#
# The array must consist of numbers in ascending order.
#
# Examples:
#
#   declare -a array=(2 4 6 8 10)
#
#   # The following will return 2 in "next", which is the index
#   # of the number 6 in the array.
#   #
#   ui_nextinarray 5 array[@] next
#   echo $next
#   2
#*
ui_nextinarray() {
	local -i index="$1"
	local -a ary=("${!2}")
	local -i -n jdx="$3"
	local -i i

	jdx=0

	for i in "${ary[@]}"; do
		if ((i > index)); then
			return 0
		fi
		((jdx++))
	done

	jdx=$((${#ary[@]} - 1 ))
	return 1
}

#** ui_aryindex: find the index of exact matching string in array
#
# $1 - array name passed by reference, no leading $
# $2 - string being sought, passed by value
# $3 - index of string in array, passed by reference, no leading $
#
# Returns 0 if match is found, 1 if not
#*
ui_aryindex () {
    local -n ar=$1
    local fld="$2"
    local -n ix=$3

    for ((ix = 0; ix < ${#ar[@]}; ix++))
    do
        [ "${ar[ix]}" == "$fld" ] && break
    done

    ((ix < ${#ar[@]})) && return 0 || return 1
}

# ui_isdigit - determines if $1 is a digit
#
# returns 0 if digit, 1 if not
#
# example:
#
# $(isdigit $foo) && echo yup || echo nope
#
ui_isdigit() {
	[[ $1 =~ ^-?[0-9]+$ ]] && return 0 || return 1
}

# ui_isxdigit - determines if $1 is a hexacecimal digit
#
# returns 0 if hex digit, 1 if not
#
# example:
#
# $(isxdigit $foo) && echo yup || echo nope
#
ui_isxdigit() {
	[[ $1 =~ ^-?[0-9a-fA-F]+$ ]] && return 0 || return 1
}

#** ui_strtok: tokenizes a string and returns an array
#
# $1 - the string to tokenize
# $2 - the string of delimiters
# $3 - returns the tokenized string as an array
#
# examples:
#
# ui_strtok kernel-pegas-4.11.0-2.el7.x86_64 ".-" array
#
# ${array[@]} will contain all the tokens separated by delimiters "."
# and "-", and the delimiters will be replaced by spaces.
#*
ui_strtok() {
	IFS="$2" read -r -a "$3" <<< "$1"
}

#===  FUNCTION  ================================================================
#**        NAME:  ui_trunc_string
#   DESCRIPTION:  truncates the given string according to the number of columns
#                 in the terminal less the "pad" parameter. If the pad parameter
#                 wasn't passed or is zero, then the string will be truncated to
#                 the number of columns in the terminal.
#    PARAMETERS:  $1 - string to truncate
#                 $2 - padding characters to subtract from terminal columns
#       GLOBALS:  tcols - set at script load time by tcols=$(tput cols)
#       RETURNS:  none
#*
#===============================================================================
ui_trunc_string() {
	local str="$1"
	local pad=$2
	local strlen

	[ $# -lt 2 ] && pad=0

	strlen=$((tcols - pad))
	echo "${str:0:$strlen}"
}

#** ui_call: call a function and save its status
#
# $1 - contains the function or command to execute
# $2 - will receive the status, passed by reference, so no leading $
#*
ui_call() {
	local uic_cmd="$1"
	local -n uic_stat=$2

	$uic_cmd
	uic_stat=$?
	return $uic_stat
}

##################
# Debug Routines
##################

#** ui_press_any: prompt user to  press any key to continue
#*
ui_press_any() {
	echo -en "${MNU}Press any key to continue ...$OFF "
	read -r -n1
}

#** ui_press_any_ctlc: prompt to press any key to continue or ctl-c to exit
#*
ui_press_any_ctlc() {
	echo -en "${MNU}Press any key to continue or Ctl-C to exit ...$OFF "
	read -r -n1
	echo
}

#** ui_callwstat: call a function, print its status and pause with press_any
#
# $1 - contains the function or command to execute
#*
ui_callwstat() {
	local uicws_cmd="$1"
	local uicws_stat

	echo -e "${INF}Executing $MNU$uicws_cmd$OFF"
	ui_press_any
	$uicws_cmd
	uicws_stat=$?
	echo -e "${MNU}$uicws_cmd ${INF}return status: $MNU$uicws_stat$OFF"
	ui_press_any
	return $uicws_stat
}
