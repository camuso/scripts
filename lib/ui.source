#!/bin/bash
#
# ui.source
#
# v0.1
#
# bash library
#
# when adding routines to this library, be sure to declare local variables
# as local. You may otherwise experience behavior that is difficult to debug.
#

##############################
# Global Variables and Consts
##############################

declare ui_loaded=true
declare ui_b_debug=false

#
# Text Attributes
#
unset BLD && declare BLD='\e[1m'
unset UND && declare UND='\e[4m'
unset OFF && declare OFF='\e[m'
#
# Text color definitions
# For color tables see:
# http://bitmote.com/index.php?post/2012/11/19/Using-ANSI-Color-Codes-to-Colorize-Your-Bash-Prompt-on-Linux
#
unset BLK && declare BLK='\e[0;30m'
unset RED && declare RED='\e[0;31m'
unset GRN && declare GRN='\e[0;32m'
unset YEL && declare YEL='\e[0;33m'
unset BLU && declare BLU='\e[0;34m'
unset MGT && declare MGT='\e[0;35m'
unset CYN && declare CYN='\e[0;36m'
unset WHT && declare WHT='\e[0;37m'
#
# Bright colors
#
unset BBLK && declare BBLK='\e[1;90m'
unset BRED && declare BRED='\e[1;91m'
unset BGRN && declare BGRN='\e[1;92m'
unset BYEL && declare BYEL='\e[1;93m'
unset BBLU && declare BBLU='\e[1;94m'
unset BMGT && declare BMGT='\e[1;95m'
unset BCYN && declare BCYN='\e[1;96m'
unset BWHT && declare BWHT='\e[1;97m'

unset BWOR && declare BWOR='\e[1;37;41m'

declare terminal_background=0
declare tb_lite=1
declare tb_dark=2
declare b_color=

# Terminal magic
#
declare -i tlines=$(tput lines)	# number of lines in the terminal
declare -i tcols=$(tput cols)	# number of columns in the terminal
declare CL1="\e["$tcols"D"	# column 1 of the current line
declare CCR="\e[K"    		# clear line and carriage return
declare UP1="\e[1A"		# move cursor up one line

declare punctset="\"#$%&'()*+,-./:;<=>?@[\\]^\`{|}~!"
declare qstr="${MNU}'q'$OFF"
declare msgretry="${INF}Retry or type $qstr$INF to quit: $OFF"

# Errors
#
declare -i ui_err_invargc=1
declare -i ui_err_invfile=2
declare -i ui_err_invdir=3
declare -i ui_err_invlinec=4
declare -i ui_err_nofiles=5
declare -i ui_err_notdigit=6
declare -i ui_err_missing_arg=7
declare -i ui_err_boundary=$ui_err_missing_arg

declare -a ui_err_msg=(
""
"Invalid argument count"
"Invalid file"
"Invalid directory"
"Invalid line count"
"No files found"
"not a didgit"
"missing argument"
)

# Contlol-C exit code
# see http://www.tldp.org/LDP/abs/html/exitcodes.html
#
unset CTLC_EXIT &&  declare -i CTLC_EXIT=130

declare ui_tempfile="/dev/shm/ui_temp_file"

#########################
# Shell Routines
#########################

# ui_popterm
#  pop up a default user terminal an optionally execute a command in it.
#
# Arguments:
#  $1 - optional command to execute in the popup terminal
#
# Usage:
#  Optional command must be quoted with single or double quotes
#
#  ui_popterm 'less ~/bin/lib/ui.source'
#
ui_popterm() {
	cmd="$1"
	[ -n "$cmd" ] && x-terminal-emulator -e "$cmd" || x-terminal-emulator
}

ui_get_screenbackground() {
	echo
	echo "Is your terminal background best described as:"
	echo "1. light"
	echo "2. dark"

	loop_range 1 2 terminal_background
}

ui_set_colors() {
	$b_color || {
		b_color=false
		INF=
		MNU="$BLD"
		STA="$BLD"
		WRN="$BLD"
		return 1
	}

	case $terminal_background in
		$tb_lite ) INF="$OFF""\033[38;5;90m"
			   MNU="\033[1;38;5;21m"
			   STA="\033[1;38;5;28m"
			   WRN=$BRED
			   ;;
		$tb_dark ) INF=$OFF$YEL
			   MNU=$BYEL
			   STA=$BGRN
			   # WRN=$BWOR
			   WRN=$BRED
			   ;;
	esac

	qstr="'$STA\0q$OFF\0'"
	return 0
}

ui_query_colors() {
	[ -z $b_color ] &&loop_yn "Do you want color text? y/n : " b_color
	$b_color || return
	ui_get_screenbackground
	ui_set_colors
}

ui_use_colors() {
	b_color=true
	ui_get_screenbackground
	ui_set_colors
}

# ui_get_curpos - get the cursor row and column
#
# $1 - receives the zero-based row value
# $2 - receives the zero-based column value
#
ui_get_curpos() {
	exec < /dev/tty
	oldstty=$(stty -g)
	stty raw -echo min 0
	# on my system, the following line can be replaced by the line below it
	echo -en "\033[6n" > /dev/tty
	# tput u7 > /dev/tty    # when TERM=xterm (and relatives)
	IFS=';' read -r -d R -a pos
	stty $oldstty
	# change from one-based to zero based so they work with: tput cup $row $col
	row=$((${pos[0]:2} - 1))    # strip off the esc-[
	col=$((${pos[1]} - 1))

	eval $1=$row
	eval $2=$col
}

# ui_putnchar - repeat print a char "n" times as directed
#
# $1 - the character to repeat print
# $2 - the number of times to repeat it.
#
# Example:
#
#    24_A=($ui_putnchar "A" 24  # creates a string with 24 "A" chars in it.
#
ui_putnchar() {
	local ch="$1"
	local num=$2
	local i

	for ((i = 0; i < $num; ++i)); do
		echo -n "$ch"
	done
}

# ui_padfield - pad a string with a given character to fill a field
#
#  $1 - str
#  $2 - pad character
#  $3 - field width
#
#  Example:
#  	paddedstr=$(ui_padfield "foo" "." 6
#  	echo $paddedstr
#  	...foo
#
ui_padfield() {
	local str="$1"
	local padch="$2"
	local fldw=$3
	local padn
	local padstr

	[ ${#str} -ge $fldw ] && echo -n "$str" && return
	padn=$((fldw - ${#str}))
	padstr=$(ui_putnchar "$padch" $padn)
	echo -n "$padstr$str"
	return
}

# ui_clrline - clear the current line and optionally move cursor up one
#
# $1 - if not empty, moves the cursor up one line.
#
# GLOBALS
# 	CL1 - puts cursor at column 1
# 	CCR - clears the line and issues a carriage return
# 	UP1 - moves the cursor up one line
#
ui_clearline() {
	# Erase the line and put the cursor back in the first column of the
	# line. Leave the TTY calls as discrete echos for the sake of
	# clarity. The bash interpreter will merge them anyway.
	#
	echo -en "$CL1"
	echo -en "$CCR"
	[ -z "$1" ] || echo -en "$UP1"
	echo -en "$CL1"
	echo -en "$CCR"
}

# ui_waitonproc
#
# Prints a dot to the screen every half second until the passed PID
# completes.
#
# $1 - PID of process we are waiting for.
# $2 - optional time argument
#
ui_waitonproc () {
    local __pid__=$1;
    local __time__=1

    [ $# -eq 2 ] && __time__=$2
    while kill -0 $__pid__ > /dev/null 2>&1; do
        echo -n '.';
        sleep $__time__;
    done
    wait $__pid__
    return $?
}

# ui_waitonproc_tty
#
# Prints a dot to the screen according to the time argument. When the dots
# reach the rightmost column of the screen, the line is erased and the dots
# start again from the leftmost column.
#
# An optional text message is written first before the dots.
#
# GLOBALS
#   tcols - number of columns in the terminal
#
# $1 - PID of process we are waiting for.
# $2 - time argument
# $3 - optional text
#
ui_waitonproc_tty () {
    local pid=$1;
    local tmo="$2"
    local txt="$3"
    local tcnt=1

    [ -z "$txt" ] || echo -e "$txt"
    while kill -0 $pid > /dev/null 2>&1; do
        echo -n '.';
        sleep $tmo;
	let ++tcnt
	if [ $tcnt -ge $tcols ]; then
            ui_clearline
	    tcnt=1
	fi
    done

    # Leave the TTY as it was before we were called.
    #
    ui_clearline
    wait $pid
    return $?
}

# ui_sh_backout
# Back out of all shells until you are down to the one you want.
# Takes one parameter, the shell you want to back out to.
#
function ui_sh_backout {
	while [ $SHLVL -gt $1 ]; do
		echo "Exiting shell level $SHLVL"
		exit 0
	done
}

# ui_sh_spawn
# Spawns a new shell.
# $1 - Additional message sent by caller
# $2 - logfile to capture all session output. In this case,
#      $1 would at least have to be an empty string.
# Returns the value the user exited with.
#
function ui_sh_spawn {
	local message="$1"
	local logfile="$2"
	local ret=0
	echo "Leaving shell $SHLVL, spawning shell $(($SHLVL + 1))."
	[ "$message" ] && echo -e ""$message""
	echo "Type \"exit\" or \"ctrl-D\" to return to this point in the script."
	if [ "$logfile" ]; then
		bash 3>&2>&1 | tee $logfile
		ret=$?
	else
		bash
		ret=$?
	fi

	return $ret
}

function ui_sh_myshlvl {
	echo "Shell level: $SHLVL"
}

function buhbye() {
	local exitstr=$1
	local exitfun=$2
	echo -e "$exitstr"
	exit 0
}

# END shell routines
#####################

#######################
# User Input Routines
#######################

# getyn() $1 [$2]
#
# Takes $1 for a prompt string and adds color emphasis, if color is enabled.
# Places true or false into $2, which is an optional argument.
# User is prompted for (y/n) answer at the end of the prompt string.
#
b_ui_int_first_getyn=false
b_ui_int_firstpass=true

function getyn {

	local promptstring="$1"
	local __answer__
	local __stat__

	while true; do

		echo -en "$INF$promptstring $MNU(y/n) : $OFF"
		read -n1 __answer__
		echo

		if [ "$__answer__" == "y" ]; then
			__stat__=true
			break
		fi

		if [ "$__answer__" == "n" ]; then
			__stat__=false
			break
		fi
	done

	[ $# -eq 2 ] && eval $2=$__stat__
}

# doyn() $1 $2 [$3] [$4]
#
# $1 -	Calls getyn() with $1 for a prompt string.
# $2 -	A string containing the command that will be executed if the user
#	responded "y"
# $3 -	Optional. A string containing the command that will be executed if
#	the user responded "n"
# $4 - 	Optional. Will contain the value of the user's response. If there is
#	no action for $3 to do, then a null string "" must be passed for $3.
#
function doyn {
	local promptstring=$1
	local y_command=$2
	local n_command=$3
	local response

	getyn "$promptstring" response
	[ $# -lt 3 ] && n_command=""

	if $response ; then
		$y_command
	fi

	if ! $response ; then
		$n_command
	fi

	[ $# -eq 4 ] && eval $4=$response
}

function getuser {
	local promptstring="$1"
	local var=

	echo -ne "$INF$promptstring$OFF"
	read var
	eval $2=$var
}

# getch()
#
# Returns character in $1, no echo
#
getch() {
	local char
	read -n1 char

	# In order to receive special characters, like '>', pass quotes
	# to eval by escaping them on the command line.
	#
	[ $# -gt 0 ] && eval $1=\"$char\"
}

# getchar()
#
# Returns character in $1 followed by echo
#
getchar() {
	local gc_char
	read -n1 gc_char
	echo

	# In order to receive special characters, like '>', pass quotes
	# to eval by escaping them on the command line.
	#
	[ $# -gt 0 ] && eval $1=\"$gc_char\"
}

# promptgetchar()
#
# Prints a prompt passed in $1 and returns the char in $2
#
function promptgetchar {
	echo -en "$1"
	getchar $2
}

# loop_yn()
#
# Loop until user gives either a y or n answer.
# Simpler than the getyn() routine above.
#
# $1 - prompt string
# $2 - the boolean value to be returned (true/false)
#
# RETURNS
#  0 for yes
#  1 for no
#
loop_yn() {
	local ans=
	while true; do
		promptgetchar "$1" ans
		[ -z "$ans" ] && continue
		[ "$ans" == "y" ] && eval $2=true  && return 0
		[ "$ans" == "n" ] && eval $2=false && return 1
		echo -e "Please enter 'y' or 'n'."
	done
}

# loop_yn_ro() - return-only version
#
# Loop until user gives either a y or n answer.
#
# $1 - prompt string
#
# RETURNS
#  0 for yes
#  1 for no
#
loop_yn_ro() {
	local ans=
	while true; do
		promptgetchar "$1" ans
		[ -z "$ans" ] && continue
		[ "$ans" == "y" ] && return 0
		[ "$ans" == "n" ] && return 1
		echo -e "Please enter 'y' or 'n'."
	done
}

# loop_range()
#
# Loop until user gives a number in the range defined by the args
#
# $1 - minimum
# $2 - maximum
# $3 - the value to be returned
#
loop_range() {
	local min=$1
	local max=$2
	local number
	local cmd
	local pstr=\
""$OFF$INF"Please enter a number between $MNU$min$INF and $MNU$max$OFF: "

	[ $max -lt 10 ] && cmd=promptgetchar || cmd=getuser
	# echo "cmd: $cmd"

	while true; do
		$cmd "$pstr" number

		if [[ $number =~ ^-?[0-9]+$ ]]  && \
		   [[ $number -ge $min ]]       && \
		   [[ $number -le $max ]]; then
			eval $3=$number
			echo
			return 0
		fi
	done
}

# loop_range_q()
#
# Loop until user gives a number in the range defined by the args or
# enters 'q' to quit and return to the caller with the 'q'
#
# $1 - minimum
# $2 - maximum
# $3 - the value to be returned
#
loop_range_q() {
	local min=$1
	local max=$2
	local number
	local cmd
	local pstr=\
"$OFF${INF}Please enter a number between $MNU$min$INF and $MNU$max$OFF or $qstr: "

	echo -e ""$INF"Press $qstr$INF to return without making a selection.$OFF"
	[ $max -lt 10 ] && cmd=promptgetchar || cmd=getuser
	# echo "cmd: $cmd"

	while true; do
		$cmd "$pstr" number

		[ "$number" = "q" ] && return 1

		if [[ $number =~ ^-?[0-9]+$ ]]  && \
		   [[ $number -ge $min ]]       && \
		   [[ $number -le $max ]]; then
			eval $3=$number
			echo
			return 0
		fi
	done
}

select_from_array() {
	local contents=$1[@]
	local promptstr="$2"
	local current="${!3}"
	# local current=$3

	local array=(${!contents})
	local asize=asize=${#array[@]}
	local curnum
	local i
	local element
	local selection

	echo -en "\n"$MNU"Choose one of the $STA$promptstr$OFF"
	echo -e "$MNU in the following list.$OFF"
	echo -e ""$INF"Current selection is :$STA $current$OFF"

	for ((i = 0; i < asize; ++i)); do
		element="${array[i]}"
		if [ "$element" == "$current" ]; then
			curnum=$i
			echo -e "$STA * $((i+1)). $element$OFF"
		else
			echo -e "   $MNU$((i+1)).$OFF $element"
		fi
	done

	echo

	while true; do
		loop_range_q 1 $asize selection || return 1

		[ $? -eq 0 ] && eval $3=${array[$((selection-1))]}
		is_array_member array ${!3}

		if [ $? -eq 0 ]; then
			break
		else
			echo -e ""$STA"${!3}$WRN is not a valid selection$OFF"
			continue
		fi
	done

	return 0
}

is_array_member() {
	local contents=$1[@]
	local member="$2"

	local array=(${!contents})
	local asize=${#array[@]}
	local i
	local mem

	for ((i = 0; i < asize; ++i)); do
		mem=${array[i]}
		[ "$mem" == "$member" ] && return 0
	done

	return 1
}

############################
# Directory Routines
#############################

# ui_getfilespec - get a pathname to a file and loop until we get
#                  a legitimate file name
# $1 - prompt
# $2 - returned filespec
#
function ui_getfilespec {
	local prompt="$1"
	local filespec
	local found=false
	local retval=0
	local msginvfilnam="${WRN}Invalid file name. $msgretry"

	while :; do
		getuser "$prompt" filespec
		[ "$filespec" ] || echo -e "$msginvfilnam"
		[ "$filespec" = "q" ] && return 1
		[ -f "$filespec" ] && break
		echo -e "$WRN$filespec is not a valid file.$OFF"
	done

	eval $2=$filespec
	return $retval
}

# ui_chkdir "$string"
# where string is a string representation of a directory
# returns
#	0 if the string exists as a valid directory
#	1 if directory does not exist
#	2 if the string exists as a file
#	3 if the string is "q" for "quit trying"
#	4 if the string was empty
#
function ui_chkdir {
	[ "$1" ]      || return 4
	[ "$1" = "q" ] && return 3
	[ -d "$1" ]   && return 2
	[ -f "$1" ]   && return 1
	return 0
}

# ui_verifydir() - determines whether the name is a valid directory
#
# $1 - the name of the directory to verify
#
# Returns 0 if the directory is valid, else returns 1
#
ui_verifydir() {
	local dir="$1"
	local stat

	ui_chkdir "$dir"
	stat=$?

	case $stat in
		0 )	echo "$MNU\"$dir\"$WRN does not exist.$OFF"
			return 1
			;;
		1 )	echo -e "$MNU\"$dir\"$WRN already exists as a file.$OFF"
			return 1
			;;
		2 ) 	return 0
	esac
}

# ui_getnewdir prompt name
#
# $1 - prompt
# $2 - will contain the new directory name
#
# Prompts the user for a name to create a new directory and passes
# it back to the caller in the "name" argument.
# If the name already exists as a file, prompts for a new name.
# If the name already exists as a directory, asks if user wants to
# use that directory, warning that all its contents may be altered.
#
# Returns:
# 	0 - newly created directory
# 	2 - valid existing directory
# 	3 - user quitting
#
function ui_getnewdir {
	local prompt="$1"
	local newdir
	local stat
	local ans=true
	local exists="$WRN\"$newdir\" already exists as a file. $msgretry"
	local noexist="${INF}: does not exist.$OFF"
	local fail="${WRN}Could not create directory: $newdir$OFF"

	while true; do
		getuser "$prompt" newdir

		ui_chkdir "$newdir"
		local stat=$?

		case $stat in
		1 )	echo -e "$exists"
			;;
		2   ) 	eval $2="$newdir"	# valid existing directory
			return $stat
			;;
		3 )	# echo "ui_getnewdir: newdir: $newdir"
			return $stat	# user wants to quit trying
			;;
		4 )	echo -e "${WRN}Nothing entered. $msgretry"
			;;
		0 )	echo -e "$STA$newdir $noexist"
			getyn "Want to create "$newdir" now?" ans
			if $ans; then
				mkdir -p "$newdir"
				stat=$?
				if [ $stat -ne 0 ]; then
					echo -e "$fail"
					continue
				fi
			else
				continue
			fi
			eval $2="$newdir"
			return $stat
			;;
		esac
	done
}

function ui_testdir {
	local tstdir="$1"
	local stat
	local createstr="${INF}Want to create it now?$OFF"

	while true; do

		ui_chkdir "$tstdir"
		stat=$?

		if [ $stat -eq 0 ]; then
			echo -e "$STA$tstdir$INF does not exist."
			doyn "$createstr" "mkdir -p $tstdir"
			eval $2="$tstdir"
			return $stat
		fi

		if [ $stat -eq 1 ]; then
			echo -e "$STA$tstdir$INF exists as a file. Try again."
			getuser "Gimme a valid directory: " tstdir
			continue;
		fi

		if [ $stat -eq 2 ]; then
			eval $2="$tstdir"
			return $stat
		fi
	done
}

# ui_getdirspec - extract directory name from a path to a file.
#
# NOTE: Must be a filename including a path to a file.
#
# Use command substitution for this function, i.e.
# 	dirspec=$(getdirspec arg)
#
# $1 - filename including directory path
#
function ui_getdirspec() {
	local str="$1"
	local isdir=$(echo "$str" | grep "/")
	if [ "$isdir" != "" ]; then
		local rts=$(echo "$str" | rev)
		local ds=$(echo "${rts#*/}" | rev)
	else
		ds="./"
	fi
	echo "$ds"
}

# ui_remove_spaces - remove spaces from filenames in the current directory
#
# The intention is that the calling function has already issued cd to the
# directory in which ui_remove_spaces will execute.
#
# No globals, no arguments.
#
ui_remove_spaces() {
    local sp=" "
    ls | while read -r FILE
    do
	[[ $FILE == *$sp* ]] || continue
	mv -v "$FILE" `echo $FILE | tr ' ' '_' `
    done
}

##########################
# Miscellaneous
##########################

# ui_catoneline
# cat the nth line of a file.
# $1 - the file
# $2 - one-based number of the line
#
function ui_catoneline {
	echo $(cat $1 | head -$2 | tail -1)
}

# ui_replaceline
# Replaces one line in a file, using only the line number instead of
# pattern matching.
# $1 - Line number
# $2 - Text to write over the existing text in the line
# $3 - File
#
# Returns 1 if the line number exceeds the number of lines in the file.
#
function ui_replaceline {
	local stat
	local line
	local new_content

	[ $# -ne 3 ] && return $ui_err_invargc
	check_lineargs $1 $3
	stat=$?
	[ $stat -ne 0 ] && return $stat

	awk -v line=$1 -v new_content="$2" '{
		if (NR == line) {
			print new_content;
		} else {
			print $0;
		}
	}' "$3" > $ui_tempfile
	[ -f "$ui_tempfile" ] && mv -f $ui_tempfile "$3"
	return 0
}

# ui_replaceline_raw
#
# Replaces one line in a file, using only the line number instead of
# pattern matching.
#
# NOTE:
#  This "raw" version does not check arguments for integrity, so you
#  must be sure that you have valid arguments, or enjoy indeterminate
#  results.
#
# $1 - Line number
# $2 - Text to write over the existing text in the line
# $3 - File
#
function ui_replaceline_raw {
	local linenum

	awk -v linenum=$1 -v newtext="$2" \
		'NR==linenum {$0=newtext} {print}' \
		$3 > $ui_tempfile
	[ -f "$ui_tempfile" ] && mv -f $ui_tempfile "$3"
	return 0
}

check_lineargs() {
	local number=$1
	local file="$2"
	local lines
	local argc=$#

	[ $argc -eq 2 ] || return $ui_err_invargc

	ui_isdigit $number
	[ $? -eq 0 ] || return $ui_err_notdigit

	[ -f "$file" ] || return $ui_err_notfile

	lines=$(cat "$file" | wc -l)
	((number > lines)) && return $ui_err_invlinec
	((number == 0)) && return $ui_err_invlinec
	return 0
}

# ui_readline
# Reads one line in a file given the line number.
# $1 - line number
# $2 - file to read
#
# Returns nonzero on inconsistent input.
# 	ui_err_invargc
#	ui_err_notdigit
#	ui_err_notfile
#	ui_err_invlinec
#
# call: line=$(ui_readline line file)
#
# The line of text will be echoed to stdout
#
function ui_readline {
	local __line__
	local stat

	check_lineargs $1 $2
	stat=$?
	[ $stat -eq 0 ] || return $stat

	awk -v __line__="$1" '{
		if (NR == __line__) {
			print $0;
		}
	}' $2
	return 0
}

# ui_readline_raw
# Reads one line in a file given the line number.
# $1 - line number
# $2 - file to read
#
# Always returns 0, so you'd better know what you're doing
# when you use this. There are no input consistency checks.
#
# call: line=$(ui_readline line file)
#
# The line of text will be echoed to stdout
#
function ui_readline_raw {
	local __line__

	awk -v __line__="$1" '{
		if (NR == __line__) {
			print $0;
		}
	}' $2
	return 0
}

# ui_insertline
# Insert a line into a file at the given line number.
# If the line number is greater than the number of lines in the file,
# the line is appended to the end of the file.
#
# $1 - line number
# $2 - text to insert
# $3 - file
#
function ui_insertline {
	local lc=$(cat $3 | wc -l)

	[ $# -eq 3 ] || return $ui_err_invargc

	ui_isdigit $1
	[ $? -eq 0 ] || return $ui_err_notdigit

	[ -f "$3" ] || return $ui_err_notfile

	if [ $1 -gt $lc ]; then
		echo "$2" >> $3
	else
		awk -v line=$1 -v new_content="$2" '{
			if (NR == line) {
				print new_content;
			}
			print $0;
		}' $3 > $ui_tempfile
		mv -f $ui_tempfile "$3"
	fi
}

# ui_deleteline
# Delete a line in the file at the given line number.
#
# $1 - line number
# $2 - file
#
function ui_deleteline {
	local stat

	check_lineargs $1 $2
	stat=$?
	[ $stat -eq 0 ] || return $stat

	awk -v line=$1 '{
		if (NR != line) {
			print $0;
		}
	}' $2 > $ui_tempfile
	mv -f $ui_tempfile $2
}

# ui_toggle - toggle a boolean value
#
function ui_toggle {
	local boolean=${!1}
	$boolean && eval $1=false || eval $1=true
}

# ui_cycle_state - cycle through the states of a variable
#
# $1 - variable
# $2 - number of states
#
ui_cycle_state() {
	local _var_=$1
	local _states_=$2

	let ++_var_
	[ $_var_ -lt $_states_ ] && eval $1=$_var_ || eval $1=0
}

# ui_digit2bool - convert 0 and 1 to true and false
#
# $1 digit to convert to boolean, must be 0 or 1
#
function ui_digit2bool {
	local boolean=${!1}
	$boolean && eval $1=true || eval $1=false
}

# ui_strindex string-1 string-2
#
# Return zero-based index of the first instance of string-2 in string-1
# Returns -1 if string-2 is not found in string-1
#
function ui_strindex {
	local x="${1%%$2*}"
	[[ $x = $1 ]] && echo -1 || echo ${#x}
}

# ui_getlastch char string
#
# Return zero based index of the last incidence of the given char in
# the given string.
#
# Returns the position of the last $1 in the string, or zero if none
# is found.
#
# $1 - character of which we're looking for the last instance
# $2 - the string to search for that character
#
ui_getlastch() {
	ch="$1"
	str="$2"

	echo "$str" | awk -F"$ch" '{print length($0)-length($NF)}'
}

# ui_inarray()
#
# Looks for an integer in an integer array
# Returns 0 if found, 1  if not.
# Optionally returns the index of the item in the array.
#
# $1 value
# $2 array, must be passed by reference, without leading '$'
# $3 optional return value will contain the zero-based index of where the
#    value parameter was found. Will be left unmolested if not found.
#
# Examples:
#
#   declare -a array=(3 8 12 7 16 9 3)
#
#   # The following will echo "found"
#   #
#   inarray 12 array[@]
#   [ $? -eq 0 ] && echo "found" || echo "not found"
#
#   # The following will echo '2', because 12 is at index 2
#   #
#   ui_inarray 12 array[@] index
#   echo $index
#
# returns 0 if found, nonzero if not found
#
ui_inarray() {
	local i
	local j=0
	local ary=(${!2})

	for i in ${ary[@]}; do
		if [ $i -eq $1 ]; then

			# If there is a third argument, then give it the value
			# of the current index, j.
			#
			[ $# -eq 3 ] && eval $3=$j
			return 0
		fi
		let j++
	done

	return 1
}

# ui_nextinarray()
#
# Looks for the next highest integer in an integer array, given an integer.
# Returns 0 if found, 1  if the input integer is higher than any in the array.
# Returns the index of the number in the array that is closest in value but
# higher than the input value.
#
# The array must consist of numbers in ascending order.
#
# $1 input value
# $2 array, must be passed by reference, without leading '$'
# $3 return value will contain the index of the next integer in the array
#    that has a higher value than the input.
#    If the input is greater than the largest number in the array, then
#    the index of the largest number will be returned.
#
# Examples:
#
#   declare -a array=(2 4 6 8 10)
#
#   # The following will return 2 in "next", which is the index
#   # of the number 6 in the array.
#   #
#   ui_nextinarray 5 array[@] next
#   echo $next
#   2
#
ui_nextinarray() {
	local i
	local j=0
	local ary=(${!2})

	for i in ${ary[@]}; do
		if [ $i -gt $1 ]; then
			eval $3=$j
			return 0
		fi
		let j++
	done

	j=$((${#ary[@]} - 1 ))
	eval $3=$j
	return 1
}

# ui_isdigit - determines if $1 is a digit
#
# returns 0 if digit, 1 if not
#
# example:
#
# $(isdigit $foo) && echo yup || echo nope
#
ui_isdigit() {
	[[ $1 =~ ^-?[0-9]+$ ]] && return 0 || return 1
}

# ui_isxdigit - determines if $1 is a hexacecimal digit
#
# returns 0 if hex digit, 1 if not
#
# example:
#
# $(isxdigit $foo) && echo yup || echo nope
#
ui_isxdigit() {
	[[ $1 =~ ^-?[0-9a-fA-F]+$ ]] && return 0 || return 1
}

# ui_strtok - tokenizes a string and returns an array
#
# $1 - the string to tokenize
# $2 - the string of delimiters
# $3 - returns the tokenized string as an array
#
# examples:
#
# ui_strtok kernel-pegas-4.11.0-2.el7.x86_64 ".-" array
#
# ${array[@]} will contain all the tokens separated by delimiters "."
# and "-", and the delimiters will be replaced by spaces.
#
ui_strtok() {
	IFS="$2" read -r -a $3 <<< "$1"
}

#===  FUNCTION  ================================================================
#          NAME:  ui_trunc_string
#   DESCRIPTION:  truncates the given string according to the number of columns
#                 in the terminal less the "pad" parameter. If the pad parameter
#                 wasn't passed or is zero, then the string will be truncated to
#                 the number of columns in the terminal.
#    PARAMETERS:  $1 - string to truncate
#                 $2 - padding characters to subtract from terminal columns
#       GLOBALS:  tcols - set at script load time by tcols=$(tput cols)
#       RETURNS:  none
#===============================================================================
ui_trunc_string() {
	local str="$1"
	local pad=$2
	local strlen

	[ $# -lt 2 ] && pad=0

	strlen=$((tcols - pad))
	echo "${str:0:$strlen}"
}

ui_press_any() {
	echo -en "${MNU}Press any key to continue ...$OFF "
	read -n1
}

ui_press_any_ctlc() {
	echo -en "${MNU}Press any key to continue or Ctl-C to exit ...$OFF "
	read -n1
	echo
}
