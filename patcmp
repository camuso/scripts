#!/bin/bash
#
# compare submitted patches with upstream

declare version="5.1"

declare MYDATA=./.data
declare MYDIR=$(dirname $(which $(basename $0)))
declare MYLIB=$MYDIR/lib
[ "$ui_loaded" ]         || source $MYLIB/ui.source
[ "$patchutils_loaded" ] || source $MYLIB/patch-utils.source

declare -i code_ok=0
declare -i code_special_action=1
declare -i code_special_exit=2
declare -i code_parmcount_err=101
declare -i code_filecount_neq=102

declare -i stat		# general purpose return status variable

declare mldir		# dir with patches downloaded from email
declare usdir		# dir with upstream patches created from commits
             		# : from the files in mldir
declare -a usfiles	# array of the upstream patch file names

declare editor
declare zstr=
declare b_zstr=false

declare -i mlcount	# count of patch files downloaded from mail
declare -i uscount	# count of patch files in upstream directory
declare -i index=0	# running 0-based index of the current patch
declare -i maxindex	# highest attainable index (mlcount - 1)
declare valpatchlist

declare b_runmismatch=false
declare b_nomismatch=true
declare mismatch_file
declare -i first_mismatch=0
declare -i last_mismatch=0
declare -i previndex
declare -i mmindex
declare -i currentmm
declare -i mismatch_count
declare -a mismatch_array
declare mismatch_numbers=""

declare lasttag=
declare lasttagfile=$MYDATA/lasttag
declare b_rmlasttag=false
declare b_backup=false

declare -i optcount=0

declare -i notify_disable_mismatch=1
declare -i notify_no_change=2

declare b_selected

declare usagestr=$(
cat <<EOF

$(basename $0) [options] dir-1 dir-2 commits-file

  Call a diff editor to compare the patch files in the two directories.
  The directories must have the same number of ".patch" files.

  -z zstr    - A special action string displayed for the 'z' menu
               item, which only appears when this option is nonzero.

  -m mm_file - An optional mismatch file passed by the caller that
               contains a list of files generated by the patbatcmp
               script.

  -t         - Optional last tag file, file that contains the last tag
               in the current branch.

  -b         - Optional terminal background. If this value is one of
               tb_lite or tb_dark, as defined in lib/ui.source, then
	       colors will be used.

  -h         - This help text.

  Exit codes:
    0 - normal exit
    1 - wrong number of args
    2 - directories do not contain the same number of patch files
  130 - user typed control-c
        see http://www.tldp.org/LDP/abs/html/exitcodes.html
\0
EOF
)

usage() {
	echo -e "$usagestr"
	exit $1
}

exit_patcmp() {
	[ -e /dev/shm/lasttag ] && rm -f /dev/shm/lasttag
	exit $1
}

# run if user hits control-c
#
control_c()
{
	echo -en "\nCtrl-c detected\nCleaning up and exiting.\n"
	exit_patcmp $CTLC_EXIT
}

# backup
#
# Will run the selected editor's diff on the patch pair previous to the
# one that's about to be examined. Sequential calls to this routine will
# backup to the patch prvious to the one just examined.
#
# $1 - current index
# $2 - flag indicates the last patch pair was viewed by calling backup
# $3 - returns the correct back_one index
#
backup() {
	local curidx=$1
	local back=$2
	local idx=$curidx

	let idx--

	$back && let idx--

	(($idx <= 0)) && idx=0

	eval $3=$idx
}

# backup_wrapper - wraps the backup routine with globals
#
# Just want to keep the global crap isolated from the backup routine
#
# globals
#	b_backup - set when the previous patch pair was examined after
#	           a call to backup.
#	index	-  the current index
#	mmindex -  the current mismatch index, if we are in mismatch mode
#
backup_wrapper() {
	echo "backup_wrapper: index: $index patnum: $patnum"

	if $b_runmismatch; then
		backup $mmindex $b_backup mmindex
		index=${mismatch_array[$mmindex]}
	else
		backup $index $b_backup index
	fi
}

# get_patch_number
#
# globals:
# 	index
#	mmindex
#	b_runmismatch
#
get_patch_number() {
	local retval
	local patnum
	local stat
	local saved_mmindex=$mmindex
	local saved_index=$index
	local b_limitvio=false
	local minstr="$MNU < ${STA}1$INF, setting patch number to$STA 1$OFF\n"
	local maxstr="$MNU > $STA$mlcount$INF, setting patch number to $STA$mlcount$OFF\n"

	echo -e "$INF""Type $qstr$INF to quit and pick up where you left off $OFF"

	while :; do
		getuser "Patch number: " patnum
		[ "$patnum" == "q" ] && break

		if ! [[ $patnum =~ ^-?[0-9]+$ ]]; then
			echo -e "$STA$patnum ${WRN}is not a valid number.$OFF"
			continue
		fi

		if [ $patnum -lt 1 ]; then
			echo -e "\n$BLD$patnum$minstr"
			patnum=1
		fi

		if [ $patnum -gt $mlcount ]; then
			echo -e "\n$STA$patnum$maxstr"
			patnum=$mlcount
		fi

		index=$((patnum - 1))
		echo "index: $index patnum: $patnum"
		break
	done
}

# replace_commit
#
# globals
#	b_backup  - set when the previous patch pair was examined after
#	            a call to backup.
#	index	  - the current index
#	previndex - index of the most recently viewed patch pair.
#	uscommits - passed as parameter 4 from caller
#
replace_commit() {
	local patnum
	local commit
	local patcnt
	local pfx
	local stat

	b_backup=false

	# Only run backup if we're not at the limits of the index range.
	# If we're at the last patch (maxindex), then don't backup, because
	# the index did not get incremented, since we are at the highest
	# possible value already.
	# The previndex variable is used for replacing the penultimate patch.
	# The problem is that the index advances to the maxindex after viewing
	# the penultimate patch. If we test for index, then we will replace
	# the ultimate patch, not the penultimate. The previndex variable
	# tracks the most recently viewed, so we know we can backup to that
	# if it was not the ultimate patch in the set.
	#
	([ $index -gt 0 ] && [ $previndex -lt $maxindex ]) && backup_wrapper

	patnum=$((index + 1))
	# echo "index: $index patnum: $patnum"

	pfx=$(printf "%04d" $patnum)

	[ -f "$uscommits" ] || \
		ui_getfilespec "File containing the upstream commits: " uscommits

	echo "removing: index: $index patch: ${usfiles[$index]}"
	rm -vf ${usfiles[$index]}
	getuser "New commit ID: " commit
	echo "replacing patch: $patnum with commit: $commit"
	ui_replaceline $patnum "$commit $patnum/$patcnt" "$uscommits"
	git format-patch --no-renames -1 -k --start-number $patnum $commit -o $usdir
	stat=$?
	# echo $stat

	# If we could not format the patch, then create an empty
	# patch with the bad commit id in it.
	#
	[ $stat -ne 0 ] && echo -e "\ninvalid commit: $commit\n" > $usdir/$pfx-inv.patch

	usfiles[$index]=$(ls $usdir/$pfx-*.patch)
}

say_nomismatch() {
	echo -e "$INF *********************************************"
	echo -e     " *                                           *"
	echo -e " *    $STA There are no conflicting patches $INF     *"
	echo -e " *                                           *"
	echo -e " ********************************************* $OFF"
}

# init_mismatch()
#
# Globals:
# 	mismatch_array
# 	mismatch_count
# 	first_mismatch
# 	last_mismatch
# 	mmindex
#	index
#
init_mismatch() {
	local line	# loop var gets each line in the mismatch_file
	local verbosity	# level of verbosity in the mismatch_file
	local seqno	# sequence number of patch

	mmindex=0

	# Determine the verbose level of the mismatch_file
	#
	line=$(ui_readline 1 $mismatch_file)
	verbosity=$(echo $line | cut -d':' -f2)

	# create the array of mismatched patched file indexes. The index is
	# 0-based, while the patch sequence number is 1-basd, so subtract 1
	# from each sequence number to get the index into the mlfiles and
	# usfiles arrays.
	#
	while read line; do
		[ "${line:0:6}" == "PATCH:" ] || continue
		(($verbosity > 0)) && { [[ "$line" == *"!="* ]] || continue; }

		seqno=$(echo "$line" | cut -d':' -f2)
		mismatch_array[$mmindex]=$((seqno - 1))

		mismatch_numbers=$(echo "$mismatch_numbers"; echo $seqno)
		let mmindex++
	done < $mismatch_file

	if [ ${#mismatch_array[@]} -gt 0 ]; then
		echo -e "${MNU}Patches conflicting with upstream commits$INF"
		echo -e       "=========================================$OFF"
		for seqno in ${mismatch_array[@]}; do
			echo -e "$MNU$((seqno + 1)): $STA${mlfiles[seqno]}$OFF"
		done
	fi

	mismatch_count=$mmindex

	if [ $mismatch_count -gt 0 ]; then
		echo -e "\n${INF}Total number of conflicts with upstream:"\
			"$STA$mismatch_count$OFF"
		last_mismatch=${mismatch_array[$((mmindex-1))]}
		first_mismatch=${mismatch_array[0]}
		index=$first_mismatch
		# echo "mismatch_count; $mismatch_count max mmindex: $((mmindex-1))"
		b_nomismatch=false
		b_runmismatch=true
	else
		b_nomismatch=true
		b_runmismatch=false
		mismatch_numbers=
		say_nomismatch
	fi
	mmindex=0
}

getlasttag() {

	echo -en "${INF}Getting last git tag..$OFF"
	git describe --tags --abbrev=0 > /dev/shm/lasttag &

	while true; do
		echo -n "."
		[ -f /dev/shm/lasttag ] && break
		sleep 1
	done

	echo
	b_rmlasttag=true
}

vim_cmd() {
	vimdiff "$1" "$2"
}

emacs_cmd() {
	emacs --eval "(ediff-files \"$1\" \"$2\")" -geometry 160x40
}

tkdiff_cmd() {
	tkdiff "$1" "$2"
}

# get_color - if terminal_background is set, color is on.
#
# Globals
# 	terminal_background - defined in lib/ui.source
# 	b_color - defined in lib/ui.source
#
get_color() {
	local tb=$1

	( [ -z "$tb" ] || [ $tb -eq 0 ] ) && return 1

	terminal_background=$tb
	b_color=true
	ui_set_colors
	return 0
}

#############################################
# Initialization
############################################

# Trap for control-c
#
trap control_c SIGINT

while getopts z:m:b:h OPTION; do
    case "$OPTION" in

	z ) zstr="$OPTARG"
	    b_zstr=true
	    optcount=$((optcount+2))
	    ;;
	m ) mismatch_file="$OPTARG"
	    b_runmismatch=true
	    optcount=$((optcount+2))
	    ;;
	t ) lasttagfile="$OPTARG"
	    optcount=$((optcount+2))
	    ;;
	b ) [ -n "$OPTARG" ] && get_color $OPTARG
	    optcount=$((optcount+2))
	    ;;
	h ) usage
	    ;;
	* ) echo "unrecognized option"
	    echo -e "$usagestr"
	    exit 127
    esac
done

# Herald
#
echo -e "\n${MNU}patcmp $STA$version$INF - Interactively compare submitted patches with upstream$OFF"
# echo -e "\tType '$BLD\0h$OFF' for help\n"

# Shift past the options and see if we still have the right number of
# arguments.
#
shift $optcount
[ $# -eq 4 ] || usage $code_parmcount_err

# Get the input arguments
#
mldir=$1
usdir=$2
editor=$3
uscommits=$4

patlist=$(ls -1 "$1"/*.patch | sort -V)
uscount=$(ls -1 "$usdir"/*.patch | wc -l)

create_patchlist "$patlist" valpatchlist
mlcount=$( wc -w <<< "$valpatchlist")
maxindex=$((mlcount - 1))

# It is not really required that the two directories have the same number
# of files, because we will simply stop processing when we run out of files
# in one directory or the other. However, it could lead to confusion, since
# we are comparing a patch set. Both directories containing the patch set
# must therefore have the same number of patch files.
#
if ((mlcount != uscount)); then
	echo
	echo -e "${WRN}The two directories must have the same number of files.$OFF"
	echo -e "\t$STA$usdir$INF has $STA$uscount$INF entries.\n"
	echo -e "\t$STA$mldir$INF has $STA$mlcount$INF entries.\n"
	echo -e "$INFExiting ...$OFF"
	echo
	exit $code_filecount_neq
fi

case "$editor" in
    "vimdiff" )	editcmd=vim_cmd
		;;
    "emacs"   )	editcmd=emacs_cmd
		;;
    "tkdiff"  )	editcmd=tkdiff_cmd
		;;
    *         )	echo -e "$STA$editor$WRN is not a supported editor.$OFF"
		exit_patcmp 1
		;;
esac

echo
echo -e "${INF}Patches in $STA$mldir$IINF will be compared with patches in$STA $usdir$OFF"
echo -e "${INF}Editor of choice is$STA $editor$OFF"

echo -e "\n${INF}Building the index of patch files$OFF"
echo -e   "${INF}=================================$OFF"
mlfiles=($valpatchlist)
for ((i = 0; i < ${#mlfiles[@]}; ++i)) ; do
	echo "${mlfiles[$i]}"
done

echo -e "\n${INF}Building the index of upstream commits$OFF"
echo -e   "${INF}======================================$OFF"
index=0
usfiles=($(ls "$usdir"/*.patch  | sort -V))
for ((i = 0; i < ${#usfiles[@]}; ++i)) ; do
	echo "${usfiles[$index]}"
	let index++
done
echo

# PS4='+(${BASH_SOURCE}:${LINENO}): '
# set -x

[ -f "$mismatch_file" ] && init_mismatch || b_runmismatch=false
$b_runmismatch && index=$first_mismatch || index=0
# echo "Starting with patch: $((index + 1))"

# If the lasttag file does not exist, then go create it with a
# call to getlasttag().
#
[ -f /dev/shm/lasttag ] && b_rmlasttag=true || getlasttag
lasttag=$(cat /dev/shm/lasttag)

previndex=0

#############################################
# Main program Loop
############################################

while :; do

	if [ $index -lt 0 ] || [ $index -gt $maxindex ]; then
		echo -e "${INF}There is no patch number:$STA $((index + 1))$OFF."
		if $b_runmismatch; then
			mmindex=0
			index=${mismatch_array[$mmindex]}
		else
			index=0
		fi
		echo -e "${INF}Starting with patch number:$STA $((index + 1))$OFF\n"
	fi

	if [ $index -ge $maxindex ]; then
		echo -e "\n$INF     ******"
		printf "Patch$STA %04d$INF is the last patch in the set.\n" \
			$((maxindex + 1))
		echo -e   "     ******$OFF"
	fi

	if $b_runmismatch && [ $index -eq $last_mismatch ]; then
		echo -e "\n$INF     ******"
		printf "Patch$STA %04d${INF} is the last$WRN conflict$INF in the set.\n" \
			$((last_mismatch + 1))
		echo -e   "     ******$OFF"
	fi

	if ($b_runmismatch && [ $index -gt 0 ] && [ $index -lt $maxindex ]); then
		ui_inarray $index mismatch_array[@]
		[ $? -eq 0 ] && index=${mismatch_array[$mmindex]} \
			     || index=${mismatch_array[0]}
	fi

	echo -e "\n${MNU}Interactively Compare patches with upstream commits"
	echo -e   "${INF}-----------------------------------------------------------------"
	echo -en "$OFF"
	echo -e "$INF Compare :$STA $mldir/$(basename ${mlfiles[$index]})"
	echo -e "$INF    With :$STA $usdir/$(basename ${usfiles[$index]})$OFF"
	if ! $b_nomismatch; then
	echo -e "${WRN}Conflict :$STA $((mmindex+1)) ${WRN}of$STA $mismatch_count$OFF"
	fi
	echo

	echo -en "$MNU"
	echo -e  "\t    Last Tag :$STA $lasttag$MNU"
	echo -e  "\t    RHEL dir :$STA $mldir$MNU"
	echo -e  "\tUpstream dir :$STA $usdir$INF"
	echo -e "-----------------------------------------------------------------"
	echo -e  "\t${MNU}c$OFF - run batch file comparison to find conflicts with upstream$OFF"

	if ! $b_nomismatch; then
	echo -e  "\t${MNU}m$OFF - only examine patches conflicting with upstream:$STA $b_runmismatch"
	echo -e  "\t${MNU}s$OFF - show contents of conflicts log"
	fi

	echo -e  "\t${MNU}b$OFF - back to the previous patch"
	echo -e  "\t${MNU}n$OFF - prompt for a number for a specific patch"
	echo -e	 "\t${MNU}p$OFF - replace current upstream patch with a different commit"
	echo -e  "\t${MNU}x$OFF - spawns a secondary shell"
	echo -e  "\t${MNU}q$OFF - quit and return to previous execution environment"
	$b_zstr && echo -e  "\t${MNU}z$OFF - "$zstr""
	echo -en "\n\t${INF}or any other key moves forward to the next patch ... "$OFF""
	read -n1 answer
	echo

	case $answer in
		q )	break
			;;
		b )	echo
			backup_wrapper
			b_backup=true
			;;
		n )	get_patch_number
			b_selected=true
			;;
		p )	replace_commit
			;;
		x )	ui_sh_spawn
			echo
			continue
			;;
		z )	$b_zstr && exit $code_special_action
			;;

		m )	# Unless a mismatch file exists, this option is meaningless.
			#
			if ! $b_nomismatch; then
				ui_toggle b_runmismatch
				if $b_runmismatch; then
					mmindex=0
					index=${mismatch_array[0]}
				fi
				echo
				continue
			fi
			;;

		s )	# Only works when there is a mismatch file
			#
			if ! $b_nomismatch; then
				less $mismatch_file
				echo
				read -n1 -p "Press any key to continue... "
				echo
				continue;
			fi
			;;

		c )	patbatcmpmgr -R $mldir -U $usdir -o $usdir/mm.log
			mismatch_file=$usdir/mm.log
			b_runmismatch=true
			init_mismatch
			echo
			continue
			;;

		* )	b_backup=false
			;;
	esac

	$editcmd "${mlfiles[$index]}" "${usfiles[$index]}"

	previndex=$index

	if $b_runmismatch; then

		# If the user selected a specific patch, then find the next
		# highest patch number in the mismatch_array.
		# Else if the mmindex is less than the number of elements
		# in the array, simply increment the mmindex.
		# Else the mmindex is already at its max value.
		#
		if $b_selected; then
			ui_nextinarray $index mismatch_array[@] mmindex
			b_selected=false
		else
			ui_inarray $index mismatch_array[@] mmindex
			stat=$?

			([ $stat -eq 0 ] && [ $mmindex -lt $((mismatch_count - 1)) ]) &&
				let mmindex++
		fi

		# Set the index into the commit log files to the element
		# indexed by mmindex in the mismatch_array
		#
		index=${mismatch_array[$mmindex]}
		# echo "Forward mmindex: $mmindex index: $index"
	else
		[ $index -lt $maxindex ] && let index++
		# echo "Forward index: $index maxindex: $maxindex"
	fi

	echo
done
echo
exit $code_ok
