#!/bin/bash

#####################################################################
#
# createoptions v2.0
#
# Appends the lines required to implement parsing an options list in
# a bash script.
#
# $1 - file to append the lines to
# $2 - string containing list of space separated option flags with their
#	corresponding arguments.
#
# usage creatoptions file "opt opt opt:arg opt"
#####################################################################

source lib/ui.source
source lib/formatargs

usagestr=$(
cat <<EOF

$(basename "$0") -o "opt opt opt:arg" [-a "arg1 arg2 ... argn"] script

Appends the lines required to implement parsing an options list to a
bash script.

  -o - options REQUIRED
       A string containing a list of space separated option flags and
       optional corresponding arguments.

  -a - arguments OPTIONAL
       A script may have arguments after the hyphenated options and
       any arguments to which they may be bound.

  script - REQUIRED
           The filename of the script into which these options will
	   be written.
Example:
	createoptions -o "n:num f:fil d:dir x h" -a "arg1 arg2" scriptfile

	Creates options for -n num, -f file, -d dir. These will be
	declared in myscript.sh

	The -x and -h options have no optargs, presumably to invoke a
	function or set a boolean.

	A usage string will be created that lists the opts and their
	optargs. Additionally, arg1 and arg2 are appended to the usage
	string.

	The opts:optargs and their corresponding case statement are
	appended to the end of myscript.sh.

script	- the script file to receive the options
\0
EOF
)

usage() {
	echo -e "$usagestr"
	exit $1
}

echo "arg line: $@"

# Declarations are unnecessary, but they are helpful
#
declare b_opts		# options belonging to THIS script
declare b_args=false	# arguments belonging to THIS script
declare -i index=0
declare -i optcount=0	# counts opts for THIS script
declare -i optnum=0	# the number of options passed to the created script
declare -i argcount=0	# counts any args to pass to the created script
declare -i width=0	# width of an opt or arg
declare -i widest=0	# width of widest opt or arg
declare -a optflgarray	# array containing the actual hyphenated options
declare -a opgargarray	# the arguments to which the options are bound
declare -a argstr	# the additional args to pass to the created script
declare -a optstr	# the string of options to pass to the created script
declare file
declare b_lineargs
declare spacer="  "

while getopts ho:a: OPTION; do
    case "$OPTION" in

	o ) optstr=$OPTARG
	    b_opts=true
	    optcount=$((optcount+2))
	    echo -e "opts: $optstr"
	    ;;
	a ) argstr=$OPTARG
	    b_args=true
	    optcount=$((optcount+2))
	    echo -e "args:""$argstr"
	    ;;
	h ) usage
	    ;;
	* ) echo "unrecognized option"
	    usage 127
	    ;;
    esac
done

shift $optcount
[ $# -eq 1 ] || usage
file=$1

optflg=""
optarg=""

[ "$optstr" ] || optstr="h"

# Create an array of options flags and arguments for those options
# flags. For example, a command line like this:
#
# 	createoptions optfile "a b c d:directory f:file e g"
#
# will create arrays like this:
#
#	optflg = a  optarg = 
#	optflg = b  optarg = 
#	optflg = c  optarg = 
#	optflg = d: optarg = directory
#	optflg = f: optarg = file
#	optflg = e  optarg = 
#	optflg = g  optarg = 
#
index=0
widest=0				# example opt:arg is d:dir
for opt in $optstr; do			# d:dir
	optarg=${opt:2}			#   dir
	optflg=${opt:0:2}		# d:
	optflgarray[index]=$optflg
	optargarray[index]=$optarg
	let index++

	# get the width of the widest OPTARG
	#
	width=${#optarg}
	[ $width -gt $widest ] && widest=$width
done
optnum=$index

# Now that we've created the options flags and args arrays, lets start
# writing stuff into the file.
#
echo -en '
declare -i optcount=0

declare usagestr=$(
cat <<EOF

$(basename $0) [options]' >> $file

$b_args && formatargs $file "${argstr[@]}" argcount

printf "\nOptions:\n" "$spacer" >> $file

index=0
while [ $index -lt $optnum ]; do
	optflg=${optflgarray[$index]}
	optflg=${optflg:0:1}
	printf "%s-%-2s" "$spacer" "$optflg" >> $file

	# The following line puts the optional argument in a fixed
	# width field determined by widest in the previous loop.
	#
	printf "%-${widest}s - " ${optargarray[$index]}  >> $file
	[ "$optflg" == "h" ] && echo "help" >> $file || echo >> $file
	echo "optflg = ${optflgarray[$index]} optarg = ${optargarray[$index]}"
	let index++
done

echo -n '\0
EOF
)

usage() {
	echo -en "$usagestr"
	exitme 0
}
' >> $file

# Create the internal options string before writing it out to the file.
# We will re-use the "optstr" variable that was set to an input arg
# at the beginning.
#
index=0
optstr=""
tmpstr=""
while [ $index -lt $optnum ]; do
	optstr="$optstr${optflgarray[$index]}"
	let index++
done
echo $optstr

echo -en '

main() {
        # Trap for control-c
        trap control_c SIGINT

	while getopts '"$optstr"' OPTION; do
    	    case "$OPTION" in
' >> $file

index=0

while [ $index -lt $optnum ]; do
	optflg=${optflgarray[$index]}
	optflg=${optflg:0:1}
	optarg=${optargarray[$index]}
	echo -en "\t\t$optflg ) " >> $file

	[[ $optarg ]] && echo -en "$optarg=\$OPTARG\n\t\t    " >> $file
	[ "$optflg" == "h" ] && echo -e "usage" >> $file
	echo -e '\t\t((++optcount))' >> $file

	echo -en "\t\t    ;;\n" >> $file
	let index++
done

echo -en "\t\t* ) " >> $file
echo -en "echo \"unrecognized option -\$OPTION\"\n" >> $file
echo -en "\t\t    echo -e \"\$usagestr\"\n" >> $file
echo -en "\t\t    exit 127\n" >> $file
echo -e  "\t    esac" >> $file
echo -e  "\tdone\n" >> $file
echo -e  '\tshift $optcount' >> $file
echo -e  "\t[ \$# -eq $argcount ] || exitme \$EXIT_INVARG\n" >> $file
echo -en '
	exitme $EXIT_OK
}

main $@

exitme $EXIT_OK

' >> $file
