#!/bin/bash
#
# prep-usb-backport
#
# NOTE:
# Requires the use of scripts gitnice and extup to create the file
# inputs for this script.

# GIT LOG COMMAND
# ===============
# This is the git log command to extract the upstream comimts
declare gitlogcmd="git log --oneline --reverse --no-abbrev-commit --no-merges"

# SUBSYTEM EXPRESSION
# ===================

# These are the directories that will be searched by the gitlogcmd. The
# string is declared withouth backslashes on every line, so it must be
# used without surrounding quotes. Surrounding quotes would preserve the
# embedded linefeeds and confound the git log command.

declare subsys="\
drivers/usb
tools/usb
tools/include/uapi/linux/*usb*
include/linux/*usb*
include/uapi/linux/*usb*
Documentation/driver-api/usb
Documentation/devicetree/bindings/usb/
include/dt-bindings/usb
drivers/net/usb
drivers/net/can/usb
drivers/media/usb
include/uapi/linux/videodev2.h
include/media/*usb*"

declare -i optcount=0
declare uplog="upstream.log"
declare duplog="upstream-dups.log"
declare outdir=
declare upcmt=
declare updir=

declare MYDIR=
MYDIR="$(dirname "$(readlink -f "$0")")"
declare MYLIB="$MYDIR"/lib

source "$MYLIB"/ui.source

# Other exit codes
declare -i EXIT_OK=0
declare -i EXIT_INVARG=1
declare -i EXIT_INVFIL=2
declare -i EXIT_INVDIR=3
declare -i EXIT_NODIR=4
declare -i EXIT_DIRNOTEXIST=5
declare -i EXIT_UPCMT=6
declare -i EXIT_UPDIR=7

declare -a exitmsgary=(
""
"Invalid number of options."
" is an invalid filename."
" is an invalid directory name."
"You must provide a directory for output."
" directory does not exist."
"You must provide an upstream commit expression with the -uc option."
"You must provide a valid upstream repo directory with the -ud option."
)

declare usagestr=

usagestr=$(
cat <<EOF

$(basename "$0") -uc upcmt -ub updir outdir
  Creates a file of usb commits for backporting.

Argument:
  outdir    - The directory in which the log files are created

Options:
  -h          - this help text
  -uc upcmt   - Upstream commit expression, e.g. 'v5.6..v5.7'. Creates
                $uplog file in the outdir.
  -ud updir   - Directory containing the uptream repo.

Example:
  $(basename "$0") \\\

        -uc 'v5.7..v5.8' \\\

	-ud upstream/repo/directory \\\

        backport/work/directory

\0
EOF
)

usage() {
	echo -en "$usagestr"
	exitme 0
}

exitme() {
	local exitval=$1
	local strarg=""
	local exitmsg

	if ((exitval != EXIT_OK)) && ((exitval != CTLC_EXIT)); then
		(($# == 2)) && strarg=$2

		((${#exitmsgary[@]} > exitval)) \
			&& exitmsg="${exitmsgary[$exitval]}"

		echo -e "$BLD$strarg$exitmsg$OFF"

		((exitval != 0)) && echo -e \
			"Type$BLD $(basename "$0") -h$OFF for help."
	fi

	exit "$exitval"
}

# run if user hits control-c
#
control_c()
{
	echo -en "
Ctrl-c detected
Cleaning up and exiting.
"
	exitme $CTLC_EXIT
}

# parseops() - parse the input options
#
# Needed multicharacter optionis, but didn't want to use longopts.
#
# Inputs: $@, the whole command line
#
# Globals:
# 	optcount
# 	upcmt
# 	updir
# 	usagestr
#
parseops() {
	local arg=
	local opt=

	for arg in "$@"; do
	    if [ "${arg:0:1}" == '-' ]; then
		opt="${arg:1}"
		case "$opt" in
		    h  ) usage
			 ((++optcount))
		         ;;
		    uc ) shift
			 upcmt="$1"
			 shift
		         ((optcount += 2))
		         ;;
		    ud ) shift
			 updir="$1"
			 shift
		         ((optcount += 2))
		         ;;
		    *  ) echo "unrecognized option -$1"
		         echo -e "$usagestr"
		         exit 127
		esac
	    fi
	done
}

# test_opts - test the correct options were submitted
#
# Two of the opts must point to legitimate git repos.
# The other two must be valid commit expressions.
#
test_opts() {
	[ -n "$upcmt" ] || exitme $EXIT_UPCMT
	[ -d "$updir" ] || exitme $EXIT_UPDIR
	[ -d "$updir"/.git ] || exitme $EXIT_UPDIR
}

# rewrite_log - check if user wants to rewrite existing logs
#
# $1 - path to log
# $2 - boolean return
#
rewrite_log() {
	local logpath="$1"
	local rewrite=true

	[ -f "$logpath" ] && {
		echo -e "$BLD$outdir/$uplog$OFF exists."
		getyn "Do you want to re-create it?" rewrite
		echo
	}
	eval "$2"="$rewrite"
}

# mark_dups() - look for duplicate commits in the upstream
#
# GLOBALS
#   outdir - directory containing the log files
#   uplog  - the upstream log file
#
mark_dups() {
	local savedIFS="$IFS"
	local idxA
	local idxB
	local lineA
	local lineB
	local lineAsum
	local lineBsum
	local lincnt
	local cmtary=()
	local duplinenum
	local dupary=()
	local duparysiz
	local b_print
	local printary=()

	lincnt=$(wc -l < "$outdir/$uplog")

	: > "$outdir/$duplog"

	IFS=$'\n'	# the $ says keep going until you find a newline
	shopt -s nocasematch
	shopt -s extglob
	mapfile -t cmtary < "$outdir/$uplog"

	for ((idxA = 0; idxA < lincnt; ++idxA)); do

		lineA="${cmtary[$idxA]}"

		# If it's already been marked as a dup, skip it.
		[ "${lineA:0:1}" == "#" ] && continue

		lineAsum="$(echo "$lineA" | cut -d' ' -f2-)"
		echo "seeking dup of: $lineAsum"
		mapfile -t dupary < <(grep -n "$lineAsum" "$outdir/$uplog")
		duparysiz=${#dupary[@]}

		if ((duparysiz > 1)); then

			b_print=false
			printary=()

			for ((idxB = 1; idxB < duparysiz; ++idxB)); do
				duplinenum=$(echo "${dupary[$idxB]}" | cut -d':' -f1)
				lineB=$(echo "${dupary[$idxB]}" | cut -d':' -f2-)

				# If this has already been marked as a dup,
				# then skip it.
				[ "${lineB:0:1}" == "#" ] && continue

				# If the lines are identical, including the
				# hashes, then it's a false positive.
				[ "$lineB" == "$lineA" ] && continue

				# grep can find a match, but it may not be a
				# PERFECT match. We need to test for that.
				lineBsum="$(echo "$lineB" | cut -d' ' -f2-)"
				[ "$lineBsum" == "$lineAsum" ] || continue

				b_print=true
				printary+=("${dupary[$idxB]}")

				# Since we are using ? as a sed delimiter,
				# replace any ? in the line with _
				lineB="$(echo "$lineB" | tr '?' '_')"
				sed -i "${duplinenum}s?.*?# ${lineB}?" "$outdir/$uplog"

				# Refresh the array with the new information.
				mapfile -t cmtary < "$outdir/$uplog"
			done

			if $b_print; then
				printary=("${dupary[0]}" "${printary[@]}")
				for ((idxB = 0; idxB < duparysiz; ++idxB)); do
					echo "${printary[$idxB]}" | tee -a "$outdir/$duplog"
					b_print=false
				done
				[ -n "${printary[1]}" ] && echo | tee -a "$outdir/$duplog"
			fi
		fi
	done

	shopt -u nocasematch
	shopt -u extglob
	IFS="$savedIFS"
	return 0
}

# create_log() - create the git log
#
# GLOBALS
#   outdir    - directory for log files
#   gitlogcmd - the command used to extract the logs
#   subsys    - the string containing all the directories to be scanned
#
# ARGUMENTS
#   $1 commit expression
#   $2 directory of repo to log
#   $3 name of log file
#
create_log() {
	local cmtexp="$1"
	local repod="$2"
	local lognam="$3"
	local mypid=

	ui_cd "$repod"
	$gitlogcmd "$cmtexp" "$subsys" > "$outdir/$lognam" & mypid=$!
	ui_waitonproc_tty $mypid .05 "Please wait while we create $outdir/$lognam"
	ui_cd -
}

main() {
	local b_uplog=true

        # Trap for control-c
        trap control_c SIGINT

	parseops "$@"
	((optcount < 4)) && exitme $EXIT_INVARG
	test_opts

	shift "$optcount"
	outdir="$1"

	[ -n "$outdir" ] || exitme $EXIT_NODIR
	ui_testdir "$outdir" outdir
	echo

	outdir="$(realpath "$outdir")"
	updir="$(realpath "$updir")"

	# rewrite_log "$outdir/$uplog" b_uplog

	printf "Upstr Repo: $BLD%-12s$OFF Upstr Commits: $BLD%-12s$OFF\n" "$updir" "$upcmt"
	ui_press_any_ctlc

	$b_uplog && create_log "$upcmt" "$updir" "$uplog"

	# Mark upstream commits that are duplicates with a leading hash
	mark_dups

	exitme $EXIT_OK
}

main "$@"

exitme $EXIT_OK

