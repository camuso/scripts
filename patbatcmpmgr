#!/bin/bash
#
# patbatcmpmgr
#

declare version="v3.0"

# run if user hits control-c
#
control_c()
{
	echo -en "\nCtrl-c detected\nCleaning up and exiting.\n"
	[ -e /dev/shm/lasttag ] && rm -f /dev/shm/lasttag
	exit 130
}

# Trap for control-c
#
trap control_c SIGINT

# Enable extglob for more specific directory actions
#
shopt -s extglob

declare MYDIR=
MYDIR="$(dirname "$(which "$(basename "$0")")")"
declare MYLIB="$MYDIR"/lib
declare MYDATA="./.data"

#######################################
# External Source Files
#######################################
source "$MYLIB"/ui.source
source "$MYLIB"/config-manager.source

#######################################
# Global variables
#######################################

declare version="11.0"

declare b_nopaths=true
declare b_strict=true
declare b_exec_exit=false

declare -i verbosemode
declare -i vmode_off=0
declare -i vmode_on=1
declare -i vmode_very=2

declare valpatchlist=
declare b_valpatchlist=false

declare rhdir		# directory containing RHEL patch files
declare usdir		# directory containing upstream patch files
declare ofile		# output file, default is /dev/stdout
declare pfile=		# passed output file takes precedence over the
			# : output file stored in the project file
declare -i rhfcount=0
declare -i usfcount=0
declare -i background=

declare lasttag=
declare rmlasttag=false

declare rhdirstr="RHEL patches"
declare usdirstr="Upstream patches"
declare herald=
herald=
declare usagestr=
usagestr=$(
cat <<EOF

$(basename "$0") [-h [-R | -P]  -U -X -o <file>]

  Version $version

  Performs a batch comparison of the patches in two different directories.
  Comparison for any given pair of files stops at the first mismatched
  line.

  Commit logs and diffstats are not included in the line-by-line comparisons.
  Line-by-line comparisons start at the first instance of 'diff --git'.

  All files are compared up to the first detected mismatched line.

  A report is generated to the screen and optionally to a user-defined
  output file.

  -h        - Uses the less command to print this help text
  -R rhdir  - optional directory containing the RHEL patches
  -U usdir  - optional directory containing the Upstream patches
  -P list   - Use a valid patch list instead of the RHEL patchfile directory.
              This is to circumvent counting/comparing the prologue file.
  -o ofile  - optional conflicts file. Default is /dev/stdout
  -X        - execute saved options and exit without presenting the menu
  -b background color  - 1 for light background, 2 for dark background

  The rhdir (or valid patch list) and usdir must have the same number of
  patch files.

  Each patchfile in the rhdir or valid patchlist is compared with its
  complement in the usdir. If a mismatched line is found, the sequence number
  of that patch pair is printed to the ofile, which is /dev/stdout by default.

  Verbose output options are available

  Menu choices
  ------------

  All menu items are sticky, persisting across invocations of this script.
  You can use the verbose options to test the results.

  R - Change the directory containing the RHEL patch files
  U - Change the directory containing the Upstream patch files

      IF these directories were not passed as option arguments (-R and -U),
      AND this the first invocation of this script,
      OR either of these directories does not exist,
      THEN you will be prompted for the missing directory or directories
      before being presented with the menu.

  o - Change the conflicts file.
      Default: /dev/stdout

  p - When true, excludes path lines from the comparison
      You will want to do this if the file being patched has been renamed
      or moved to a different directory.
      Default: true

  s - When true, excludes lines that do not begin with + or -
      You will want to do this if you are only concerned about the lines
      that are actually being changed by the patch. When true, this will
      automatically exclude the diff stat lines, but WILL NOT exclude
      the path lines.
      Default: true

  v - Cycles through the verbose modes, which is the amount of information
      printed to the output file.

      OFF: Only the incongruent patch numbers are printed

      Verbose:  All patch numbers are printed with a line that tells whether
                they were congruent.

      Very Verbose: All patch numbers are printed as well as the lines that
                    are congruent. Printing of a given patch pair stops at
                    the first mismatched line in the files.

  b - choose light or dark background
  r - run the comparison
  e - less the conflicts file. Only visible if the output is not /dev/stdout
  i - init controls and output file to defaults
  h - less this help text
  q - quit and return to previous execution environment
\0
EOF
)

########################################
# Function Return Codes
########################################
declare rc_continue=0	# Continue for another pass
declare rc_run=1	# Run comparison

#######################################
# Functions
#######################################

exitme() {
	cfg_update_configfile
	exit 0
}

usage() {
	$b_exec_exit || echo -e "$usagestr"
	exit "$1"
}

init_booleans() {
	cfg_set_item "b_nodiffst" true
	cfg_set_item "b_nopaths" true
	cfg_set_item "b_strict" true
}

show_verbosemode() {
	local _mode_=$1

	case $_mode_ in
		"$vmode_off"  ) echo "OFF";;
		"$vmode_on"   ) echo "Verbose";;
		"$vmode_very" ) echo "Very Verbose";;
	esac
}

show_read_ofile() {
	read_ofile_str=$(
cat <<EOF
$MNU
  e$INF  examine conflicts file (less $STA$ofile$OFF)
EOF
)
	[ "$ofile" != "/dev/stdout" ] && echo -e "$read_ofile_str"
}

show_dir() {
	local dir="$1"
	local count="$2"

	[ -n "$dir" ] && echo -e "$STA$dir$INF has $STA$count$INF patch files"
}

show_settings() {
	settingstr=$(
cat <<EOF
$MNU
     $UND\0Batch Comparison of RHEL Patches with Upstream - $STA$version$OFF$MNU

     $UND\0Environment       $OFF
$INF     Most Recent Tag            : $STA$lasttag$MNU
  R$INF  $rhdirstr directory     : $(show_dir "$rhdir" "$rhfcount")$MNU
  U$INF  $usdirstr directory : $(show_dir "$usdir" "$usfcount")$MNU
  o$INF  Output file.               : $STA$ofile$MNU

     $UND\0Lines to exclude  $OFF$MNU
  p$INF  file paths                 : $STA$b_nopaths$MNU
  s$INF  without leading + or -     : $STA$b_strict$MNU

     $UND\0Output Parameters $OFF$MNU
  v$INF  Verbose mode               : $STA$(show_verbosemode "$verbosemode")$MNU

     $UND\0Control           $OFF$MNU
  r$INF  run the comparison $STA$(show_read_ofile)$MNU
  i$INF  init to defaults$MNU
  h$INF  print the help (uses less command)$MNU
  b$INF  Set background color$MNU
  q$INF  quit and return to previous execution environment
$OFF
EOF
)
	echo -e "$settingstr"
}

set_dir() {
	local dtyp="$1"
	local itnam="$2"
	local -n dir="$2"

	ui_getnewdir "New $MNU$dtyp$INF directory:$OFF " dir

	cfg_set_item "$itnam" "$(realpath "$dir")"
}

list_patches() {
	local dir="$1"
	find "$dir" -maxdepth 1 -type f -name "*.patch"
}

menu_parser() {
	local setting

	[ -n "$rhdir" ] && rhfcount=$(list_patches "$rhdir" | wc -l)
	[ -n "$usdir" ] && usfcount=$(list_patches "$usdir" | wc -l)
	show_settings
	promptgetchar "${MNU}Enter one of the above: $OFF" setting

	case $setting in
		R )	set_dir "$rhdirstr" rhdir
			;;
		U )	set_dir "$usdirstr" usdir
			;;
		o )	getuser "Output file: " ofile
			cfg_set_item "ofile" "$ofile"
			;;
		p )	ui_toggle b_nopaths
			cfg_set_item "b_nopaths" "$b_nopaths"
			;;
		s )	ui_toggle b_strict
			cfg_set_item "b_strict" "$b_strict"
			;;
		v )	ui_cycle_state verbosemode 3
			cfg_set_item "verbosemode" "$verbosemode"
			;;
		r )	return $rc_run
			;;
		e )	[ "$ofile" != "/dev/stdout" ] && less "$ofile"
			;;
		i )	init_booleans
			verbosemode=$vmode_off
			cfg_set_item "verbosemode" $verbosemode
			;;
		b )	ui_use_colors
			cfg_set_item "background" "$terminal_background"
			;;
		h )	usage | less
			;;
		q )	exitme
			$rmlasttag && rm -f /dev/shm/lasttag
			exit 0
			;;
	esac
	return $rc_continue
}

getlasttag() {
	local _mypid_
	echo -n "Getting last git tag.."
	git describe --tags --abbrev=0 > /dev/shm/lasttag &
	_mypid_=$!
	ui_waitonproc $_mypid_ .1
	echo
	rmlasttag=true
}

exit_invdir() {

	exit 1
}

parse_opts() {
	[ -e /dev/shm/lasttag ] || getlasttag
	lasttag=$(cat /dev/shm/lasttag)

	# Parse the options, if any
	#
	while getopts hXR:U:o:P:b: OPTION; do
	    case "$OPTION" in

		h ) usage | less
		    ;;
	        R ) rhdir="$(realpath "$OPTARG")"
		    ;;
		P ) valpatchlist="$OPTARG"
		    b_valpatchlist=true
		    ;;
	        U ) usdir="$(realpath "$OPTARG")"
		    ;;
		o ) pfile=$OPTARG
		    ;;
		X ) b_exec_exit=true
		    ;;
		b ) background="$OPTION"
		    cfg_set_item "background" "$background"
		    ui_do_colors "$background"
		    ;;
		* ) echo "unrecognized option"
		    usage 127
	    esac
	done
}

###########################################
# Parameter Initialization
###########################################

init() {
	local bgtmp

	ui_setbg bgtmp

	cfg_start "$MYLIB"/patbatcmpmgr.conf "$MYDATA"/patbatcmpmgr.conf

	parse_opts "$@"

	[ -n "$background" ] || {
		ui_do_colors "$bgtmp"
		background="$bgtmp"
	}

	# If the caller passed a desired output file name (pfile), then use that
	# Else, if the ofile retrieved from the config file is an empty string,
	# use the default /dev/stdout
	#
	[ -n "$pfile" ] && ofile="$pfile"
	[ "$ofile" ] || ofile="/dev/stdout"

	cfg_update_configfile
}

##############################################
# Main Program Loop
##############################################

main() {
	init "$@"

	herald="\n${MNU}patbatcmpmgr $STA$version$INF - determines patch comparison parameters"

	$b_exec_exit || echo -e "$herald"

	while true; do
		declare optstr=""

		while ! $b_exec_exit; do
			menu_parser
			[ $? -eq $rc_run ] && break
		done

		$b_nopaths  && optstr="$optstr -p "
		$b_strict   && optstr="$optstr -s "

		case $verbosemode in
		    "$vmode_on"   ) optstr="$optstr -v ";;
		    "$vmode_very" ) optstr="$optstr -V ";;
		esac

		if $b_valpatchlist; then
			$b_exec_exit || \
			echo -e "${INF}patbatcmp $optstr -o $ofile -P (valid patch list) $usdir$OFF"
			patbatcmp -x $optstr -o "$ofile" -P "$valpatchlist" "$rhdir" "$usdir"
		else
			$b_exec_exit || \
			echo -e "${INF}patbatcmp $optstr -x -o $ofile $rhdir $usdir$OFF"
			patbatcmp $optstr -x -o "$ofile" "$rhdir" "$usdir"
		fi

		# Only one pass if all we want is to execute and exit.
		# See -X option.
		#
		if $b_exec_exit; then
			$rmlasttag && rm -f /dev/shm/lasttag
			exitme
		fi

		cfg_read_configfile
	done
	exitme
}

main "$@"

