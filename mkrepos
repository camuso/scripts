#!/bin/bash
#
# mkrepos

declare repolist=
declare b_spec=false
declare usagestr=$(
cat <<EOF

$(basename $0)

Description: Create the upstream and downstream kernel repo(s)
   Repos will be created in the /work directory, as follows.
   /work/upstream/kernel
   /work/7/kernel
   /work/8/kernel
   /work/9/kernel
   /work/c9s/kernel
   /work/c10s/kernel

Arguments:
  spec - literally the string "spec" to clone only the downstream kernel repo for the
         major version of this system.
	 For example...
		$ mkrepos spec
	...will only make the following repos on a system provisioned with centos-9.
	/work/upstream/kernel
	/work/c9s/kernel
EOF
)

declare distro=
declare majversion=

usage() {
	echo -e "$usagestr"
	exit 1
}


mkrepo() {
	local mr_distro="$1"
	local majver="$2"
	local reponam
	local repodir
	local repo

	if [ "$mr_distro" == "rhel" ]; then
		reponam="/rhel-$majver"
		repodir="/work/$majver"
		repo="git@gitlab.com:redhat/rhel/src/kernel/rhel-${majver}.git"
	else
		reponam="centos-stream-$majver"
		repodir="/work/c${majver}s"
		repo="git@gitlab.com:redhat/centos-stream/src/kernel/centos-stream-${majver}.git"
	fi

	[ -d "$repodir" ] || mkdir -p "$repodir"
	cd "$repodir" || { echo "cannot cd into $repodir!"; exit 1; }

	if [ -f kernel/.git/config ] ; then
		echo "$PWD/kernel repo $repodir/$reponam already exists."
		return
	else
		echo "Cloning $repo into $PWD/kernel..."
		git clone "$repo" kernel
		cd kernel || { echo "cannot cd into $PWD/$repodir!"; exit 1; }
		git fetch
		git pull
		git remote add tcamuso git@gitlab.com:tcamuso/rhel-7.git
		echo "$PWD" >> "$repolist"
	fi
}

create_upstream() {
	cd /work
	[ -d /work/upstream ] || mkdir -p /work/upstream
	cd /work/upstream
	[ -f kernel/.git/config ] || {
		git clone \
		git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git \
		kernel
		cd kernel
		git remote add gh-ipmi https://github.com/cminyard/linux-ipmi.git
		git remote add net-next \
			https://git.kernel.org/pub/scm/linux/kernel/git/netdev/net-next.git
		git remote add scsi \
			https://git.kernel.org/pub/scm/linux/kernel/git/jejb/scsi.git
		git remote add power \
			https://git.kernel.org/pub/scm/linux/kernel/git/powerpc/linux.git
		git remote add perf \
			https://git.kernel.org/pub/scm/linux/kernel/git/jolsa/perf.git
		git remote add linux-rt-devel \
			https://git.kernel.org/pub/scm/linux/kernel/git/rt/linux-rt-devel.git
		git remote add crypto \
			https://git.kernel.org/pub/scm/linux/kernel/git/herbert/cryptodev-2.6.git
		git remote add bluetooth \
			git://git.kernel.org/pub/scm/linux/kernel/git/bluetooth/bluetooth-next.git
		git fetch -p --all
		echo "/work/upstream/kernel" >> "$repolist"
	}
}

create_downstream() {
	mkrepo "rhel" "7"
	mkrepo "rhel" "8"
	mkrepo "rhel" "9"
	mkrepo "centos" "9"
	mkrepo "centos" "10"
}

get_distro() {
	[ -f /etc/os-release ] || { echo "/etc/os-release does not exist!"; exit 1; }
	foo=$(grep -w 'ID' /etc/os-release | cut -d"=" -f2)

	# Strip off the double quote marks
	#
	foo=${foo%\"}
	foo=${foo#\"}

	# distro is the lowercase of the ID we pulled out of /etc/os-release
	#
	distro=$(echo "$foo" | tr '[:upper:]' '[:lower:]')

	echo "Distro: $distro"

	if [[ "$distro" == "rhel" ]] || [[ "$distro" == "centos" ]]; then
		# Get the major version and strip off any leading double quotes
		#
		majversion=$(grep -w 'VERSION_ID' /etc/os-release | cut -d= -f2 | cut -d. -f1)
		majversion=${majversion#\"}
		majversion=${majversion%\"}

		echo "majversion: $majversion"
	elif [[ "$distro" != "fedora" ]]; then
		echo "$distro is not a distro supported by this script."
		exit 1
	fi
}

main() {
        # The following line will single step through this script.
        # Use the # to comment it out.
        #trap 'read -p "$(printf "%$((${#BASH_SOURCE[0]}+8))s" "")" \
	#	line && eval "$line" || exit $?' DEBUG

	local pr_cfg_dir="$HOME/.config/patchreview"

	repolist="${pr_cfg_dir}/repolist"

	[ "$1" == "spec" ] && b_spec=true || b_spec=false

	[ -d /work ] || {
		echo "There is no /work directory."
		exit 1
	}

	cd /work

	[ -d "$pr_cfg_dir" ] || mkdir -p "$pr_cfg_dir"

	[ -f "$repolist" ] || > "$repolist"
: '
	[ -d /work/netperf ] || {
		git clone https://github.com/HewlettPackard/netperf.git
		cd netperf
		./autogen.sh
		./configure
		make
		make install
	}

	[ -d /work/progress ] || {
		git clone https://github.com/Xfennec/progress.git
		cd progress
		make
		make install
		cd -
	}
'
	if [ -f "$repolist" ]; then
		while read line; do
			echo "$line"
			[ -d "$line" ] || mkdir -p $line
		done < "$repolist"
	fi

	ssh-keyscan -H gitlab.com >> ~/.ssh/known_hosts

	get_distro
	create_upstream

	$b_spec && mkrepo "$distro" "$majversion" || create_downstream

	crontab << EOF
0 7 * * * date > /work/crontab-repotask; /home/tcamuso/bin/repotask >> /work/crontab-repotask
EOF
}

main $@

exit 0

