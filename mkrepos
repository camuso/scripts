#!/bin/bash
#
# mkrepos

declare usagestr=$(
cat <<EOF

$(basename $0) 

Description:

Arguments:

EOF
)

declare distro=
declare majversion=

usage() {
	echo -e "$usagestr"
	exit 1
}

create_upstream() {
	cd /work
	[ -f kernel/.git/config ] || {
		git clone \
		git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git \
		kernel
		cd kernel
		git remote add gh-ipmi https://github.com/cminyard/linux-ipmi.git
		git remote add net-next \
			https://git.kernel.org/pub/scm/linux/kernel/git/netdev/net-next.git
		git remote add scsi \
			https://git.kernel.org/pub/scm/linux/kernel/git/jejb/scsi.git
		git remote add power \
			https://git.kernel.org/pub/scm/linux/kernel/git/powerpc/linux.git
		git remote add perf \
			https://git.kernel.org/pub/scm/linux/kernel/git/jolsa/perf.git
		git remote add linux-rt-devel \
			https://git.kernel.org/pub/scm/linux/kernel/git/rt/linux-rt-devel.git
		git remote add crypto \
			https://git.kernel.org/pub/scm/linux/kernel/git/herbert/cryptodev-2.6.git
		git remote add bluetooth \
			git://git.kernel.org/pub/scm/linux/kernel/git/bluetooth/bluetooth-next.git
		git fetch -p --all
	}
}

create_downstream() {

	if [ "$distro" == "rhel" ]; then
		cd /work
		mkdir $majversion
		cd $majversion
		[ -f kernel/.git/config ] || {
			git clone \
				git@gitlab.com:redhat/rhel/src/kernel/rhel-$majversion.git \
				kernel
		}
		cd kernel
		git fetch
		git pull
		git remote add tcamuso git@gitlab.com:tcamuso/rhel-$majversion.git
	fi

	if [ "$distro" == "centos" ]; then
		cd /work
		mkdir c${majversion}s
		cd c${majversion}s
		[ -f kernel/.git/config ] || {
			git clone \
			git@gitlab.com:redhat/centos-stream/src/kernel/centos-stream-$majversion.git \
			kernel
		}
		cd kernel
		git fetch
		git pull
		[ "$majversion" == "9" ] && \
			git remote add tcamuso git@gitlab.com:tcamuso/centos-stream-9.git
	fi

	if [ "$distro" == "fedora" ]; then
		[ -d /work/7 ] || mkdir -p /work/7
		cd /work/7
		[ -f kernel/.git/config ] || {
			git clone \
				git@gitlab.com:redhat/rhel/src/kernel/rhel-7.git \
				kernel
			cd kernel
			git fetch
			git pull
			git remote add tcamuso git@gitlab.com:tcamuso/rhel-7.git
		}

		[ -d /work/8 ] || mkdir -p /work/8
		cd /work/8
		[ -f kernel/.git/config ] || {
			git clone \
				git@gitlab.com:redhat/rhel/src/kernel/rhel-8.git \
				kernel
			cd kernel
			git fetch
			git pull
			git remote add tcamuso git@gitlab.com:tcamuso/rhel-8.git
		}

		[ -d /work/9 ] || mkdir -p /work/c9s
		cd /work/9
		[ -f kernel/.git/config ] || {
			git clone \
				git@gitlab.com:redhat/rhel/src/kernel/rhel-9.git
				kernel
			cd kernel
			git fetch
			git pull
			git remote add tcamuso git@gitlab.com:tcamuso/rhel-9.git
		}

		[ -d /work/c9s ] || mkdir -p /work/c9s
		cd /work/c9s
		[ -f kernel/.git/config ] || {
			git clone \
				git@gitlab.com:redhat/centos-stream/src/kernel/centos-stream-9.git \
				kernel
			cd kernel
			git fetch
			git pull
			git remote add tcamuso git@gitlab.com:tcamuso/centos-stream-9.git
		}

		[ -d /work/ark ] || mkdir -p /work/ark
		cd /work/ark
		[ -f kernel/.git/config ] || {
			git clone git@gitlab.com:cki-project/kernel-ark.git \
				kernel
			cd kernel
			git fetch
			git pull
			git remote add tcamuso git@gitlab.com:tcamuso/kernel-ark.git
		}
	fi
}

get_distro() {
	[ -f /etc/os-release ] || { echo "/etc/os-release does not exist!"; exit 1; }
	foo=$(grep -w 'ID' /etc/os-release | cut -d"=" -f2)

	# Strip off the double quote marks
	#
	foo=${foo%\"}
	foo=${foo#\"}

	# distro is the lowercase of the ID we pulled out of /etc/os-release
	#
	distro=$(echo "$foo" | tr '[:upper:]' '[:lower:]')

	echo "Distro: $distro"

	if [[ "$distro" == "rhel" ]] || [[ "$distro" == "centos" ]]; then
		# Get the major version and strip off any leading double quotes
		#
		majversion=$(grep -w 'VERSION_ID' /etc/os-release | cut -d= -f2 | cut -d. -f1)
		majversion=${majversion#\"}
		majversion=${majversion%\"}

		echo "majversion: $majversion"
	elif [[ "$distro" != "fedora" ]]; then
		echo "$distro is not a distro supported by this script."
		exit 1
	fi
}

main() {

	[ -d /work ] || {
		echo "There is no /work directory."
		exit 1
	}

	cd /work

	[ -d /work/netperf ] || {
		git clone https://github.com/HewlettPackard/netperf.git
		cd netperf
		./autogen.sh
		./configure
		make
		make install
	}

	[ -d /work/progress ] || {
		git clone https://github.com/Xfennec/progress.git
		cd progress
		make
		make install
		cd -
	}

	declare repolist="/root/.config/patchreview/repolist"
	while read line; do
		echo "$line"
		[ -d "$line" ] || mkdir -p $line
	done < "$repolist"

	ssh-keyscan -H gitlab.com >> ~/.ssh/known_hosts

	get_distro
	create_upstream
	create_downstream
}

main $@

exit 0

