#!/bin/bash
#
# mkrepos

[ -n "$MYDIR" ] || {
        declare MYDIR=
        MYDIR="$(dirname "$(readlink -f "$0")")"
}

[ -n "$MYLIB" ] || {
        declare MYLIB=
        MYLIB="${MYDIR}/lib"
}

[ "$ui_loaded" ] || source "${MYLIB}/ui.source"

declare -i termbkgnd=

declare repolist=
declare b_host=false
declare usagestr="$(
cat <<EOF

$(basename $0)

Description: Create the upstream and downstream kernel repo(s)
   Repos will be created in the /work directory, as follows.
   /work/upstream/kernel
   /work/7/kernel
   /work/8/kernel
   /work/9/kernel
   /work/10/kernel
   /work/c9s/kernel
   /work/c10s/kernel
   /work/ark/kernel

Arguments:
  host - literally the string "host" to clone only the downstream kernel
         repo for the major version of the host system.

	 For rhel distros, both the centos and rhel repos are cloned.

	 For example...

		$ mkrepos host

	...will only clone the following repos,

	rhel-9 or centos-9
	/work/upstream/kernel
	/work/c9s/kernel
	/wokr/9/kernel
\0
EOF
)"

declare distro=
declare majversion=

usage() {
	echo -e "$usagestr"
	exit 1
}

#** control_c: control-c trap
#
# Global
#   CTLC_EXIT - bash environment variable
#*
control_c() {
        echo -e "\n${CAU}Ctrl-c detected\n${INF}Cleaning up and exiting.$OFF"
        exit $CTLC_EXIT
}

mkrepo() {
	local mr_distro="$1"
	local majver="$2"
	local reponam
	local repodir
	local repo

	if [ "$mr_distro" == "rhel" ]; then
		reponam="/rhel-$majver"
		repodir="/work/$majver"
		repo="git@gitlab.com:redhat/rhel/src/kernel/rhel-${majver}.git"

	elif [ "$mr_distro" == "centos-stream" ]; then
		reponam="centos-stream-$majver"
		repodir="/work/c${majver}s"
		repo="git@gitlab.com:redhat/centos-stream/src/kernel/centos-stream-${majver}.git"

	elif [ "$mr_distro" == "kernel-ark" ]; then
		reponam="kernel-ark"
		repodir="/work/ark"
		repo="git@gitlab.com:cki-project/kernel-ark.git"
	else
		echo -e "$CAU$mr_distro is not supported by this script.$OFF"
		return
	fi

	[ -d "$repodir" ] || mkdir -p "$repodir"
	cd "$repodir" || { echo -e "${CAU}Cannot cd into $STA$repodir$OFF"; exit 1; }

	if [ -f kernel/.git/config ] ; then
		echo -e "$CAU$PWD/kernel repo $STA$repodir/$reponam$CAU already exists.$OFF"
		return
	else
		echo -e "${CAU}Cloning $repo into $repodir/kernel...$OFF"
		git clone "$repo" kernel
		cd kernel || { echo -e "${CAU}cannot cd into $STA$PWD/$repodir$OFF"; exit 1; }
		git fetch
		git pull
		git remote add tcamuso git@gitlab.com:tcamuso/"$distro-${majver}.git"
		echo "$PWD" >> "$repolist"
	fi
}

create_upstream() {
	cd /work
	[ -d /work/upstream ] || mkdir -p /work/upstream
	cd /work/upstream
	[ -f kernel/.git/config ] || {
		if [ -f "kernel/.git/config" ]; then
			echo -e "\n{CAU}Upstream kernel already present.$OFF\n"
			return
		fi
		git clone \
		git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git \
		kernel
		cd kernel
		git remote add gh-ipmi https://github.com/cminyard/linux-ipmi.git
		git remote add net-next \
			https://git.kernel.org/pub/scm/linux/kernel/git/netdev/net-next.git
		git remote add scsi \
			https://git.kernel.org/pub/scm/linux/kernel/git/jejb/scsi.git
		git remote add power \
			https://git.kernel.org/pub/scm/linux/kernel/git/powerpc/linux.git
		git remote add perf \
			https://git.kernel.org/pub/scm/linux/kernel/git/jolsa/perf.git
		git remote add linux-rt-devel \
			https://git.kernel.org/pub/scm/linux/kernel/git/rt/linux-rt-devel.git
		git remote add crypto \
			https://git.kernel.org/pub/scm/linux/kernel/git/herbert/cryptodev-2.6.git
		git remote add bluetooth \
			git://git.kernel.org/pub/scm/linux/kernel/git/bluetooth/bluetooth-next.git
		git fetch -p --all
		echo "/work/upstream/kernel" >> "$repolist"
	}
}

create_downstream() {
	mkrepo "rhel" "7"
	mkrepo "rhel" "8"
	mkrepo "rhel" "9"
	mkrepo "rhel" "10"
	mkrepo "centos-stream" "9"
	mkrepo "centos-stream" "10"
	mkrepo "kernel-ark"
}

get_distro() {
	[ -f /etc/os-release ] || { echo -e "${CAU}/etc/os-release does not exist!$OFF"; exit 1; }
	foo=$(grep -w 'ID' /etc/os-release | cut -d"=" -f2)

	# Strip off the double quote marks
	#
	foo=${foo%\"}
	foo=${foo#\"}

	# distro is the lowercase of the ID we pulled out of /etc/os-release
	#
	distro=$(echo "$foo" | tr '[:upper:]' '[:lower:]')

	echo "Distro: $distro"

	if [[ "$distro" == "rhel" ]] || [[ "$distro" == "centos" ]]; then
		# Get the major version and strip off any leading double quotes
		#
		majversion=$(grep -w 'VERSION_ID' /etc/os-release | cut -d= -f2 | cut -d. -f1)
		majversion=${majversion#\"}
		majversion=${majversion%\"}

		echo "majversion: $majversion"
	elif [[ "$distro" != "fedora" ]]; then
		echo -e "$CAU$distro is not a distro supported by this script.$OFF"
		exit 1
	fi
}

upload_gitlab_ssh_key() {
  local token=
  local api_url="https://gitlab.com/api/v4"
  local title="Auto-uploaded SSH key from $(hostname)"
  local key_file=""
  local key_content=""
  local fingerprint=""

  token=$(awk -F'"' '/token/ {print $2}' ~/.config/lab/lab.toml)

  # Prefer ED25519, fallback to RSA
  for candidate in ~/.ssh/id_ed25519.pub ~/.ssh/id_rsa.pub; do
    if [[ -f "$candidate" ]]; then
      key_file="$candidate"
      break
    fi
  done

  if [[ -z "$key_file" ]]; then
    echo "❌ No SSH public key found (id_ed25519.pub or id_rsa.pub)"
    return 1
  fi

  key_content=$(<"$key_file")
  fingerprint=$(ssh-keygen -lf "$key_file" | awk '{print $2}')

  # Fetch existing keys
  local existing_keys
  existing_keys=$(curl --silent --header "PRIVATE-TOKEN: $token" "$api_url/user/keys")

  if echo "$existing_keys" | grep -q "$fingerprint"; then
    echo "✅ Key already exists in GitLab (fingerprint: $fingerprint)"
    return 0
  fi

  # Upload to GitLab
  curl --silent --show-error --fail -X POST "$api_url/user/keys" \
    --header "PRIVATE-TOKEN: $token" \
    --header "Content-Type: application/json" \
    --data "{\"title\": \"$title\", \"key\": \"$key_content\"}"

  if (( $? == 0 )); then
	  echo "${STA}sshkey uploaded$OFF"
  else
	  echo "${WRN}sshkey upload to gitlab failed$OFF"
	  exit
  fi
}

#** init
#
# Global
#*
init() {
        ui_setbg termbkgnd
}

#** main
#*
main() {
        # The following line will single step through this script.
        # Use the # to comment it out.
        #trap 'read -p "$(printf "%$((${#BASH_SOURCE[0]}+8))s" "")" \
	#	line && eval "$line" || exit $?' DEBUG

	[[ "$1" == "-h" ]] || [[ "$1" =~ "help" ]] && usage

        # Trap for control-c
        trap control_c SIGINT

	init

	local pr_cfg_dir="$HOME/.config/patchreview"

	repolist="${pr_cfg_dir}/repolist"

	[ "$1" == "host" ] && b_host=true || b_host=false

	[ -d /work ] || {
		echo -e "${WRN}There is no /work directory.$OFF"
		exit 1
	}

	upload_gitlab_ssh_key

	cd /work

	[ -d "$pr_cfg_dir" ] || mkdir -p "$pr_cfg_dir"

	> "$repolist"
	ssh-keyscan -H gitlab.com >> ~/.ssh/known_hosts
	get_distro
	create_upstream

	if $b_host; then
		mkrepo "$distro" "$majversion"
		[[ "$distro" == "rhel" ]] && ((majversion > 8)) && \
			mkrepo "centos-stream" "$majversion"
	else
		create_downstream
	fi

	[ -d "$HOME"/.cache ] || mkdir "$HOME"/.cache
	crontab - << EOF
0 7 * * * date > /work/crontab-repotask; /home/tcamuso/bin/repotask >> /work/crontab-repotask
EOF
}

main $@

exit 0

