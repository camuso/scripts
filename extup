#!/bin/bash

#
# Text Attributes
#
[ "$MYDIR" ] || {
	declare MYDIR=
	MYDIR="$(dirname "$(which "$(basename "$0")")")"
}
[ "$MYLIB" ] || {
	declare MYLIB=
	MYLIB="$MYDIR"/lib
}

declare MYDATA=
MYDATA="$(realpath ./.data)"
declare MYNAME=
MYNAME="$(basename "$0")"

[ "$ui_loaded" ]            || source "$MYLIB"/ui.source
[ "$ptversion_loaded" ]     || source "$MYLIB"/patchtools-version.source

declare -i stat
declare rev=""
declare -a alist		# alternate (upstream) branch list
declare -a blist		# current branch list
declare -i count		# limit the number of commits to parse
declare show_b=true
declare notupstream="-------------"
declare cmthash=
declare nomerges=
declare dates="-c -d"	# These will be cleared if the user enters -m option
declare usagestr=
declare path=
declare numregex='^[0-9]+$'
declare cmtexpr

usagestr=$(
cat <<EOF
$MNU${UND}Patchtools v$version$OFF

$(basename "$0") [OPTIONS] commit-expr path

commit-expr - any valid git commit expression.
path - any path, or a list of space-separated paths

Description

   Displays the current branch commit followed by the upstream branch
   commit as well as the upstream commit date (NOT the author date).

   The script assumes that the first commit hash it encounters in the
   commit log will be the upstream commit.

   If there is no upstream commit found, then a series of dashes is
   printed to the screen in its place, and the current branch commit
   date is printed, since there is no upstream commit.

Options must have a leading hyphen

   -u - upstream directory
   -r - reverse order
   -b - do not show downstream branch commit
   -n - no-merges
   -m - no-dates
   -h - this help text
   -<decimal integer> - limit the number of commits you want to parse to
                        the decimal integer.
\0
EOF
)

exitme() {
	echo -e "$usagestr"
	exit 0
}

# loop_range()
#
# Loop until user gives a number in the range defined by the args
#
# $1 - minimum
# $2 - maximum
# $3 - the value to be returned
#
loop_range() {
	local -i min=$1
	local -i max=$2
	local -i number
	local cmd
	local pstr=\
"$OFF\0Please enter a number between $BLD$min$OFF and $BLD$max$OFF: "

	[ "$max" -lt 10 ] && cmd=promptgetchar || cmd=getuser
	# echo "cmd: $cmd"

	while true; do
		$cmd "$pstr" number

		if [[ $number =~ ^-?[0-9]+$ ]]  && \
		   [[ $number -ge $min ]]       && \
		   [[ $number -le $max ]]; then
			eval "$3"="$number"
			echo
			return 0
		fi
	done
}

choose_commit() {
	local list="$1"
	local line=
	local index=0
	local ary

	echo "There is more than one commit in the git log"
	list=$(sort -u <<< "$list")

	while read -r line; do
		ary[$index]="$line"
		((++index))
		printf "%d: %s\n" "$index" "$line"
	done <<< "$list"

	loop_range 1 "$index" index

	((--index))
	echo "${ary[$index]}"
}

# is_validcmtexpr
#
# Break the commit expression into separate strings, dividing on a
# double dot elipsis, and cycle through the resulting array to
# check each of the commits.
#
is_validcmtexpr() {
	local tmp=$1
	local -a cary=()
	local c

	cary=(${tmp//../ })

	for c in ${cary[@]}; do
		git rev-parse $c > /dev/null 2>&1 || return 1
	done

	return 0
}

#** extract_upcmt: extract upstream commit from downstream hash
#
# Echoes the extracted upstream hash to the caller. If there is no
# upstream commit in the downstream hash passed as argument, then it
# returns an empty string.
#
# Globals
#   none
#
# Arguments
#   1 - dnhash: downstream hash
#
#*
extract_upcmt() {
	local dnhash="${1:-"HEAD"}"	# default is HEAD

	git log -1 --pretty=%B "$dnhash" \
		| awk '/^commit[[:space:]]+[0-9a-f]{40}/ { print $2; exit }' \
		| xargs git rev-parse --short 2> /dev/null
}

parseargs() {
	local arg=
	local opt=

	while (($# > 0)); do
	    arg="$1"

	    if [ "${arg:0:1}" == '-' ]; then
		opt="${arg:1}"

		if [[ $opt =~ $numregex ]]; then
			count=$arg;	# include the '-'
			shift
			continue
		fi

		case "$opt" in
			u ) 	shift
				updir="$1"
				;;
			r ) 	rev="--reverse"
				;;
			b ) 	show_b=false	# don't show downstream commit
				;;
			n ) 	nomerges="--no-merges"
				;;
			m ) 	dates=		# don't show dates
				;;
			h ) 	exitme
		esac

	    elif [ -e "$arg" ]; then
			path="$path $arg"
	    elif is_validcmtexpr "$arg"; then
			cmtexpr="$arg"
	    fi

	    shift

	done
}

(($# >= 1)) || exitme

parseargs "$@"

# If the user didn't provide an upstream dir with the  -u option,
# default to current directory.
[ -z "$updir" ] && updir="./"

# Create an array of hashes from the current (rhel) branch using the
# options entered by the user.
#
blist=($(git log $nomerges $count --oneline $rev --pretty=format:%h "$cmtexpr" -- $path))

for ((i=0; i < ${#blist[@]}; ++i)); do

	# skip over the downstream (RHEL) commit header
	log="$(git log -1  --pretty=%B "${blist[$i]}")"

	# extract the first commit line we encounter
	cmthash="$(awk '/^commit[[:space:]]+[0-9a-f]{40}/ { print $2; exit }' <<< "$log")"

	# if we didn't find one, then see if it's in cherry-picked format.
	[ -z "$cmthash" ] && \
		cmthash="$(awk '/^\(cherry-picked/ { print $2; exit }' <<< "$log")"

	# extract the commit hash from the line
	alist[$i]="$(git rev-parse --short "$cmthash" 2> /dev/null)"
	stat=$?

	# if the commit has a valid format, then ...
	if [ $stat -eq 0 ]; then

		# pushd "$updir" > /dev/null 2>&1

		# get the pretty commit line with commit date for the hash
		# extracted above.
		astr=$(gitnice $dates -1 "${alist[$i]}" 2> /dev/null)
		stat=$?

		# popd > /dev/null 2>&1

		if [ $stat -ne 0 ]; then
			tmp="$(gitnice $dates -1 "${blist[$i]}" | cut -d' ' -f2-)"
			echo -e " ##\n ## Commit ${alist[$i]:0:9} identified in"\
			        "${blist[$i]} cannot be found in any branch."
			astr="$notupstream $tmp"
		fi
	else
		tmp="$(gitnice $dates -1 "${blist[$i]}" | cut -d" " -f2-)"
		astr="$notupstream $tmp"
	fi

	if $show_b; then
		uc=$(echo "$astr" | cut -d' ' -f1)	# upstream cmt hash
		as=$(echo "$astr" | cut -d' ' -f2-)	# upstream cmt date & desc
		printf "%-12.12s %-12.12s %s\n" "${blist[$i]}" "$uc" "$as"
	else
		echo "$astr"
	fi
done
