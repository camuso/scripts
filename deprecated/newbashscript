#!/bin/bash
#
# Create an empty bash script with placeholders for help text and
# a usage function
#

source lib/getyn

declare b_opts=false
declare b_args=false
declare b_answer=false
declare -a args
declare -i argcount=0
declare -i optcount=0
declare -i index
declare -i width
declare -i widest
declare spacer="  "
declare ofile

declare usagestr=$(
cat <<EOF

$(basename $0) [ options ] <bashscript>

Create an empty bash script with placeholders for help text and
a usage function

  -o options, a quote enclosed string containing a list of space separated
     option flags with optional corresponding arguments.

     Example: -o "n:number f:file d:directory x h" -a "arg1 arg2"

     Creates options for -n number,  -f file, -d directory, -x and -h
     with no arguments.

  -a arguments, double quote enclosed string of arguments that follow
     the options for the new script being created.
     If the number of arguments following the options is not exactly
     this number, then the newly created script will print its usage
     message and exit.

     Example: -a "arg1 arg2"

\0
EOF
)

usage() {
	echo -e "$usagestr"
	exit
}

while getopts ho:a: OPTION; do
    case "$OPTION" in

	o ) opts=$OPTARG
	    b_opts=true
	    optcount=$((optcount+2))
	    ;;
	a ) args=("$OPTARG")
	    b_args=true
	    echo "args: "$args""
	    optcount=$((optcount+2))
	    ;;
	h ) usage
	    ;;
	* ) echo "unrecognized option"
	    echo -e "$usagestr"
	    exit 127
    esac
done

shift $optcount
[ $# -eq 1 ] || usage
ofile=$1

if [ -f "$ofile" ]; then
# set -x
	echo
	echo "File: $ofile already exists!"
	getyn "Do you want to overwrite?" answer
	$answer && echo "Overwriting file: $ofile" || exit 1
# set +x
fi

> $ofile

echo -en '#!/bin/bash
#
# '$ofile'
#

# Use unset in case these have been set elsewhere.
unset BLD && declare BLD="\033[1m"
unset UND && declare UND="\033[4m"
unset OFF && declare OFF="\033[0m"

# Contlol-C exit code
# see http://www.tldp.org/LDP/abs/html/exitcodes.html
unset CTLC_EXIT &&  declare -i CTLC_EXIT=130

# Other exit codes
declare -i EXIT_OK=0
declare -i EXIT_INVARG=1
declare -i EXIT_INVFIL=2
declare -i EXIT_INVDIR=3

declare -a exitmsgary=(
""
"Invalid number of arguments."
" is an invalid filename."
" is an invalid directory name."
)

exitme() {
	local exitval=$1
	local strarg=""
	local exitmsg

	if ([ $exitval -ne $EXIT_OK ] && [ $exitval -ne $CTLC_EXIT ]); then
		[ $# -eq 2 ] && strarg=$2
		[ ${#exitmsgary[@]} -gt $exitval ] \
			&& exitmsg="${exitmsgary[$exitval]}"

		echo -e "$BLD$strarg$exitmsg$OFF"

		[ $exitval -ne 0 ] && echo -e \
			"Type$BLD '$ofile' -h$OFF for help."
	fi

	exit $exitval
}

# run if user hits control-c
#
control_c()
{
	echo -en "\nCtrl-c detected\nCleaning up and exiting.\n"
	exitme $CTLC_EXIT
}

' >> $ofile

$b_args && createoptions -o "$opts" -a "$args" $ofile \
	|| createoptions -o "$opts" $ofile

chmod +x "$ofile"

