#!/bin/bash
#
# commitcmp
#

[ "$MYDIR" ] || {
	declare MYDIR=
	MYDIR="$(dirname "$(which "$(basename "$0")")")"
}
[ "$MYLIB" ] || {
	declare MYLIB=
	MYLIB="$MYDIR"/lib
}
[ "$MYDATA" ] || MYDATA="$PWD"/.data

[ "$ui_loaded" ]            || source "$MYLIB"/ui.source
[ "$configmanager_loaded" ] || source "$MYLIB"/cfgmgr.source
[ "$ptversion_loaded" ]     || source "$MYLIB"/patchtools-version.source

# Other exit codes
declare -i exit_ok=0
declare -i exit_invarg=1
declare -i exit_invpath=2	# invalid path
declare -i exit_invdir=3
declare -i exit_disfil=4	# directory name is a file
declare -i exit_invhash=5	# not a hex number
declare -i exit_invcmt=6	# not a valid commit
declare -i exit_nooutd=7	# directory name is empty
declare -i exit_norepo=8	# not a repo directory
declare -i exit_noupcmt=9	# can't find upcmt in dncmt log
declare -i exit_nodncmt=10	# user did not supply a dncmt

declare -a exitmsgary=

exitmsgary=(
""
"Invalid number of arguments."
" path does not exist."
" is an invalid directory name."
" is a file, not a directory."
" is not a valid commit hash."
" commit cannot be found in the logs"
"You did not provide an output directory path:$MNU -od <outdir>$OFF"
" is not a repo directory"
" commit log does not have a valid upstream commmit"
"You did not provide a -dc downstream (RHEL) commit."
)

exitme() {
	local -i exitval=$1
	local strarg=""
	local exitmsg

	if [ "$exitval" -ne $exit_ok ] && [ "$exitval" -ne $CTLC_EXIT ]; then
		[ $# -eq 2 ] && strarg=$2
		[ ${#exitmsgary[@]} -gt "$exitval" ] \
			&& exitmsg="${exitmsgary[$exitval]}"

		echo -e "$MNU$strarg$WRN$exitmsg$OFF"

		[ "$exitval" -ne 0 ] && echo -e \
			"${INF}Type $MNU$(basename "$0") -h$INF for help.$OFF"
	fi
set +x
	cfg_write_cfgfile configtable
	exit "$exitval"
}

# run if user hits control-c
#
control_c()
{
	echo -en "
	${WRN}Ctrl-c detected$INF
Cleaning up and exiting.$OFF
"
	exitme $CTLC_EXIT
}

declare -i background=
declare -i optcount=0
declare uplog="upstream.log"
declare dnlog="downstream.log"
declare chlog="backport.log"
declare outdir=
declare updir=
declare upcmt=
declare dncmt=
declare searchstr=
declare path=
declare b_localus=true	# default true, upstream is in current local dir
declare upscope=	# upstream scope limited to this commit expression

# Configuration (sticky) variables
declare configfile="$MYDATA"/mkbackportlog.config
declare -A configtable
configtable[repobr]="$repobr"
configtable[background]="$background"

usage() {
	local usagestr

	usagestr=$(
cat <<EOF
$MNU
${UND}Patchtools v$version$OFF
$MNU
$(basename "$0") -od -dc -ud path [path-2 path-n] [-uc] [-us] $OFF

Create a list of commits to be backported from an upstream repo
Commits that have already been backported will have a leading$MNU #$OFF to
comment them out for subsequent processing scripts, like git-backport.

This must be run in the downstream (RHEL) repo directory.

Creates the following files in the <outdir>.
  $STA$uplog$OFF   - contains the upstream commits since$INF upcmt$OFF
  $STA$dnlog$OFF - contains the downstream commits since$INF dwncmt$OFF
  $STA$chlog$OFF   - contains the upstream commits that have not yeat been
                   backported downstream.$MNU$UND
Arguments$OFF$MNU
  path$OFF -$WRN This argument is REQUIRED$OFF
         A space separated list of paths and files to be searched
         for new upstream commits for the backport.
	 At least one path must be given.$MNU$UND
Switches$OFF
  $WRN${UND}Required$OFF$MNU
   -od$OFF - Directory to receive ouput files$MNU
   -dc$OFF - Downstream commit, usually last RHEL commit for the given path(s).
         Without the optional$MNU -uc$OFF switch, the upstream commit will be extracted
         from this downstream commit and used as a starting point to search for
         new upstream commits for the given path(s).$MNU
  $WRN${UND}May Be Required$OFF$MNU
   -ud$OFF - Directory having the upstream repo,
         Without this switch, the script expects a remote upstream repo
	 in$MNU \$PWD: $STA$PWD$OFF
         If there is no upstream repo declared with the "${MNU}-ud$OFF" switch
	 and no remote one in the$MNU \$PWD$OFF, then this script's behavior
	 is$WRN UNDEFINED$OFF.$MNU
  ${UND}Optional$OFF$MNU
   -uc$OFF - Upstrream commit. Without this switch, the script will extract the
         upstream commit from the requisite downstream commit.$MNU
   -us$OFF - Upstream scope will be limited to before this commit.
         This argument will usually be an upstream tag, e.g.$MNU v6.7$OFF
	 but it can also be an upstream commit.
	 All commits occuring after this commit, will have a leading
	"${MNU}#+ $OFF" prepended to their lines in the backport.log to tell scripts
	like git-backport to ignore them.
  ${UND}Informational$OFF$MNU
   -V $OFF - show patchtools version and exit$MNU
   -h $OFF - this help text$MNU
$MNU$UND
Example:$OFF$INF
  $(basename "$0") \\\

        -dc d7f2756787f5 \\\

        -ud /work/upstream/kernel \\\

	-us v6.6 \\\

        -od ../backport/9.4/ipmi/ \\\

        drivers/char/ipmi include/linux/ipmi.h include/linux/ipmi_smi.h
$OFF
	Extract the upstream commit from RHEL commit d7f2756787f5 and
	search the upstream repo in /work/upstream/kernel for newer
	commits to the given paths.
$OFF
\0
EOF
)
	echo -en "$usagestr" | more
	exitme 0
}

get_pathopt() {
	local path=$1
	local -n optname="$2"

	[ -e "$path" ] || exitme $exit_invpath "$path"
	optname=$(realpath "$path")
}

get_varopt() {
	local var="$1"
	local -n varname="$2"

	varname="${var//,/ }"
}

test_help() {
	local opt="$1"

	shopt -s nocasematch
	[[ $opt =~ (h|help) ]] && { usage; exitme $exit_ok; }
	shopt -u nocasematch
}

# is_validcmtexpr
#
# Break the commit expression into separate strings, dividing on a
# double dot elipsis, and cycle through the resulting array to
# check each of the commits.
#
is_validcmtexpr() {
	local tmp="$1"
	local -a cary=()
	local c
	local errstr=
	local stat

	cary=(${tmp//../ })

	for c in ${cary[@]}; do
		errstr="$(git rev-parse $c 2>&1 > /dev/null)"
		stat=$?
		((stat == 0)) || exitme "$exit_invhash" "$errstr\n$c"
	done

	return 0
}

getcmt() {
	local tmp="$1"
	local op="$2"
	local -n cmtname="$3"
	local -i stat=0

	is_validcmtexpr "$1"
	stat=$?

	((stat == 0)) || exitme $stat "$op $tmp"

	cmtname="$tmp"
	return 0
}

# parseops() - parse the input options
#
# Needed multicharacter optionis, but didn't want to use longopts.
#
# Inputs: $@, the whole command line
#
# Globals:
# 	optcount
# 	upcmt
# 	dncmt
# 	usagestr
# 	searchstr
# 	path
# 	upscope
# 	outdir
# 	version
#
parseops() {
	local arg=
	local opt=

	while (($# > 0)); do
	    arg="$1"

	    if [ "${arg:0:1}" == '-' ]; then
		opt="${arg:1}"

		shift
		case "$opt" in
		    ud ) get_pathopt "$1" updir
			 b_localus=false
			 ;;
		    od ) get_pathopt "$1" outdir
			 ;;
		    uc ) getcmt "$1" "$arg" upcmt
			 ;;
		    dc ) getcmt "$1" "$arg" dncmt
			 ;;
		    us ) getcmt "$1" "$arg" upscope
			 ;;
		    S  ) get_varopt "$1" searchstr
			 ;;
		    V  ) echo "Patchtools v$version"
			 exit 0
			 ;;
		    *  ) echo "unrecognized option $arg"
			 echo -e "$usagestr"
			 exit 127
		esac

	    elif [ -e "$arg" ]; then
			path="$path $arg"
	    fi

	    shift
	done
}

# compare_strings() - compare strings
#    Compare the commits from the upstream and downstream commit logs
#    to identify those that have already been backported.
#    Output all commit lines to the log file, marking the ones that
#    were already backported with a leading #
#
# GLOBALS
#	chlog - output commits file
#	uplog - upstream commits file
#	dnlog - downstream commits file
#	outdir - directory for all the commit log files
#	upcmt - start from this upstream commit
#
compare_strings() {
	local uppath="$outdir/$uplog"
	local dnpath="$outdir/$dnlog"
	local chpath="$outdir/$chlog"
	local savedifs="$IFS"
	local upstr=
	local rhstr=
	local up	# one line from the upstream log
	local tmp
	local b_match=false
	local j		# upstr index
	local k		# rhstr index
	local rhcmt=

	# Instead of reading from the file, which limmits our debug
	# capabilites, create an array out of the lines in the file.
	# Set IFS to newline and then restore it after creating the
	# string arrays.
	#
	IFS=$'\n'
	upstr=($(< "$uppath"))
	rhstr=($(< "$dnpath"))
	IFS="$savedifs"

	# Zero the backport log file.
	:> "$chpath"

	for ((j = 0; j < ${#upstr[@]}; ++j)); do
		up=${upstr[j]}
		upcmt="${up:0:9}"

		for ((k = 0; k < ${#rhstr[@]}; ++k)); do
			tmp=$(echo "${rhstr[k]}" | cut -d' ' -f2)
			rhcmt="${tmp:0:9}"

			[[ "$rhcmt" == "$upcmt" ]] && {
				b_match=true
				break
			}
		done

		$b_match && echo "# $up" >> "$chpath" || echo "$up" >> "$chpath"
		$b_match && echo "# $up" || echo "$up"
		b_match=false
	done
}

init_env() {
	local bgtemp

	[ -d "$MYDATA" ] || mkdir -p "$MYDATA"

	ui_setbg bgtemp
	background="$bgtemp"

	cfg_start configtable "$configfile"
	configtable[background]="$background"
	cfg_write_cfgfile configtable
}

check_log() {
	log="$1"

	echo -e "${INF}Create : $STA$log$OFF"

	[ -f "$log" ] && {
		echo -en "$WRN$log exists.$OFF "
		echo -e "${INF}It will be overwritten if you continue.$OFF"
	}
}

get_currentbranch() {
	git branch | grep -E '^\*' | cut -d' ' -f2
}

seek_str() {
	local prepend=
	local outfile=
	local commit
	local str

	[ -d "$updir" ] && { cd "$updir" || exitme $exit_invdir; }

	for str in $searchstr; do
		prepend=$(echo "$str" | cut -d' ' -f1)
		outfile="$outdir/$prepend-$chlog"

		echo -e "\n${STA}Creating $outfile$INF"
		: > "$outfile"
		while read -r line; do
			[ "${line:0:1}" == "#" ] && continue
			commit=$(echo "$line" | cut -d' ' -f1)
			git show "$commit" | grep -q -m1 "$str" || continue
			echo "$line" | tee -a "$outfile"
		done < "$outdir/$chlog"
	done
	cd - > /dev/null 2>&1 || exitme $exit_invdir
}

select_remote() {
	local -n gusr_cur="$1"
	local brstr=
	local brancharray=()

	# Get all the branches into one string
	ui_cd "$updir" 		# get into upstream dir first
	brstr=$(git branch -r)
	ui_cd -			# go back to original dir

	# Filter out lines with '-> in them, because they are not branches
	while read -r s; do [[ $s == *"->"* ]] || brancharray+=("$s"); done <<< "$brstr"

	if [ ${#brancharray[@]} -gt 1 ]; then
		echo -e "\n$UND${MNU}Select the upstream repo/branch$OFF"
		select_from_array brancharray "branches" gusr_cur
	else
		gusr_cur=${brancharray[0]}
		echo -e "$INF Only one branch in this repo: $STA$cur$OFF"
		echo -e "$INF Nothing else to choose from.$OFF"
	fi

	configtable[repobr]="$repobr"
	return 0
}

# limit_scope - backport log stops at  the supplied upstream commit
#
# This is done by commenting out hashes in the backport log that are
# beyond the supplied scope commit. These comment delimiter will be a
# leading '#+ ' on the lines of the commits that go beyond the scope.
#
# GLOBALS:
#   chlog   - the backport log file
#   upscope - the upstream limiting commit
#             this commit will also be excluded, if it's in the
#             backport log.
#
# ARGUMENTS: none
#
# RETURNS: none
#
limit_scope() {
	local delim=
	local line
	local -a linary=()
	local outfil="$outdir"/"$chlog"

	mapfile -t linary < "$outfil"
	> "$outfil"

	for (( i = 0; i < ${#linary[@]}; ++i)) ; do
		local tmpstr=
		local -a tmpary=()
		local cmt=
		local line="${linary[i]}"

		([ ${line:0:1} == "#" ] || [ ${line:0:1} == "+" ]) && continue

		# tokenize the line on spaces by excluding double quotes inside
		# array parens.
		tmpary=( $line )
		cmt="${tmpary[0]}"
		tmpstr="$(gitnice -1 --no-merges "$upscope"^.."$cmt")"

		[ -n "$tmpstr" ] && linary[i]="#+ $line"
	done

	echo -e "$INF"
	printf "%s\n" "${linary[@]}" | tee -a "$outfil"
	echo -e "$OFF"
}

main() {
	local mainbranch
	local currentbranch
	local -a tmpary=()
	local repobr
	local mypid

	init_env

	(($# >= 1)) || { usage; exitme $exit_ok; }

        # Trap for control-c
        trap control_c SIGINT

	[ -f .git/config ] || exitme $exit_norepo "PWD: $PWD"

	read -r mainbranch <<< "$(git branch -r | grep origin/HEAD | cut -d'>' -f2)"
	currentbranch=$(get_currentbranch)

	test_help "$1"
	parseops "$@"

	# If no dncmt, then complain and exit.
	[ -n "$dncmt" ] || exitme $exit_nodncmt "$dncmt"

	# Exit if no outdir
	[ -n "$outdir" ] || exitme $exit_nooutd

	# Id using the current dir (default), set updir here.
	if $b_localus; then
		updir="$PWD"
	fi

	select_remote repobr

	# If the user did not input an upstream commit, then extract the
	# upstream commit from the submitted RHEL commit, which is the most
	# recent RHEL commit under consideration, entered with the -dc option.
	if [ -z "$upcmt" ]; then
		tmpary=($(extup -1 -r -n -u "$updir" "$dncmt"))
		upcmt="${tmpary[1]}"
		[[ $upcmt =~ ^[0-9A-Fa-f]+$ ]] || exitme $exit_noupcmt "$dncmt"
		is_validcmtexpr "$upcmt" || exitme $exit_noupcmt "$dncmt"
	fi

	check_log "$outdir/$uplog"
	check_log "$outdir/$dnlog"
	check_log "$outdir/$chlog"

	echo -e "${INF}Upstream repo:branch : $STA$updir:$repobr$OFF"
	echo -e "${INF}Upstream commit      : $STA$upcmt$OFF"
	echo -e "${INF}Downstream branch    : $STA$mainbranch$INF"
	# echo -e "${INF}Current Downstream branch : $STA$currentbranch$INF"

	if [ -n "$path" ]; then
		# If there's more than one path, show them all.
		if (($(wc -w <<< "$path") > 1)); then
			echo -e "${INF}Paths:$OFF"
			# shellcheck complains about vars without quotes, but
			# sometimes, it's what you really want.
			printf "  %s\n" $path
		else
			echo -e "${INF}Path:$OFF $path"
		fi
	fi

	echo
	echo -n "Press any key to proceed or CTRL-C to exit..."
	read -r -n1

	echo -e "$STA$PWD$OFF"
	echo -e "${STA}Creating $outdir/$uplog$INF"

	# Get the list of upstream commits starting from the one extracted from
	# the submitted RHEL commit with the -dc option.
	ui_cd "$updir"
	gitnice -r -c -d --no-merges "$upcmt..$repobr" $path 2>&1 | tee "$outdir/$uplog"
	ui_cd -

	echo -e "$STA$PWD$OFF"
	echo

	echo -e "$STA"
	echo -e "${STA}Creating $outdir/$dnlog$INF"
	extup -r -n -u "$updir" "$dncmt..$mainbranch" $path 2>&1 | tee "$outdir/$dnlog"

	echo
	echo -e "${STA}Creating $outdir/$chlog$INF"
	compare_strings

	[ -n "$searchstr" ] && seek_str
	echo -e "$OFF"

	if [ -n "$upscope" ]; then
		limit_scope & mypid=$!
		ui_waitonproc_tty $mypid .05 "Limiting scope to $MNU$upscope$OFF. Please wait."
	fi

	exitme $exit_ok
}

main "$@"

exitme $exit_ok

