#!/bin/bash
#
# commitcmp
#

[ "$MYDIR" ] || {
	declare MYDIR=
	MYDIR="$(dirname "$(which "$(basename "$0")")")"
}
[ "$MYLIB" ] || {
	declare MYLIB=
	MYLIB="$MYDIR"/lib
}
[ "$MYDATA" ] || MYDATA="$PWD"/.data

[ "$ui_loaded" ]            || source "$MYLIB"/ui.source
[ "$configmanager_loaded" ] || source "$MYLIB"/cfgmgr.source
[ "$ptversion_loaded" ]     || source "$MYLIB"/patchtools-version.source

# Other exit codes
declare -i exit_ok=0
declare -i exit_invarg=1
declare -i exit_invpath=2	# invalid path
declare -i exit_invdir=3
declare -i exit_disfil=4	# directory name is a file
declare -i exit_invhash=5	# not a hex number
declare -i exit_invcmt=6	# not a valid commit
declare -i exit_nooutd=7	# directory name is empty
declare -i exit_norepo=8	# not a repo directory
declare -i exit_noupcmt=9	# can't find upcmt in dncmt log
declare -i exit_nodncmt=10	# user did not supply a dncmt
declare -i exit_nopath=11	# user did not supply a path to search
declare -i exit_norepobr=12	# user did not supply an upstream repo/branch

declare -a exitmsgary=

exitmsgary=(
""
"Invalid number of arguments."
" path does not exist."
" is an invalid directory name."
" is a file, not a directory."
" is not a valid commit hash."
" commit cannot be found in the logs"
"You did not provide an output directory path"
" is not a repo directory"
" commit log does not have a valid upstream commmit"
"You did not provide a downstream (RHEL) commit."
"You did not provide any paths to search, e.g. drivers/perf"
"You did not provide an upstream repo/branch to search"
)

exitme() {
	local -i exitval=$1
	local strarg=""
	local exitmsg

	if [ "$exitval" -ne $exit_ok ] && [ "$exitval" -ne $CTLC_EXIT ]; then
		[ $# -eq 2 ] && strarg=$2
		[ ${#exitmsgary[@]} -gt "$exitval" ] \
			&& exitmsg="${exitmsgary[$exitval]}"

		echo -e "$MNU$strarg$WRN$exitmsg$OFF"

		[ "$exitval" -ne 0 ] && echo -e \
			"${INF}Type $MNU$(basename "$0") -h$INF for help.$OFF"
	fi

	$b_interactive && return

	cfg_write
	exit "$exitval"
}

# run if user hits control-c
#
control_c()
{
	echo -en "
	${WRN}Ctrl-c detected$INF
Cleaning up and exiting.$OFF
"
	b_interactive=false
	exitme $CTLC_EXIT
}

declare -i background=
declare -i optcount=0
declare uplog="upstream.log"
declare dnlog="downstream.log"
declare chlog="backport.log"
declare outdir=
declare updir="$PWD"
declare upcmt=
declare dncmt=
declare searchstr=
declare path=
declare repobr=
declare upscope=	# upstream scope limited to this commit expression
declare b_localus=true	# default true, upstream is in current local dir
declare b_ready=false
declare b_interactive=false

# Configuration (sticky) variables
declare configfile="$MYDATA"/mkbackportlog.conf
declare -A configtable
configtable[repobr]=
configtable[background]=
configtable[outdir]=
configtable[updir]=
configtable[upcmt]=
configtable[dncmt]=
configtable[searchstr]=
configtable[path]=
configtable[upscope]=
configtable[currentbranch]=

cfg_write() {
	cfg_write_cfgfile configtable
}

cfg_read() {
	cfg_read_cfgfile configtable
}

usage() {
	local usagestr

	usagestr=$(
cat <<EOF
$MNU
${UND}Patchtools v$version$OFF
$MNU
$(basename "$0") -od -dc -ud path [path-2 path-n] [-uc] [-us] $OFF

Create a list of commits to be backported from an upstream repo
Commits that have already been backported will have a leading$MNU #$OFF to
comment them out for subsequent processing scripts, like git-backport.

This must be run in the downstream (RHEL) repo directory.

Creates the following files in the <outdir>.
  $STA$uplog$OFF   - contains the upstream commits since$INF upcmt$OFF
  $STA$dnlog$OFF - contains the downstream commits since$INF dwncmt$OFF
  $STA$chlog$OFF   - contains the upstream commits that have not yeat been
                   backported downstream.$MNU$UND
Arguments$OFF$MNU
  path$OFF -$WRN This argument is REQUIRED$OFF
         A space separated list of paths and files to be searched
         for new upstream commits for the backport.
	 At least one path must be given.$MNU$UND
Switches$OFF
  $WRN${UND}Required$OFF$MNU
   -od$OFF - Directory to receive ouput files$MNU
   -dc$OFF - Downstream commit, usually last RHEL commit for the given path(s).
         Without the optional$MNU -uc$OFF switch, the upstream commit will be extracted
         from this downstream commit and used as a starting point to search for
         new upstream commits for the given path(s).$MNU
  $WRN${UND}May Be Required$OFF$MNU
   -ud$OFF - Directory having the upstream repo,
         Without this switch, the script expects a remote upstream repo
	 in$MNU \$PWD: $STA$PWD$OFF
         If there is no upstream repo declared with the "${MNU}-ud$OFF" switch
	 and no remote one in the$MNU \$PWD$OFF, then this script's behavior
	 is$WRN UNDEFINED$OFF.$MNU
  ${UND}Optional$OFF$MNU
   -uc$OFF - Upstrream commit. Without this switch, the script will extract the
         upstream commit from the requisite downstream commit.$MNU
   -us$OFF - Upstream scope will be limited to before this commit.
         This argument will usually be an upstream tag, e.g.$MNU v6.7$OFF
	 but it can also be an upstream commit.
	 All commits occuring after this commit, will have a leading
	"${MNU}#+ $OFF" prepended to their lines in the backport.log to tell scripts
	like git-backport to ignore them.
  ${UND}Informational$OFF$MNU
   -V $OFF - show patchtools version and exit$MNU
   -h $OFF - this help text$MNU
$MNU$UND
Example:$OFF$INF
  $(basename "$0") \\\

        -dc d7f2756787f5 \\\

        -ud /work/upstream/kernel \\\

	-us v6.6 \\\

        -od ../backports/9.4/ipmi/ \\\

        drivers/char/ipmi include/linux/ipmi.h include/linux/ipmi_smi.h
$OFF
	Extract the upstream commit from RHEL commit d7f2756787f5 and
	search the upstream repo in /work/upstream/kernel for newer
	commits to the given paths.
$OFF
\0
EOF
)
	echo -en "$usagestr" | more
}

#** get_pathopt - validate and return a pathname
#
# Arguments:
#   $1 - path to be verified
#   $2 - receives the realpath name of path
#*
get_pathopt() {
	local path="$1"
	local -a pathary=( $path )
	local -a  pary=()
	local -n optname="$2"

	for p in ${pathary[@]}; do
		[ -e "$p" ] || exitme $exit_invpath "$path"
		pary+=( "$p" )
	done

	optname="${pary[@]}"
}

#** get_varopt - replace commas with spaces
#
# Arguments:
#   $1 - variables separated by commas
#   $2 - receives variables as space separated string
#*
get_varopt() {
	local var="$1"
	local -n varname="$2"

	varname="${var//,/ }"
}

#** test_help - determines whether the string invokes help
#
# Arguments:
#   $1 - string to be parsed for whether it is asking for help
#*
test_help() {
	local opt="$1"

	shopt -s nocasematch
	[[ $opt =~ (h|help) ]] && { usage; exitme $exit_ok; }
	shopt -u nocasematch
}

#** is_validcmtexpr - validate a commit expression
#
# Break the commit expression into separate strings, dividing on a
# double dot elipsis, and cycle through the resulting array to
# check each of the commits.
#
# Arguments:
#    $1 - commit expression
#*
is_validcmtexpr() {
	local tmp="$1"
	local -a cary=()
	local c
	local errstr=
	local stat

	cary=(${tmp//../ })

	for c in ${cary[@]}; do
		errstr="$(git rev-parse $c 2>&1 > /dev/null)"
		stat=$?
		((stat == 0)) || exitme "$exit_invhash" "$errstr\n$c"
	done

	return 0
}

#** getcmt - validate a commit expression supplied at the cmd line
#
# ArgumentsL
#   $1 - commit expression passed by user
#   $2 - the switch name used to pass the commit expression
#   $3 - receives the commit expression after validation
#*
getcmt() {
	local tmp="$1"
	local op="$2"
	local -n cmtname="$3"
	local -i stat=0

	is_validcmtexpr "$1"
	stat=$?

	((stat == 0)) || exitme $stat "$op $tmp"

	cmtname="$tmp"
	return 0
}

#** parseops - parse the input options
#
# Arguments: $@, the whole command line
#
# Globals:
# 	optcount
# 	upcmt
# 	dncmt
# 	usagestr
# 	searchstr
# 	path
# 	upscope
# 	outdir
# 	version
#	configtable[]
#	version
#*
parseops() {
	local arg=
	local opt=
	path=	# must init the path var, because it is aggregated.

	while (($# > 0)); do
	    arg="$1"

	    if [ "${arg:0:1}" == '-' ]; then
		opt="${arg:1}"

		shift
		case "$opt" in
		    ud ) get_pathopt "$1" updir
			 b_localus=false
			 ;;
		    od ) get_pathopt "$1" configtable[outdir]
			;;
		    uc ) getcmt "$1" "$arg" configtable[upcmt]
			 ;;
		    dc ) getcmt "$1" "$arg" configtable[dncmt]
			 ;;
		    us ) getcmt "$1" "$arg" configtable[upscope]
			 ;;
		    S  ) get_varopt "$1" configtable[searchstr]
			 ;;
		    V  ) echo "Patchtools v$version"
			 exit 0
			 ;;
		    *  ) echo "unrecognized option $arg"
			 echo -e "$usagestr"
			 exit 127
		esac

	    elif [ -e "$arg" ]; then
			path="$path $arg"
	    fi

	    shift
	done

	configtable[path]="${path##*( )}"
	cfg_write
}

#** compare_strings() - create the backport.log
#
#    Compare the commits from the upstream and downstream commit logs
#    to identify those that have already been backported.
#    Output all commit lines to the log file, marking the ones that
#    were already backported with a leading #
#
# GLOBALS
#	chlog - output commits file
#	uplog - upstream commits file
#	dnlog - downstream commits file
#	outdir - directory for all the commit log files
#	upcmt - start from this upstream commit
#*
compare_strings() {
	local uppath="$outdir/$uplog"
	local dnpath="$outdir/$dnlog"
	local chpath="$outdir/$chlog"
	local savedifs="$IFS"
	local upstr=
	local rhstr=
	local up	# one line from the upstream log
	local tmp
	local b_match=false
	local j		# upstr index
	local k		# rhstr index
	local rhcmt=

	# Instead of reading from the file, which limmits our debug
	# capabilites, create an array out of the lines in the file.
	# Set IFS to newline and then restore it after creating the
	# string arrays.
	#
	IFS=$'\n'
	upstr=($(< "$uppath"))
	rhstr=($(< "$dnpath"))
	IFS="$savedifs"

	# Zero the backport log file.
	:> "$chpath"

	for ((j = 0; j < ${#upstr[@]}; ++j)); do
		up=${upstr[j]}
		upcmt="${up:0:9}"

		for ((k = 0; k < ${#rhstr[@]}; ++k)); do
			tmp=$(echo "${rhstr[k]}" | cut -d' ' -f2)
			rhcmt="${tmp:0:9}"

			[[ "$rhcmt" == "$upcmt" ]] && {
				b_match=true
				break
			}
		done

		$b_match && echo "# $up" >> "$chpath" || echo "$up" >> "$chpath"
		$b_match && echo "# $up" || echo "$up"
		b_match=false
	done
}

#** init_env - initialize the sticky variables and other env stuff
#
#  Arguments: none
#
#  Globals:
#    configfile
#    configtable
#    backgrouond
#    MYDATA
#*
init_env() {
	local bgtemp

	[ -d "$MYDATA" ] || mkdir -p "$MYDATA"

	ui_setbg bgtemp
	background="$bgtemp"

	cfg_start configtable "$configfile"
	configtable[background]="$background"
}

#** check_log - notify user if logfile already exists
#
# Arguments:
#   $1 - the logfile to check
#*
check_log() {
	log="$1"

	echo -e "${INF}Create : $STA$log$OFF"

	[ -f "$log" ] && {
		echo -en "$WRN$log exists.$OFF "
		echo -e "${INF}It will be overwritten if you continue.$OFF"
	}
}

#** get_currentbranch - echo the current git branch
#*
get_currentbranch() {
	git branch | grep -E '^\*' | cut -d' ' -f2
}

#** seek_str - look for a string in the commits in the upstream.log
#
# Globals:
#   updir
#   outdir
#   chlog
#*
seek_str() {
	local prepend=
	local outfile=
	local commit
	local str

	ui_cd "$updir"
	for str in $searchstr; do
		prepend=$(echo "$str" | cut -d' ' -f1)
		outfile="$outdir/$prepend-$chlog"

		echo -e "\n${STA}Creating $outfile$INF"
		: > "$outfile"
		while read -r line; do
			[ "${line:0:1}" == "#" ] && continue
			commit=$(echo "$line" | cut -d' ' -f1)
			git show "$commit" | grep -q -m1 "$str" || continue
			echo "$line" | tee -a "$outfile"
		done < "$outdir/$chlog"
	done
	ui_cd -
}

#** select_remote - choose from available repo/branches in current dir
#
# Provides the upstream reference for searching for upstream commits.
#
# Arguments: none
#
# Globals:
#   updir
#   repobr
#   configtable
#*
select_remote() {
	local brstr=
	local brancharray=()

	# Get all the branches into one string

	if [[ "$updir" != "$PWD" ]]; then
		ui_cd "$updir"
		brstr=$(git branch -r)
		ui_cd -
	else
		# We have a remote in PWD
		# Skip all the remotes that are from the origin or $USER.
		# We are only interested in upstream remotes in PWD
		brstr=$(git branch -r | grep -E -v "origin|$USER")
	fi

	# Filter out lines with '-> in them, because they are not branches
	while read -r s; do [[ $s == *"->"* ]] || brancharray+=("$s"); done <<< "$brstr"

	if [ -z "$brstr" ]; then
		echo -e "${WRN}There is no remote upstream repo in directory: $STA$updir$OFF"
		return 1
	fi

	if [ ${#brancharray[@]} -gt 1 ]; then
		echo -e "\n$UND${MNU}Select the upstream repo/branch$OFF"
		select_from_array brancharray "branches" repobr
	else
		repobr=${brancharray[0]}
		echo -e "$INF Only one upstream branch in this repo: $STA$repobr$OFF"
		echo -e "$INF Nothing else to choose from.$OFF"
	fi

	configtable[repobr]="$repobr"
	return 0
}

#** select_localbr - choose from available local branches in current dir
#
# Provides the upstream reference for searching for upstream commits.
#
# Arguments: none
#
# Globals:
#   updir
#   currentbranch
#   configtable
#*
select_localbr() {
	local -a branches=()

	# This git command prints the branches without decoration, since
	# there is no porcelain switch for git branch.
	mapfile -t branches <<< $(git for-each-ref --format='%(refname:short)' refs/heads/)

	if ((${#branches[@]} > 1)); then
		echo -e "\n$UND${MNU}Select the lcal branch$OFF"
		select_from_array branches "branches" currentbranch
	else
		echo -e "$INF Only one branch in this repo: $STA$currentbranch$OFF"
		echo -e "$INF Nothing else to choose from.$OFF"
	fi

	git checkout "$currentbranch"
	configtable[currentbranch]="$currentbranch"
}

#** limit_scope - backport log stops at  the supplied upstream commit
#
# This is done by commenting out hashes in the backport log that are
# beyond the supplied scope commit. These comment delimiter will be a
# leading '#+ ' on the lines of the commits that go beyond the scope.
#
# GLOBALS:
#   outdir  - destination directory for files output by this script
#   chlog   - the backport log file
#   upscope - the upstream limiting commit
#             this commit will also be excluded, if it's in the
#             backport log.
#*
limit_scope() {
	local delim=
	local line
	local -a linary=()
	local outfil="$outdir"/"$chlog"

	mapfile -t linary < "$outfil"
	> "$outfil"

	for (( i = 0; i < ${#linary[@]}; ++i)) ; do
		local tmpstr=
		local -a tmpary=()
		local cmt=
		local line="${linary[i]}"

		([ ${line:0:1} == "#" ] || [ ${line:0:1} == "+" ]) && continue

		# tokenize the line on spaces by excluding double quotes inside
		# array parens.
		tmpary=( $line )
		cmt="${tmpary[0]}"
		tmpstr="$(gitnice -1 --no-merges "$upscope"^.."$cmt")"

		[ -n "$tmpstr" ] && linary[i]="#+ $line"
	done

	echo -e "$INF"
	printf "%s\n" "${linary[@]}" | tee -a "$outfil"
	echo -e "$OFF"
}

#** show_paths - show the current user supplied paths
#
# Globals:
#   path - the aggregate path provided by user
#
show_paths() {
	local -a pthary=()
	local -i pad=32
	local padstr
	local path="${configtable[path]}"

	[ -z "$path" ] && { echo -e "\n "; return; }

	padstr="$(ui_rptchr ' ' $pad)"
	pthary=( $path )

	echo -e "$STA${pthary[0]}"
	printf "$padstr%s\n" ${pthary[@]:1}
}

#** test_reqparms() - see if all the required params have been entered
#
# Globals:
#   configtable
#   exitmsgary
#   exit_nodncmt
#   exit_nooutd
#   exit_nopath
#   exit_norepobr
#
# Returns:
#   0 if all required parameters are present
#   1 if there are any missing
#
test_reqparms() {
	local -i stat=0
	[ -n "${configtable[outdir]}" ] || { stat=1; echo -e "$WRN${exitmsgary[exit_nooutd]}"; }
	[ -n "${configtable[path]}"   ] || { stat=1; echo -e "$WRN${exitmsgary[exit_nopath]}"; }
	[ -n "${configtable[repobr]}" ] || { stat=1; echo -e "$WRN${exitmsgary[exit_norepobr]}"; }
	([ -n "${configtable[dncmt]}"  ] || [ -n "${configtable[upcmt]}"  ]) ||
		{ stat=1; echo -e "$WRN${exitmsgary[exit_nodncmt]}"; }
	((stat == 0)) || ui_press_any
	return $stat
}

#** clear_parms - zero the parameters
#
# Globlals:
#   configtable
#
clear_parms() {
	local key

	for key in "${!configtable[@]}"; do
		key=${key// /}
		configtable["$key"]=
	done
}

show_upstreamdir() {
	$b_localus && echo -n -e "${INF}default is PWD: "
	echo -e -n $STA${configtable[updir]}$OFF
}

#** show_menu - display the user menu in ui mode
#
# Globals:
#
show_menu() {
	local mbl_menu
	local addpath=

	local mbl_menu=$(
cat <<EOF
$MNU$UND
mkbackportlog - patchtools: $STA$version$OFF
$MNU$UND
Required$OFF
$MNU o$OFF - Output Directory         : $STA${configtable[outdir]}$OFF
$MNU b$OFF - Upstream repo/branch     : $STA${configtable[repobr]}$OFF
$MNU p$OFF - Path(s) to  search       : $(show_paths)
$MNU P$OFF - Add to search path
$MNU$UND
One of the following:$OFF
$MNU d$OFF - Downstream RHEL commit   : $STA${configtable[dncmt]}$OFF
$MNU s$OFF - Start at upstream commit : $STA${configtable[upcmt]}$OFF
$MNU$UND
Optional$OFF
$MNU e$OFF - End at upstream commit   : $STA${configtable[upscope]}$OFF
$MNU u$OFF - Upstream repo directory  : $(show_upstreamdir)
$MNU B$OFF - Current Downstream Branch: $STA$currentbranch$OFF
$MNU$UND
Functional$OFF
$MNU r$OFF - Run with the above parameters
$MNU C$OFF - Clear all parameters
$MNU q$OFF - Quit this script
$MNU h$OFF - Help
\0
EOF
)
	echo -e "$mbl_menu"
}

menu_parser() {
	local mp_in="$1"

	case "$mp_in" in
		q ) b_interactive=false
		    exitme $exit_ok
		    ;;
		d ) getuser "Downstream RHEL commit: " dncmt
		    is_validcmtexpr && configtable[dncmt]="$dncmt"
		    ;;
		p ) getuser "Path(s) to be searched: " path
		    get_pathopt "$path" path && {
			path=$(echo "$path" | tr '\n' ' ')
			configtable[path]="$path"
		    }
		    ;;
		P ) getuser "Additional Path(s) to be searched: " addpath
		    get_pathopt "$addpath" addpath && {
			addpath=$(echo "$addpath" | tr '\n' ' ')
			path="$path $addpath"
			configtable[path]="$path"
		    }
		    ;;
		o ) getuser "Directory to receive output files: " outdir
		    get_pathopt "$outdir" outdir && configtable[outdir]="$outdir"
		    ;;
		u ) getuser "Upstream repo directory: " updir
		    get_pathopt "$updir" updir && configtable[updir]="$updir"
		    b_localus=false
		    ;;
		s ) getuser "Start at this upstream commit: " upcmt
		    is_validcmtexpr "$upcmt" && configtable[upcmt]="$upcmt"
		    ;;
		e ) getuser "End at this upstream commit: " upscope
		    is_validcmtexpr "$upscope" && configtable[upscope]="$upscope"
		    ;;
		b ) select_remote
		    ;;
		B ) select_localbr
		    ;;
		C ) clear_parms
		    ;;
		r ) test_reqparms && return 1
		    ;;
		h ) usage
	esac

	return 0
}

menu_loop() {
	local menuin

	while :; do
		cfg_read
		show_menu
		promptgetchar "${MNU}Enter one of the above: $OFF" menuin
		# If all required params are there and user pressed 'r',
		# then break and run
		menu_parser $menuin || break
		cfg_write
	done
}

#** main
#*
main() {
	local mainbranch
	local currentbranch
	local -a tmpary=()
	local mypid

	init_env

        # Trap for control-c
        trap control_c SIGINT

	[ -f .git/config ] || exitme $exit_norepo "PWD: $PWD"

	read -r mainbranch <<< "$(git branch -r | grep origin/HEAD | cut -d'>' -f2)"
	currentbranch=$(get_currentbranch)
	configtable[currentbranch]="$currentbranch"

	# If using the current dir (default), set updir here.
	if [ -z "$updir" ]; then
		updir="$PWD"
		configtable[updir]="$PWD"
	fi

	[[ "$updir" == "$PWD" ]] && b_localus=true || b_localus=false

	# update the configfile before going any further
	cfg_write

	if (( $# == 0 )); then
		b_interactive=true
		menu_loop
	else
		b_interactive=false
		test_help "$1"
		parseops "$@"
		select_remote repobr
		test_reqparms
	fi

	b_interactive=false

	# If the user did not input an upstream commit, then extract the
	# upstream commit from the submitted RHEL commit, which is the most
	# recent RHEL commit under consideration, entered with the -dc option.
	if [ -z "$upcmt" ]; then
		tmpary=($(extup -1 -r -n -u "$updir" "$dncmt"))
		upcmt="${tmpary[1]}"
		[[ $upcmt =~ ^[0-9A-Fa-f]+$ ]] || exitme $exit_noupcmt "$dncmt"
		is_validcmtexpr "$upcmt" || exitme $exit_noupcmt "$dncmt"
	fi

	check_log "$outdir/$uplog"
	check_log "$outdir/$dnlog"
	check_log "$outdir/$chlog"

	echo -e "${INF}Upstream branch   : $STA$repobr$OFF"
	echo -e "${INF}Upstream commit   : $STA$upcmt$OFF"
	echo -e "${INF}Downstream branch : $STA$mainbranch$INF"
	# echo -e "${INF}Current Downstream branch : $STA$currentbranch$INF"

	if [ -n "$path" ]; then
		# If there's more than one path, show them all.
		if (($(wc -w <<< "$path") > 1)); then
			echo -e "${INF}Paths:$OFF"
			# shellcheck complains about vars without quotes, but
			# sometimes, it's what you really want.
			printf "  %s\n" $path
		else
			echo -e "${INF}Path:$OFF $path"
		fi
	fi

	echo
	echo -n "Press any key to proceed or CTRL-C to exit..."
	read -r -n1

	echo -e "$STA$PWD$OFF"
	echo -e "${STA}Creating $outdir/$uplog$INF"

	# Get the list of upstream commits starting from the one provided
	# as the upstream start or the one extracted from the submitted
	# RHEL commit with the -dc option.
	ui_cd "$updir"
	gitnice -r -c -d --no-merges "$upcmt^..$repobr" $path 2>&1 | tee "$outdir/$uplog"
	ui_cd -

	echo -e "$STA$PWD$OFF"
	echo

	echo -e "$STA"
	echo -e "${STA}Creating $outdir/$dnlog$INF"
	extup -r -n -u "$updir" "$dncmt^..$mainbranch" $path 2>&1 | tee "$outdir/$dnlog"

	echo
	echo -e "${STA}Creating $outdir/$chlog$INF"
	compare_strings

	[ -n "$searchstr" ] && seek_str
	echo -e "$OFF"

	if [ -n "$upscope" ]; then
		limit_scope & mypid=$!
		ui_waitonproc_tty $mypid .05 "Limiting scope to $MNU$upscope$OFF. Please wait."
	fi

	exitme $exit_ok
}

main "$@"

exitme $exit_ok

