#!/bin/bash
#
# ipmikmod
#

declare MYDATA=
declare optcount=0

MYDATA=$(realpath ./.data)
[ -d "$MYDATA" ] || mkdir -p "$MYDATA"

declare kmodlog="$MYDATA"/kmod.log
declare kmodparms="$MYDATA"/kmodparms.log
declare ipmidir="./drivers/char/ipmi"
declare msgparmfile="$MYDATA"/msgparm.log
declare siparmfile="$MYDATA"/siparm.log
declare configfile="$MYDATA"/ipmikmod.conf
declare -A msgparmtable
declare -A siparmtable
declare -A configtable
declare b_local=false

#** Exit codes and messages
#
declare -i ui_exit_ok=0
declare -i ui_err_invcmd=1
declare -i ui_err_invcmd_arg=2
declare -i ui_err_invkmod=3
declare -i ui_err_invparm=4

declare -a ui_err_msg=(
""
": You must enter a valid command"
"not a valid command argument"
"kmod must be one of ipmi_msghandler or ipmi_si"
"not a valid kmod parameter"
)
#*

declare -p CTLC_EXIT > /dev/null 2>&1 || declare -i CTLC_EXIT=130
declare BLD='\e[1m'
declare UND='\e[4m'
declare OFF='\e[m'

# control_c: run if user hits control-c
#
# Global
#   CTLC_EXIT - bash environment variable
#
control_c() {
	echo -e "\nCtrl-c detected\nCleaning up and exiting."
	exit $CTLC_EXIT
}

ui_exit() {
	local -i msgindex="$1"
	local artifact="$2"
	local msg

	msg="$WRN${ui_err_msg[msgindex]}$OFF"
	[ -n "$artifact" ] && msg="$MNU$artifact $msg"
	((msgindex == ui_exit_ok)) || echo -e "$BLD$msg$OFF\n"
	exit "$msgindex"
}

# exitme
#
# Globals
#   configfile
#   All vars in configfile
#
exitme() {
	local -i code=$1
	local artifact="$2"

	write_parms configtable "$configfile"
	write_parms msgparmtable "$msgparmfile"
	write_parms siparmtable "$siparmfile"

	((code == ui_err_invcmd)) && {
		echo -e "\n${BLD}${UND}Please enter a valid command.$OFF"
		help_screen
	}

	ui_exit $code "$artifact"
}

find_parms() {
	local -n fp_list="$1"
	local kmod="$2"

	mapfile -t fp_list < <(find /sys/module -type f | \
			    grep "$kmod" | grep 'parameters')
}

extract_parms() {
	local -n ep_list=$1
	local -n ep_table=$2
	local -i idx
	local key
	local val
	local file
	local catcmd="sudo cat"

	[ "$USER" == "root" ] && catcmd="cat"

	ep_table[dir]="$(dirname "${ep_list[0]}")"

	for ((idx = 0; idx < ${#ep_list[@]}; idx++)); do
		file="${ep_list[idx]}"

		# Assume the parm does not have read permission.
		# If we determine that we can read it, then extract its val.
		#
		val="Does not have read permission"
		[[ $(stat -c "%A" $file) =~ "r" ]] && val="$($catcmd "$file")"

		key="$(basename "$file")"
		ep_table["$key"]="$val"
	done
}

write_parms() {
	local -n wp_table="$1"
	local file="$2"
	local key

	> "$file"

	for key in "${!wp_table[@]}"; do
		echo "$key = ${wp_table["$key"]}" >> "$file"
	done
}

read_parms() {
	local -n rp_table="$1"
	local file="$2"
	local key
	local val

	while IFS+="=" read -r key val; do
		rp_table["$key"]=$val
	done < "$file"
}

init_parms() {
	local kmod="$1"
	local ip_table="$2"
	local file="$3"
	local -a parms

	find_parms parms "$kmod"
	extract_parms parms "$ip_table"
	write_parms "$ip_table" "$file"
}

reinit_parms() {
	init_parms "ipmi_msghandler" msgparmtable "$msgparmfile"
	init_parms "ipmi_si" siparmtable "$siparmfile"
}

get_parms() {
	local -a msgparms
	local -a siparms

	if [ -f "$msgparmfile" ] && [ -s "$msgparmfile" ]; then
		read_parms msgparmtable "$msgparmfile"
	else
		init_parms "ipmi_msghandler" msgparmtable "$msgparmfile"
	fi

	if [ -f "$siparmfile" ] && [ -s "$siparmfile" ]; then
		read_parms siparmtable "$siparmfile"
	else
		init_parms "ipmi_si" siparmtable "$siparmfile"
	fi
}

init_cfg() {
	local key
	local value

	if [ -f "$configfile" ] && [ -s "$configfile" ]; then
		read_parms configtable "$configfile"
	else
		> "$configfile"
		configtable[env]="booted"
		write_parms configtable "$configfile"
	fi
}

# init
#
# GLOBALS
#   background
#
init() {
	# If the kmodlog is empty, then get the currently loaded
	# ipmi kmmods.
	#
	[ -s "$kmodlog" ] || lsmod | grep 'ipmi' > "$kmodlog"

	get_parms
	init_cfg
}

show_parms() {
	local key

	echo -e "\n $MNU${UND}ipmi_msghandler parameters$OFF"
	echo -e "$INF Directory :$OFF ${msgparmtable[dir]}/"
	for key in "${!msgparmtable[@]}"; do
		[ "$key" == "dir" ] && continue
		printf "$INF %-28s :$OFF %s\n" "$key" "${msgparmtable["$key"]}"
	done

	echo -e "\n $MNU${UND}ipmi_si parameters$OFF"
	echo -e "$INF Directory :$OFF ${siparmtable[dir]}/"
	for key in "${!siparmtable[@]}"; do
		[ "$key" == "dir" ] && continue
		printf "$INF %-20s :$OFF %s\n" "$key" "${siparmtable["$key"]}"
	done
	echo -e "$OFF"
}

set_parm() {
	local kmod="$1"
	local parm="$2"
	local val="$3"
	local kmods="ipmi_msghandler ipmi_si"
	local -n table
	local file
	local modcmd="modprobe"
	local inscmd="insmod"
	local mods

	# Make sure we have valid inputs.
	# We can only check whether the kmod and parm are valid.
	# Whether the val is valid will be determined when insmod is done.
	#
	grep -qow "$kmod" <<< "$kmods" || exitme $ui_invkmod "$kmod"

	case "$kmod" in
		"ipmi_msghandler" ) table="msgparmtable"; file="$msgparmfile";;
		"ipmi_si"         ) table="siparmtable"; file="$siparmfile";;
	esac

	grep -qow "$parm" <<< "${!table[@]}" || exitme $ui_err_invparm "$parm"

	[ "$USER" == "root" ] || {
		modcmd="sudo modprobe"
		inscmd="sudo insmod"
	}

	# Update the parmtable
	#
	table["$parm"]="$val"
	write_parms "table" "$file"

	# First remove all the ipmi modules, because we don't know the
	# dependencies. Reverse the order, so that the kmod with the most
	# dependencies 	# loads first.
	#
	mods="$(cat "$kmodlog" | cut -d' ' -f1)"
	$modcmd -ra $mods

	# Insert the kmod with the parameter value, then insert the
	# rest of them.
	#
	if $b_local; then

		# Any mods this kmod depends on will be loaded automatically.
		#
		$inscmd "$ipmidir"/"$kmod".ko

		# We don't build acpi_ipmi in drivers/char/ipmi, so exclude it
		# from the local load. The load of ipmi_si will pull in the
		# booted version of acpi_ipmi.
		#
		for mod in ${mods//acpi_ipmi/}; do
			# We don't want to atempt to load the kmod we just
			# loaded with a parameter value.
			# mods that were already loaded due to dependencies
			# will just be ignored by insmod
			#
			[ "$mod" == "$kmod" ] && continue
			$inscmd "$ipmidir"/"$mod".ko
		done
	else
		# It's a lot simpler for booted kmods.
		#
		$modcmd "$kmod" "$parm"="$val"
		$modcmd -a $mods
	fi
}

help_screen() {
	local usagestr

	usagestr=$(
cat <<EOF
$MNU
$(basename "$0") cmd [parameters]

A utility to load and unload ipmi kmods, either from the booted lib/modules
directory of locally built kmods.

A command for loading the kmods with specific parameters is also provided.

$UND
Commands$OFF

$MNU source [local | booted]$INF : Determines whether booted or locally built
                           kmods will be used. Default is booted

$MNU load kmod$INF : load the named kmod from source as set by "source" command

$MNU reload$INF : reload all ipmi kmods from source set by "source" command.

$MNU setparm kmod parm value$INF : set the kmod parameter value and reload
                           the kmod from source set by "source" command
                           Example: ipmikmod setparm ipmi_si kcs_debug 7

$MNU showparm$INF : show the current kmod parameters

$MNU initparm$INF : restore working kmod parms to booted settings

$MNU showmods$INF : show the list of kmods loaded with the native kernel

$MNU help$INF : show this help text
$OFF
EOF
)
	echo -e "$usagestr"
}

parsecmd() {
	local cmd="$1"

	shift

	case "$cmd" in
	"local"    ) b_local=true
		     ;;
	"boot"     ) ;&
	"booted"   ) b_local=false
		     ;;
	"reload"   ) reload "$@"
		     ;;
	"setparm"  ) set_parm "$@"
		     ;;
	"showparms") ;&
	"showparm" ) show_parms
		     ;;
	"initparms") ;&
	"initparm" ) reinit_parms
		     show_parms
		     ;;
	"showmod"  ) ;&
	"showmods" ) cat "$kmodlog"
		     ;;
	"-h"       ) ;&
	"--help"   ) ;&
	"help"     ) help_screen
	             exitme $ui_exit_ok
	             ;;
	*          ) exitme $ui_err_invcmd "$cmd"
		     ;;
	esac
}

reload() {
	local targ="booted"
	local modcmd="modprobe"
	local inscmd="insmod"
	local mods

	[ "$USER" == "root" ] || \
		{ modcmd="sudo modprobe"; inscmd="sudo insmod"; }

	mods="$(cat "$kmodlog" | cut -d' ' -f1)"

	if $b_local; then
		# First remove all the mods
		$modcmd -ra $mods

		# Reverse the order, so that the kmod with the most dependencies
		# loads first.
		#
		mods="$(tac "$kmodlog" | cut -d' ' -f1)"

		# We don't build acpi_ipmi in drivers/char/ipmi, so exclude it
		# from the local load. The load of ipmi_si will pull in the
		# booted version of acpi_ipmi.
		#
		for mod in ${mods//acpi_ipmi/}; do
			"$inscmd" "$ipmidir"/"$mod".ko
		done

		lsmod | grep 'ipmi'
		return $?
	else
		$modcmd -ra $mods
		sleep 1
		$modcmd -a $mods
		lsmod | grep 'ipmi'
		return $?
	fi

	return 0
}

# parseopts
#
# Globals
#
parseopts() {
	local arg=
	local opt=

	for arg in $@; do

	    if [ "${arg:0:1}" == "-" ]; then
		opt="${arg:1}"
		shift
		((optcount++))

		case "$opt" in
		h ) echo -e "$usagestr"
		    exit 0
		esac
	    fi
	done
}

main() {
	init
	parsecmd "$@"

	exitme $ui_exit_ok
}

main "$@"
