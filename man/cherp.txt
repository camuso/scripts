cherp
-------------

Type 'q' at any time to exit this help.

Command Line
------------
abort     - abort the current cherrypick
branch    - select a different git branch
continue  - continue after resolving conflict and committing change
commit    - continue, but let script commit changes and create commit log
apply <h> - applying a fix, let cherp create the commit log.
            Useful for partial backports.
            cherp apply <upstream-commit-hash>
help      - display this help
history   - show commits so far this session
new       - start a new session
pick <h>  - cherry pick one hash specified by <h>
pop <n>   - pop <n> commits from the current working git branch
reset     - hard reset git HEAD to start of session
run       - run the cherrypick automation
select    - select the next cherrypick from the presented list
setup     - run the cherp menu to setup the runtime environment
status    - show the cherp session status and git status
version   - show this version of the cherp script

Invoking cherp with no commands presents the cherp menu.

This script will cherry-pick commits from a git branch into the current
branch.

Commits may be presented one at a time or in a "Source commits file",
containing upstream commits, with the earliest commit to be cherry-
picked being the first in the file. This file can be created with the
following git command.

git log <starting-commit> --oneline --no-merges --reverse > filename

You can edit the resulting file to put a leading # on the upstream
commits that you want to skip over.

Commit logs are automatically generated.

The user can type control-c at anytime to exit the script, and a best
effort will be made to assure the user's tree is left in a coherent
state.

All Environmental variables and options are sticky across invocations
of this script by use of a project file in which to store their most
recent state.

Terminology:

	Cherry-picked commits are those you are attempting to backport
	using git cherry-pick. Among the advantages of git cherry-pick
	is the clear identification of conflicts in files using the
	multiple chevron delimiters <<<<<< and >>>>>>.

	Backported commits are those you have committed to the current
	git branch after having applied cherry-picked commits from the
	upstream branch. Backported commits are used to generate the
	backport patch set.

Session Capture:

	To capture all input and output from this session, quit now and
	restart with the following command.

		cherp script.sh 3>&2>&1 | tee cherp.log

	You can also use "script" to capture your session. This will
	capture all activity, including activity in spawned shells.

		script -c cherp cherp.log

	To enjoy enhanced input editing capabilities, use \"rlwrap\".

		rlwrap cherp

