#!/bin/bash
#
declare gortman=$(
cat <<EOF

${CAU}G${INF}ort is an$CAU O${INF}mnimodal$CAU R${INF}evision$CAU T${INF}ool$OFF
$INF
Type 'q' at any time to exit this help.
$OFF
${UND}${MNU}Introduction
$OFF
Backporting is one of those things that can be daunting, especially when
there are a LOT of commits to do. Mostly, it is just tedium.$MNU gort$OFF is an
attempt to simplify and automate that process as much as possible.

Even the conflict resolution process has been simplified. With$MNU patchpal$OFF
now among the backport modes available, we have AI helping to resolve
conflicts. Other backport modes have their own recommended ways for
resolving conflicts.

For all modes, commit logs are automatically generated in the recommended
RHEL format. If the user has entered JIRA, CVE, and upstream version info,
that will be added to each commit log.

If a conflict was detected, a Conflicts stanza will also be inserted into
the commit log for the user to edit.

After the chosen commits have been backported, the$MNU P$OFF option in the Main
Menu will prompt you for a directory in which to create a git-formatted
patch series from the backported commits. The patch series can then be
examined by$MNU patchreview$OFF or another patch reviewing tool to assure that
they meet all the criteria to go into a Merge Request,

Starting a new branch, applying the patch series, building the kernel with
them, and testing for functionality and regression are the final steps.

${MNU}gort$OFF provides six different backporting methods:

$MNU   patchpal
$MNU   git cherry-pick
$MNU   git apply
$MNU   git apply --3way
$MNU   patch
$MNU   patch --merge
$OFF
These are presented as options when$MNU gort$OFF is started for the very first
time. They are also available as options from the Options Menu. If enough
interest is raised, I will add$MNU git am$OFF in the future.

$MNU${UND}Workflow
$OFF
The$MNU gort$OFF menu fields and other salient init and setup information
are explained below the Workflow.

Workflow consists of these steps.

$MNU${UND}The Backport Commits File
$OFF
  Create a file containing a list of upstream commits that you want to
  backport to your downstream repo. This file can be created with the
  ${MNU}mkbackportlog$OFF tool in the patchtools suite. The upstream commits of
  interest should be one on each line, at the beginning of each line.

  Leading hashes$MNU #$OFF comment out the commit. Additionally, as$MNU gort$OFF goes
  through the list, it will mark each line with a leading$MNU +$OFF to indicate
  that the commit has been successfully backported. If you use the
  ${CAU}Alt-Shift-R$OFF hotkey to back track, the corresponding$MNU +$OFF markers will be
  removed from the beginning of each line of commits being backtracked
  in the file.

  Additionally, you can exclude commits simply by inserting a leading$MNU #$OFF
  at the beginning of the lines you want to exclude. This is preferable
  to just deleting them, because you can add comments with a leading$MNU #$OFF to
  the file explaining why the commit is being excluded. These comments can
  then be used in the$MNU Omitted-fix:$OFF section of your MR Description.

  Invoke$MNU gort$OFF without arguments. If this is the first time you have used
  ${MNU}gort$OFF in the current directory,$MNU gort$OFF will start the$MNU New Session$OFF procedure.
  After this initialization, the$MNU gort$OFF character cell menu interface will
  appear.

  You will be prompted for a "Work Directory". This is a scratch directory
  used by$MNU gort$OFF to do its thing.

  ${CAU}Do not put anything named$MNU .patch$CAU in the Work Directory!
 
  You should use a different directory for your own patches, when prompted
  for one after pressing the$MNU P$INF Create a patch series$OFF hotkey in the Main Menu.

$MNU${UND}Run the Backport
$OFF
  Press$MNU r$OFF to "${MNU}Run all remaining commits$OFF". The backport method you chose
  during the$MNU New Session$OFF procedure will apply and commit the patches,
  creating a commit log with you as the author, the JIRA, CVE, Upstream
  Status, and Test information you entered during the init. These fields
  are also available for editing from the$MNU O$OFF options menu, as are the
  backport methods. If the fields are empty, they will not be printed to
  the commit log. The original upstream commit log will appear beneath all
  this. Finally, your signoff, which you should have in your .gitconfig in
  your$MNU HOME$OFF directory, will be printed at the bottom of the created commit
  log.

  Automated backporting will stop when it encounters a$MNU Conflict$OFF. When that
  happens,$MNU gort$OFF will present the git status as well as messages to
  assist with resolving the conflict, and exit to the command line.

$MNU${UND}Encountering a conflict
$OFF
  The message presented when a conflict is encountered will provide the
  following salient information, as well as other tool status fields.

    . The offending upstream commit
    . A git formatted patch file of the upstream commit for editing
    . A file named$MNU patch.log$OFF in the user work directory, containing
      the output of whichever patch method was chosen. This file will help
      with resolving commits from$MNU patch$OFF and$MNU git apply$OFF. The 3way methods
      and$MNU git cherry-pick$OFF leave conflict markers in the conflicted files.
    . A reminder to enter$MNU gort abort$OFF at the command line after revising the
      offending patch but before applying it
    . Instructions for commiting the revised patch and continuing with the
      automation

  See ${MNU}Resolving Conflicts$OFF below for more details on resolving conflicts
  for the different backport methods.

  Once the conflicts are resolved, and the modified patch can be applied
  cleanly, enter enter$CAU gort abort$OFF at the command line. This will reset the
  git HEAD and index to your last successful commit without affecting
  untracked or modified files. Once you've revised the patch to modify, add,
  or delete only the files you want, you can clean out the untracked files,
  un-stage any staged commits, and checkout all other files. Now you can
  apply the revised patch before re-entering ${MNU}gort$OFF to commit the patch
  and continue.

  You may determine that you do not want to backport the offending commit,
  Edit the backport commits log, and enter a leading$MNU #$OFF in front of the
  commit you want to skip. You may want to enter some commentary with leading
  hashes to use later when creating the$MNU Omitted-fix:$OFF stanza of your Merge
  Request Description. At this point, you should$MNU git reset --hard$OFF to your
  most recent successful backport and$MNU git clean -df$OFF for good measure.

$UND${MNU}Commit the Modified Patch
$OFF
  Once you know the revised patch will apply and build cleanly, you will
  enter$MNU gort commit$OFF at the command line. This will commit the patch as well
  as create a commit log with a$MNU Conflicts:$OFF stanza in it. The$MNU vim$OFF editor
  will be invoked to edit the commit log, and you will be prompted with ...

    $MNU Edit this commit message? y/n:$OFF

  Answer$MNU y$OFF to edit the$MNU Conflicts:$OFF stanza. After you write (save)
  the file, you will be prompted again to edit it. If all meets your
  approval, you can press$MNU n$OFF to exit the edit loop and re-enter the
  main menu of$MNU gort$OFF.

  Now you can press$MNU r$OFF again to resume automated backporting, until there are
  no more commits to process in the backport commits file, or until you
  encounter another conflict.

  That's it! You're done.

$UND${MNU}Main Menu$OFF

  ${MNU}Upstream Environment options
$OFF
$MNU f$OFF Backports File $OFF
   This is a file containing a sequential list of upstream commits to be
   backported into the current downstream [origin] index.

$MNU c$OFF Next Backport Commit $OFF
   Shows the next commit in the Backport File that will be committed. The
   user can press$MNU c$OFF to choose a different commit in the file.

$MNU  Downstream Environment options
$OFF
$MNU u$OFF Upstream repo directory$OFF
   This the path to the users clone of the upsteam Linux kernel.
   A mirror of this repo will be made in a sibling directory of the
   Upstream repo directory. If the sibling directory does not exist,
   it will be created and named "mirror".

   For example, an upstream repo directory in /work/upstream/kernel
   will have its sibling mirror directory in /work/upstream/mirror.
   This directory is a bare mirror clone of the upstream repo.
   'git remote add mirror /work/upstream/mirror' will be executed
   in the users downstream repo, if the mirror is not already a
   remote.

   If the users reference to the mirror needs to be updated, a 'git
   fetch' will be executed.
   The first time this executes, it will take a couple minutes.
   Thereafter, the length of time it takes to update the local
   references will be proportional to the number of changes have
   occured upstream.

   The user must keep the Upstream repo directory up-to-date to assure
   that all the latest references and tags are available.

   The advantage to this is that there is only one full upstream
   repo directory required, and all the downstream git directories
   need only the barest amount of information to function ast though
   the main Upstream repo directory were added as a remote.

$MNU b$OFF Current git branch $OFF
   Presents a list of the downstream branches n the current downstream
   index.

$MNU w$OFF Working directory $OFF
   Provides a scratch directory for the tool to use.

$MNU B$OFF Backport method          :$STA patchpal$OFF
   Selecting this option makes the following menu appear.

$MNU   Which backport mode do you want to use?
$MNU       1.$FF patchpal
$MNU       2.$OFF git cherry-pick$MNU
$MNU       3.$OFF git apply --reject$MNU
$MNU       4.$OFF git apply with 3-way merge$MNU
$MNU       5.$OFF patch with reject files$MNU
$MNU       6.$OFF patch --merge$MNU
$MNU Please enter a number between 1 and 6:

$MNU O$OFF Options $OFF
   Presents the Options Menu
$MNU
${MNU}Control options
$OFF
$MNU S$OFF Stop Before $OFF
   Presents a prompt to enter one of the commits from the Backports File.
   Useful for stopping the automated backport in order build and test the
   applied backports before proceeding.

$MNU P$OFF Create a patchseries $OFF
   Creates a patch series starting from the$INF Head at Session Start$OFF
   up to the current HEAD. The path to the patch directory must be
   defined by the user in the Options > Patch Directory.
   Options > Patch Subject Prefix, as well as Options > JIRA, Options > CVE
   options > Brew, and Options > Test are also available fields to add
   to the git commit log when formatting the patches.

$MNU N$OFF Start a New Sesssion
   The current HEAD becomes the$INF Head at Session Start$OFF, and prompts
   are presented to provide the following:

   ${INF}Backport Mode$OFF
      Modes avaialble are
$MNU        patchpal
$MNU        git cherry-pick
$MNU        git apply --reject
$MNU        git apply --3way
$MNU        patch
$MNU        patch --merge$OFF

   ${MNU}gort$OFF provides six different methods for backporting, as listed above.
   The reason for that is to appeal to personal preference of the user for
   handling backports, as well as providing faster performing methods vs.
   more comprehensive ones.

   For example,$MNU patch$OFF is faster than$MNU git apply$OFF which in turn is faster
   than$MNU git cherry-pick$OFF or$MNU patchpal$OFF. But patchpal provides AI assisted
   conflict resolution

   ${INF}New working directory$OFF
      Scratch directory for the tool to use. It is good to know where the
      tool will leave traces so they can be reviewed when needed.

   ${INF}Backports File$OFF
      Enter file containing a sequential list of upstream commits to
      backport.

   ${INF}JIRA link$OFF
      This link will be embedded in the generated git logs.

   ${INF}CVE$OFF
      If there is a CVE, then put its ID here.

   ${INF}Upstream Status$OFF
      For example, v6.7 or Linux-Next.

$MNU H$OFF History
   Shows a history of the backports to the current point.

$MNU r$OFF Run all remaining commits$OFF
   Runs the automation. The automatic backport will stop if any conflicts
   are encountered when backporting, and it will exit after printing a conflict
   message. Back at the shell prompt, the user can make the corrections needed
   to reapply the patch and continue.

   See ${MNU}Resolving Conflicts$OFF below.

   If the$INF Stop Before$OFF commit has been entered, the automation will
   stop before that commit. This is useful for building and testing the
   backport along the way, especially for larger backports.

$MNU A$OFF Abort, reset to last good commit and clean status
   Same as$MNU git abort$OFF from the command line. The HEAD is reset
   to the last successful commit, and the directory is cleaned of any
   modified, new, or deleted files, leaving the repo in a clean state.

$CAU Alt-Shift-Reset$OFF Reset to an earlier commit in this session$OFF
   Presents a list of the backported commits to this point. Choosing one
   of those commits resets the downstream head to where the corresponding
   upstream commit was backported

$MNU q$OFF Quit this tool

$MNU h$OFF Help

$MNU${UND}Options Menu$OFF

$MNU u$OFF Upstream Status${OFF}, e.g. v6.7, will be entered into commit logs
$MNU j$OFF JIRA Link$OFF will be entered into commit logs
$MNU j$OFF CVE$OFF will be entered into commit logs
$MNU b$OFF Brew of build info$OFF will be entered into commit logs
$MNU t$OFF Test information$OFF will be entered into commit logs
$MNU p$OFF Patch subject prefix$OFF used in patch series creation
$MNU d$OFF Patch directory$OFF to be used to receive the patch series
$MNU B$OFF Backport mode$INF
   Selecting this option makes the following menu appear.

$MNU   Which backport mode do you want to use?
$MNU       1.$OFF git cherry-pick$MNU
$MNU       2.$OFF git apply --reject$MNU
$MNU       3.$OFF git apply with 3-way merge$MNU
$MNU       4.$OFF patch with reject files$MNU
$MNU       5.$OFF patch --merge, use conflict markers instead of rej files$MNU
$MNU Please enter a number between 1 and 5:

$MNU c$OFF Change Terminal colors$OFF for light or dark terminal backgrounds
$MNU q$OFF Quit to Main Menu

Commits may be entered one at a time or from a Backport Commits file
most easily created using the mkbackportlog tool in this suite.

You can edit the resulting file to put a leading # on the upstream
commits that you want to skip over.

Commit logs are automatically generated.

The user can type control-c at anytime to exit the tool, and a best
effort will be made to assure the user tree is left in a coherent
state.

Environmental variables and options are persistent across invocations
of gort.

This tool runs from the command line with the commands listed below.
In command line mode, it can be used to backport single commits at
a time or automate backporting from a list of upstream commits
created with the mkbackportlog tool in this patchtools suite.

$MNU abort$OFF     - abort the current backport, restore head and index
             to previous successful backported commit.
$MNU branch$OFF    - select a different downstream git branch
$MNU commit [1]$OFF- commit changes after conflict resolution and create commit log
             The optional '1' will return to the command line after the
             commit, otherwise the gort menu will be presented.
$MNU help$OFF      - display this help
$MNU history$OFF   - show commits so far this session
$MNU new$OFF       - start a new session
$MNU nit$OFF       - select the hunks you wish to backport from the upstream commit
             Available in cherry-pick mode only
$MNU pick <h>$OFF  - backport one hash specified by <h>
$MNU reset$OFF     - choose from a list of commits to reset to
$MNU run$OFF       - run the backport automation
$MNU select$OFF    - select the next upstream has to backport from a list
$MNU setup$OFF     - run the gort menu to setup the runtime environment
             This is easier and simpler than having a different command
             for every parameter.
$MNU status$OFF    - show the gort session status and git status
$MNU version$OFF   - show this version of the gort tool

$MNU${UND}Resolving Conflicts$OFF

   A typical conflict message looks like this.
____________________________________________________________________________

$INF    Upstream Backports File  :$STA /work/c10s/backports/101/ipmi/backport.log
$INF                               Commits backported: 2 Commits remaining: 6
$INF    Last backported commit   :$STA 7868b3a94045 char:ipmi: Fix the wrong format specifier
$CAU    Conflicting commit$INF       :$STA e70140ba0d2b Get rid of 'remove_new' relic from
$INF    Current upstream dir     :$STA /work/upstream/kernel
$INF    Current downstream branch:$STA test
$INF    Current downstream head  :$STA dc6818601a87 char:ipmi: Fix the wrong format specifier
$INF    Original downstream head :$STA 53edcb1a920a [redhat] kernel-6.12.0-75.el10

$CAU${UND}There are conflicts$OFF

${CAU}The offending patch is in:
${STA}/work/c10s/backports/101/ipmi/0001-Get-rid-of-remove_new-relic-from.patch$OFF
-------------------------------------------------------------------------
${CAU}grep the Patch Log for details:$OFF
$STA/work/c10s/backports/101/ipmi/patch.log$OFF
---------------------------------------
${INF}Type ${CAU}gort abort$INF at the command line after revising the offending patch but$OFF
${INF}before applying it.$OFF
-------------------
${INF}After fixing the conflicts, you can reenter gort with the following commands.
${STA}gort commit$INF   : if you have fixed the conflicts and want the script to stage
$INF                the commit and create the commit log for you.
${STA}gort continue$INF : if you have fixed the conflicts and made the commit externally
$INF                and wish to continue with the next backport commit.
____________________________________________________________________________

  Grep for errors and failed merges in the ${CAU}Patch Log$OFF identified in the
  conflict message as shown above. The file name will be$MNU patch.log$OFF, but it
  will be in the work directory you enter when you start a New Session or
  change it with the$MNU w$OFF hotkey in the Main Menu.

  ${MNU}patchpal$OFF does not leave a log, however it does provide an AI generated
  conflict resolution. You have the option of accepting it or invoking an
  editor of your choice from within patchpal to resolve the conflict. From
  within your editor, you can issue CLI commands to do any additional git
  work.

  ${MNU}cherry-pick$OFF will leave$INF <<<<<<<$OFF and$INF >>>>>>>$OFF conflict
    markers around the conflicts in conflicted files.
  ${MNU}  grep -ni 'conflict' <${CAU}Patch Log$MNU>$OFF
    Identifies the files having conflicts.

  ${MNU}git apply --reject$OFF
    The patch log will identify the files that have conflicts with the
    following grep command.
  ${MNU}  grep -ni 'error' <${CAU}Patch Log$MNU>$OFF
    Additionally, .rej files will be available for examination to help
    resolve the conflict.

  ${MNU}git apply --3way$OFF leaves leave$INF <<<<<<<$OFF and$INF >>>>>>>$OFF conflict
    markers around the conflicts in files that have them.
    To see which files have conflicts, type...
  ${MNU}  grep -ni 'error' <${CAU}Patch Log$MNU>$OFF

  ${MNU}patch$OFF will leave .rej files in the directories of the conflicted
    files. A patch.log file will be left in the user work directory. It
    will be explicitly identified by the conflict message.$STA
  ${MNU}  grep -n -i 'fail' <${CAU}Patch Log$MNU>$OFF
    Finds the conflicted files.
    patch will leave .rej files in the home directories of the conflicted
    files to help resolve conflicts.

  ${MNU}patch --merge$OFF also creates a patch.log file.
  ${MNU}  grep -n 'NOT MERGED' <${CAU}Patch Log$MNU>$OFF to find the conflicted files.
    The conflicted files will have $INF <<<<<<<$OFF and$INF >>>>>>>$OFF markers
    around the conflicts.

  In all cases, new files should be added with$INF git add$OFF if they are required
  by the backport, and deleted files should be removed with$INF git rm$OFF.

  Typically, when an upstream commit modifies and/or adds files outside
  the scope of your backport, you should first edit the$INF offending$OFF patch
  shown in the gort status to modify, add, or delete only those files
  within the scope of your backport. You can also edit to resolve any
  other conflicts introduced by the patch.

  Once you have the patch edited, you can issue the following commands
  before actually applying the edited patch.
   $MNU gort abort     $OFF# clears the internal gort staging
   $MNU git clean -df  $OFF# removes untracked files
   $MNU git --restore .$OFF# un-stages any staged commits
   $MNU git checkout . $OFF# clears all files to their pre-patched state
   $OFF
  At this point, you can apply your patch using your preferred methodology
  and return to$CAU gort$OFF to continue processing,
  e.g.
   $MNU git apply <path to your modified patch>$OFF
   $MNU gort commit

  ${CAU}gort$OFF will commit the newly applied patch and insert a ${MNU}Conflicts:$OFF
  stanza in the commit message. The vim editor will be invoked for you to
  edit the ${MNU}Conflicts:$OFF stanza in the commit log. When you exit the editor, you
  will be given another chance to edit. If you you're done editing the
  commit log, press "${MNU}n$OFF", and$CAU gort$OFF will return to its main menu.

  From there, you can press "${MNU}r$OFF" to continue with the$CAU gort$OFF backport.

\0
EOF
)
