#!/bin/bash
#
# repltext
#

[ -n "$MYDIR" ] || {
	declare MYDIR=
	MYDIR="$(dirname "$(readlink -f "$0")")"
}

declare usagestr="$(
cat <<EOF

$(basename "$0")
\0
EOF
)"

#** usage: print info and instructions to screen
#
# Global
# 	usagestr
#*
usage() {
	echo -e "$usagestr"
}

#** control_c: control-c trap
#
# Global
#   CTLC_EXIT - bash environment variable
#*
control_c() {
	echo -e "\nCtrl-c detected\nCleaning up and exiting."
	exit $CTLC_EXIT
}

#** exitme
#
# Arguments
#   $1 - exit code
#   $2 - optional message
#*
exitme() {
	local -i code="$1"
	local msg="$2"

	((code == 0)) && exit "$code"
	echo -e "$msg"
	usage
	exit "$code"
}

#** main
#*
main() {
	local oldtext
	local newtext
	local tmp_file

	# Trap for control-c
	trap control_c SIGINT

	# Check for at least three arguments: old_text, new_text, and one file.
	if [ "$#" -lt 3 ]; then
		echo "Usage: $0 \"old_text\" \"new_text\" [file1] [file2] [...]"
		echo "	   The file list can be generated by a pattern (e.g., *.txt)."
		exit 1
	fi

	# Assign the first two arguments to variables.
	oldtext="$1"
	newtext="$2"

	# Remove the first two arguments, leaving only the file list in "$@".
	shift 2

	echo "Replacing '$oldtext' with '$newtext'..."

	# Loop through the remaining arguments, which are the files to process.
	tmp_file=$(mktemp)
	for file in "$@"; do
		# Init the tmp_file
		> $tmp_file

		# Check if the argument is a real, regular file before processing.
		if [ -f "$file" ]; then
			echo "Processing '$file'..."
			while IFS= read -r line; do
				printf '%s\n' "${line//"$oldtext"/"$newtext"}" >> "$tmp_file"
			done < "$file"
			mv "$tmp_file" "$file"
		else
			echo "Warning: '$file' is not a regular file. Skipping."
		fi
	done
	rm -f $tmp_file

	exitme 0
}

main "$@"
