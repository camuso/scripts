#!/bin/bash
#
# commitcmp
#

[ "$MYDIR" ] || declare MYDIR=$(dirname $(which $(basename $0)))
[ "$MYLIB" ] || declare MYLIB=$MYDIR/lib

[ "$ui_loaded" ]            || source $MYLIB/ui.source
[ "$configmanager_loaded" ] || source $MYLIB/config-manager.source

# Other exit codes
declare -i EXIT_OK=0
declare -i EXIT_INVARG=1
declare -i EXIT_INVFIL=2
declare -i EXIT_INVDIR=3
declare -i EXIT_DISFIL=4	# directory name is a file
declare -i EXIT_NOOUTD=5	# directory name is empty

declare -a exitmsgary=(
""
"Invalid number of arguments."
" is an invalid filename."
" is an invalid directory name."
" is a file, not a directory."
"You did not provide an output directory path:$MNU -o <outdir>$OFF"
)

exitme() {
	local exitval=$1
	local strarg=""
	local exitmsg

	if ([ $exitval -ne $EXIT_OK ] && [ $exitval -ne $CTLC_EXIT ]); then
		[ $# -eq 2 ] && strarg=$2
		[ ${#exitmsgary[@]} -gt $exitval ] \
			&& exitmsg="${exitmsgary[$exitval]}"

		echo -e "$WRN$strarg$exitmsg$OFF"

		[ $exitval -ne 0 ] && echo -e \
			"${INF}Type$MNU commitcmp -h$INF for help.$OFF"
	fi

	exit $exitval
}

# run if user hits control-c
#
control_c()
{
	echo -en "
	${WRN}Ctrl-c detected$INF
Cleaning up and exiting.$OFF
"
	exitme $CTLC_EXIT
}

declare -i optcount=0
declare uplog="upstream.log"
declare dnlog="downstream.log"
declare chlog="backport.log"
declare outdir=
declare updir=
declare upcmt=
declare dncmt=
declare upbr=
declare dnbr=
declare subsys=
declare searchstr=
declare ssfile=

usage() {
	local usagestr=$(
cat <<EOF
$MNU
$(basename $0) -ud updir -uc upcmt -dc dncmt -o outdir [-S] [sybsys]
$INF
Uses scripts ${STA}gitnice$INF and ${STA}extup$INF to create a list of
commits to backport. Commits that have already been backported will have
a leading # to effectively comment them out to processing scripts, like
git-backport.
This must be run in the downstream repo directory, e.g. the one for RHEL-9.

Creates the following files in the <outdir>.
  $STA$uplog$INF   - contains the upstream commits since <upcmt>
  $STA$dnlog$INF - contains the downstream commits since <dncmt>
  $STA$chlog$INF   - contains the upstream commits that have not yeat been
                   backported downstream.
  Optionally, if a search string was provided with the$STA -S$INF option, another
  $STA$chlog$INF file in the same directory but with the first field in the search
  string prepended to its name.
$MNU
Example:$STA
  $(basename $0) \\\

        -ud /work/upstream/kernel \\\

        -uc v5.14 \\\

        -dc kernel-5.14.0-87.el9 \\\

        -ss drivers/hid/intel-ish-hid \\\

        -ss drivers/platform \\\

        -f [optional] discrete filename, -f for each file \\\

        -o ../backport/9.1/ish/ \\\

        -S "eclite" \\\

$MNU
Creates $STA$uplog$INF, $STA$dnlog$INF, $STA$chlog$INF, and
        ${STA}msg_handler-$chlog$INF in ${STA}drivers/char/ipmi/$MNU$UND
Options:$OFF$MNU
  -h$INF         - this help text$MNU
  -ud ${INF}updir  - directory with the upstream repo$MNU
  -uc ${INF}upcmt  - starting upstream commit$MNU
  -dc ${INF}dncmt  - starting downstream commit$MNU
  -ss ${INF}sybsys - a subsystem, one -ss option for each subsystem.$MNU
  -S  ${INF}string - OPTIONAL: creates a second $STA$chlog$INF file with the
               first field of the string prepended to its name.$MNU
  -o  ${INF}outdir - Directory for ouput files.
               Upstream file will be named $STA$uplog$INF
               Downstrearm file will be named $STA$dnlog$INF
               Backport file will be named $STA$chlog$INF
\0
EOF
)
	echo -en "$usagestr"
	exitme 0
}

chkdir() {
	local stat=0

	ui_chkdir "$1"
	stat=$?

	case $stat in
		1 ) exitme $EXIT_NOOUTD
		    ;;
		2 ) exitme $EXIT_DISFIL "$1"
		    ;;
		3 ) ;&
		4 ) exitme $EXIT_INVDIR "$1"
	esac
}

# parseops() - parse the input options
#
# Needed multicharacter optionis, but didn't want to use longopts.
#
# Inputs: $@, the whole command line
#
# Globals:
# 	optcount
# 	upcmt
# 	dncmt
# 	usagestr
# 	searchstr
# 	subsys
# 	ssfile
#
parseops() {
	local arg=
	local opt=

	for arg in $@; do
	    if [ ${arg:0:1} == '-' ]; then
		opt="${arg:1}"

		case "$opt" in
		    "help" ) ;&
		    h  ) usage
			 let ++optcount
			 ;;
		    ud ) shift
			 updir=$(realpath "$1")
			 shift
		         optcount=$((optcount + 2))
			 ;;
		    uc ) shift
			 upcmt="$1"
			 shift
			 optcount=$((optcount + 2))
			 ;;
		    dc ) shift
			 dncmt="$1"
			 shift
			 optcount=$((optcount + 2))
			 ;;
		    S  ) shift
			 searchstr="$1"
			 shift
			 optcount=$((optcount + 2))
			 ;;
		    o  ) shift
			 chkdir "$1"
			 outdir=$(realpath "$1")
			 shift
			 optcount=$((optcount + 2))
			 ;;
		    ss ) shift
			 subsys="$subsys $1 "
			 shift
			 optcount=$((optcount + 2))
			 ;;
		    f  ) shift
			 ssfile="$ssfile $1"
			 shift
			 optcount=$((optcount + 2))
			 ;;
		    *  ) echo "unrecognized option -$1"
			 echo -e "$usagestr"
			 exit 127
		esac

	    fi
	done
optcount=$((optcount + 2))
}

# compare_strings() - compare strings
#    Compare the commits from the upstream and downstream commit logs
#    to identify those the ones that have already been backported.
#    Output all commit lines to the cherp.log file, marking the ones
#    that werre already backported with a leading #
#
# GLOBALS
#	chlog - output commits file
#	uplog - upstream commits file
#	dnlog - downstream commits file
#	outdir - directory for all the commit log files
#
compare_strings() {
	local uppath="$outdir/$uplog"
	local dnpath="$outdir/$dnlog"
	local chpath="$outdir/$chlog"
	local savedifs="$IFS"
	local upstr=
	local rhstr=
	local up	# one line from the upstream log
	local rh	# one line from the rhel log
	local tmp
	local b_match=false
	local j		# upstr index
	local k		# rhstr index

	# Instead of reading from the file, which limmits our debug
	# capabilites, create an array out of the lines in the file.
	# Set IFS to newline and then restore it after createing the
	# string arrays.
	#
	IFS=$'\n'
	upstr=($(< $uppath))
	rhstr=($(< $dnpath))
	IFS="$savedifs"

	# Zero the backport log file.
	> $chpath

	for ((j = 0; j < ${#upstr[@]}; ++j)); do
		up=${upstr[j]}
		upcmt="${up:0:9}"

		for ((k = 0; k < ${#rhstr[@]}; ++k)); do
			tmp=$(echo "${rhstr[k]}" | cut -d' ' -f2)
			rhcmt="${tmp:0:9}"

			[[ "$rhcmt" == "$upcmt" ]] && {
				b_match=true
				break
			}
		done

		$b_match && echo "# $up" >> $chpath || echo "$up" >> $chpath
		$b_match && echo "# $up" || echo "$up"
		b_match=false
	done
}

set_cfg_item() {
	cfg_write_key $1 $2
}

get_cfg_item() {
	cfg_read_key $1
}

set_colors() {
	local ans
	while :; do
		ui_use_colors
		background=$terminal_background
		set_cfg_item background $terminal_background
		echo -en "${INF}You chose "

		case $terminal_background in
			1) echo -e "${STA}light$INF background$OFF\n";;
			2) echo -e "${STA}dark$INF background$OFF\n";;
		esac

		loop_yn_ro "Is that what you want? (y/n) : "
		[ $? -eq 0 ] && return || continue
	done
}

init_env() {
	b_color=true	# from lib/ui.source

	local b_tf

	MYDATA=$(realpath ./.data)
	[ -d "$MYDATA" ] || mkdir -p $MYDATA

	configfile="$MYDATA/cmpcommit.conf"
	cfgtemplate="$MYLIB/cmpcommit.conf"
	[ -f "$configfile" ] || cp $cfgtemplate $configfile

	cfg_set_template "$cfgtemplate"
	cfg_set_configfile "$configfile"
	cfg_init

	background=$(get_cfg_item background)

	# If color hasn't already been set up, then query the user for terminal
	# background color and init the color engine.
	# Else just init the terminal_background variable from the config global.
	#
	if [ -z "$background" ] || (( background < 1 || background > 2 )); then
		set_colors
	else
		terminal_background=$background
		ui_set_colors
	fi

	set_cfg_item background $background
}

check_log() {
	log="$1"

	echo -e "${INF}Create : $STA$log$OFF"

	[ -f $log ] && {
		echo -en "$WRN$log exists.$OFF "
		echo -e "${INF}It will be overwritten if you continue.$OFF"
	}
}

get_mainbranch() {
	local line=
	local pline=
	local ary=()

	while read line; do
		[[ $line == *"remote = origin"* ]] && {
			break
		} || {
			pline="$line"
		}
	done < .git/config

	ui_strtok "$pline" '"' ary
	echo ${ary[1]}
}

seek_str() {
	local prepend=$(echo "$searchstr" | cut -d' ' -f1)
	local outfile="$outdir/$prepend-$chlog"
	local commit

	cd $updir
	echo -e "\n${STA}Creating $outfile$INF"
	> $outfile
	while read line; do
		[ "${line:0:1}" == "#" ] && continue
		commit=$(echo "$line" | cut -d' ' -f1)
		git show $commit | grep -q -m1 "$searchstr"
		[ $? -eq 0 ] || continue
		echo "$line" | tee -a $outfile
	done < $outdir/$chlog
	cd - > /dev/null 2>&1
}

main() {
	local mainbranch

	init_env

        # Trap for control-c
        trap control_c SIGINT

	[ -f .git/config ] || {
		echo -e "${WRN}Not a repo directory!"
		echo -e "${INF}You must be in a repo directory."
		exit 1
	}
	mainbranch=$(get_mainbranch)

	parseops $@

	[ -n "$outdir" ] || exitme $EXIT_NOOUTD
	[ $optcount -lt 8 ] && exitme $EXIT_INVARG

	shift $optcount
echo "outdir: $outdir"

	echo

	check_log "$outdir/$uplog"
	check_log "$outdir/$dnlog"
	check_log "$outdir/$chlog"

	echo -e "${INF}Upstream repo     : $STA$updir origin/master $OFF"
	echo -e "${INF}Downstream branch : $STA$mainbranch$INF"
	[ -n "$subsys" ] && echo -e "${INF}subsys: $STA$subsys$OFF"
	[ -n "$ssfile" ] && echo -e "${INF}ssfile: $STA$ssfile$OFF"

	echo
	echo -n "Press any key to proceed or CTRL-C to exit..."
	read -n1

	echo -e $STA
	cd $updir
	pwd
	echo -e "${STA}Creating $outdir/$uplog$INF"

	gitnice -r -c -d --no-merges "$upcmt..HEAD" "$subsys" "$ssfile" 2>&1 | tee $outdir/$uplog
	echo

	echo -e $STA
	cd -
	echo -e "${STA}Creating $outdir/$dnlog$INF"
	extup -r -n -u $updir "$dncmt..HEAD" "$subsys" 2>&1 | tee $outdir/$dnlog

	echo
	echo -e "${STA}Creating $outdir/$chlog$INF"
	compare_strings

	[ -n "$searchstr" ] && seek_str
	echo -e $OFF

	exitme $EXIT_OK
}

main $@

exitme $EXIT_OK

