#!/bin/bash
#
# Create an empty bash script with placeholders for help text and
# a usage function
#

declare MYDIR=
declare MYLIB=
declare usagestr=

MYDIR="$(dirname "$(which "$(basename "$0")")")"
MYLIB="$MYDIR"/lib

source "$MYLIB"/ui.source

declare b_opts=false
declare b_args=false
declare b_answer=false
declare b_source=false
declare b_cmds=false
declare b_ui=false
declare b_color=false
declare opts=
declare args=
declare optstr=
declare cmds=
declare -i argcount=0
declare -i optcount=0
declare -i index
declare -i width
declare -i widest
declare -i argc=0
declare spacer="  "
declare ofile
declare b_cfgmgr=false
declare b_nolib=false

usagestr="$(
cat <<EOF
$(basename $0) [ options ] <bashscript>

Create an empty bash script with placeholders for help text and
a usage function

OPTIONS:

  -c Include config-manager. This will also include the ui source file.

  -u Include ui functions, see lib/ui.source or run "docscript lib/ui.source"

  -k include colors, includes lib/ui.source

  -n no library functions. If this flag is present, no library functions
     will be included, regardless of any other flags.

  -o options, a quote enclosed string containing a list of space separated
     option flags with optional corresponding arguments.

     Example: -o "n:number f:file d:directory x h" -a "arg1 arg2"

     Creates options for -n number,  -f file, -d directory, -x and -h
     with no arguments.

  -a arguments, double quote enclosed string of arguments that follow
     the options for the new script being created.
     If the number of arguments following the options is not exactly
     this number, then the newly created script will print its usage
     message and exit.

     Example: -a "arg1 arg2"

  -C commands, a quote enclosed string of command verbs for a command
     oriented script. A command oriented script will take commands
     instead of arguments. The difference is that commands invoke a
     specific response from the script, while arguments provide input
     for the script to act upon.
     The difference is subtle, but important.

  -s source only for a library of functions
\0
EOF
)"

usage() {
	echo -e "$usagestr"
}

#* exit_me() - exit with messages and help
#
# Globals:
#   ui_err_* indexes into err msg array declared in lib/ui.source
#
# Arguments:
#   $1 - index into the err msg array
#   $2 - optional string to send to ui_print_clierr
#
exit_me() {
	local erridx="$1"

	if (($# == 2)); then
		local errstr="$2"
		ui_print_climsg "$erridx" "$errstr"
	else
		ui_print_climsg "$erridx"
	fi

	usage
	exit "$erridx"
}


test_help() {
	local opt="$1"

	shopt -s nocasematch
	( [ -z "$opt" ] || [[ $opt =~ (\bh\b|^help) ]] ) && exit_me $ui_exit_ok
	shopt -u nocasematch
}

# print_pad() - echo n chars to the screen
#
# Arguments
#   $1 - number of chars
#   $2 - the char
#   $3 - send "crlf" to get crlf at end of string
#
print_pad() {
	local -i num=$1
	local char="$2"
	local crlf="$3"
	local tstr=

	((num <= 0)) && return
	[ -n "$crlf" ] && crlf="\n" || crlf=""
	tstr=$(printf "%*c%s" $num "$char" "$crlf")
	echo -en "${tstr// /"$char"}"
}

# print_usagearts - usage artifacts args, opts, cmds into usagestr
#
# Globals
#    ofile the output file
#
# Arguments
#    $1 - cmd, arg, or opt list as a string
#    $2 - name of usage artifact
#
print_usagearts() {
	local arts="$1"		# string of artifacts
	local artname="$2"	# name of the artifacts
	local -i artwid=0
	local -i padwid=0

	for art in $arts; do
		((${#art} > artwid)) && artwid=${#art}
	done

	echo -e "$artname">> "$ofile"
	print_pad ${#artname} "-" "crlf" >> "$ofile"

	for art in $arts; do
		echo -en "   $art" >> "$ofile"
		padwid=$((artwid - ${#art}))
		print_pad $padwid " " >> "$ofile"
		echo " : " >> "$ofile"
	done
	echo >> "$ofile"
}

#############################
# Start execution
#############################

declare arg=
declare opt=

test_help "$1"

if [[ $@ == *"-C"* && $@ == *"-a"* ]]; then
  echo "You cannot have both the -a and -C options."
  echo "This is either a command script or a script that takes args."
  echo "it cannot be both"
  exit "$ui_err_invargc"
fi

for arg in "$@"; do

    if [ "${arg:0:1}" == '-' ]; then
	opt="${arg:1}"
	shift

	case "$opt" in
	o ) opts="$1"
	    b_opts=true
	    shift
	    ;;
	a ) [ -z args ] && args="$1" || args="$args $1"
	    b_args=true
	    shift
	    ;;
	C ) [ -z "$cmds" ] && cmds="$1" || cmds="$cmds $1"
	    b_cmds=true
	    shift
	    ;;
	k ) b_color=true
	    b_ui=true
	    ;;
	c ) b_cfgmgr=true
	    ;;
	u ) b_ui=true
	    ;;
	s ) b_source=true
	    ;;
	n ) b_nolib=true
	    ;;
	* ) echo "unrecognized option"
	    echo -e "$usagestr"
	    exit 127
	esac
    fi
done

ofile=$1

[ -n "$ofile" ] || exit_me "$ui_err_missingarg"

if [ -f "$ofile" ]; then
# set -x
	echo
	echo "File: $ofile already exists!"
	loop_yn "Do you want to overwrite?" || exit 1
	echo "Overwriting file: $ofile"
# set +x
fi

> "$ofile"

$b_opts && optstr="[options]"

echo -en '#!/bin/bash
#
# '$ofile'
#
' >> "$ofile"

$b_source && echo -en '
'$ofile'_loaded=true
' >> "$ofile"

echo -en '
[ -n "$MYDIR" ] || {
	declare MYDIR=
	MYDIR="$(dirname "$(which "$(basename "$0")")")"
}
' >> "$ofile"

$b_ui || $b_cfgmgr && echo -en '
[ -n "$MYLIB" ] || {
	declare MYLIB=
	MYLIB="${MYDIR}/lib"
}
' >> "$ofile"

$b_cfgmgr && echo -en '
[ -n "$MYDATA" ] || {
	declare MYDATA=
	MYDATA="${PWD}/.data"
}
[ -d "$MYDATA" ] || mkdir -p "$MYDATA"
' >> "$ofile"

$b_ui && echo -en '
[ "$ui_loaded" ] || source "${MYLIB}/ui.source"
' >> "$ofile"

$b_cfgmgr && echo -en '
[ "$cfgmgr_loaded" ] || source "${MYLIB}/cfgmgr.source"

#** Configuration (sticky) variables
#*
declare configfile="${MYDATA}/$(basename "$0").conf"
declare -A configtable
configtable[var]=	# Rename and add new conf vars as needed
' >> "$ofile"

$b_color && echo -e '
declare -i termbkgnd=' >> "$ofile"

$b_args && {
	argc=0
	for arg in $args; do
		echo "declare ${arg}=" >> "$ofile"
		let ++argc
	done
	echo "declare -a argv=()" >> "$ofile"
	echo "declare -i argc=$argc" >> "$ofile"
}

$b_cmd && {
	for cmd in $cmds; do
		echo "declare ${cmd}=" >> "$ofile"
		let ++argc
	done
}

echo -en '
declare usagestr="$(
cat <<EOF

$(basename "$0")' >> "$ofile"

$b_opts && echo -en ' [options]' >> "$ofile"
$b_args && echo -e " $args\n" >> "$ofile"

$b_args && print_usagearts "$args" "Arguments"
$b_opts && print_usagearts "$opts" "Options"
$b_cmds && print_usagearts "$cmds" "Commands"

echo -en '\\0
EOF
)"

#** usage: print info and instructions to screen
#
# Global
# 	usagestr
#*
usage() {
	echo -e "$usagestr"
}

#** control_c: control-c trap
#
# Global
#   CTLC_EXIT - bash environment variable
#*
control_c() {
	echo -e "\\nCtrl-c detected\\nCleaning up and exiting."
' >> "$ofile"

$b_cfgmgr && echo -e "\tcfg_write_cfgfile configtable" >> "$ofile"

echo -en '	exit $CTLC_EXIT
}
' >> "$ofile"

if $b_cfgmgr; then echo -en '
#** cfg_write - write the configtable into the configfile
#
# See lib/cfgmgr.source for details
#
# Global
#   configtable
#   configfile
#*
cfg_write() {
	cfg_write_cfgfile configtable
}

#** cfg_read - read the configfile into the configtable
#
# see lib/cfgmgr.cource for details
#
# Global
#   configtable
#   configfile
#*
cfg_read() {
	cfg_read_cfgfile configtable
}
' >> "$ofile"
fi

# There will be two different exitme functions. One for if lib/ui
# is included, and one if not.
# Additionally, each of the exitme functions will have to add
# cfg_write if b_cfgmgr is true.

# For the lib/ui case ...
if $b_ui; then
	echo -en '
#** exitme
#
# Global
#   ui exit codes - see lib/ui.source
#   ui_err_msg array
' >> "$ofile"

	echo -en '#
# Arguments
#   $1 - exit code
#   $2 - optional string to precede cli message
#*
exitme() {
	local -i code=$1
	local str="$2"
' >> "$ofile"
	$b_cfgmgr && echo -e "\n\tcfg_write" >> "$ofile" || echo >> "$ofile"
	echo -en '	((code == ui_exit_ok)) && exit "$code"
	ui_print_climsg "$code" "$str"
	usage
	exit "$code"
}
'>> "$ofile"

# For the case without lib/ui
else echo -en '
#** exitme
#' >> "$ofile"

	if $b_cfgmgr; then echo -en '
# Global
#   configfile - these are implicit in the call to cfg_write
#   configtable
#' >> "$ofile"
	fi

	echo -en '
# Arguments
#   $1 - exit code
#   $2 - optional message
#*
exitme() {
	local -i code="$1"
	local msg="$2"
' >> "$ofile"
	$b_cfgmgr && echo -e "\tcfg_write" >> "$ofile"
	echo -en '
	((code == 0)) && exit "$code"
	echo -e "$msg"
	usage
	exit "$code"
}
'>> "$ofile"
fi

$b_color || $b_cfgmgr && echo -en '
#** init
#
# Global
' >> "$ofile"

$b_cfgmgr && echo -e "#   configtable" >> "$ofile"

$b_color || $b_cfgmgr && echo -en '#*
init() {
' >> "$ofile"

$b_color && echo -e "\tui_setbg termbkgnd" >> "$ofile"

$b_cfgmgr && echo -e "\t"'cfg_start configtable "$configfile"' >> "$ofile"

$b_color || $b_cfgmgr && echo -en '}
' >> "$ofile"

($b_args || $b_opts) && echo -en '
#** check_arg
#
# Global
#   argv - array containing command line arguments
#*
check_arg() {
        local arg="$1"

        # If 1st char is a hyphen, then invalid switch
        [ "${arg:0:1}" == "-" ] && return 1

        # Otherwise, add the arg to the argary
        argv+=("$arg")
        return 0
}

#** parseopts
#
# Global
#   argv
#   argc
#*
parseopts() {
	while (($# > 0)); do
	    case "$1" in
' >> "$ofile"

if ($b_args || $b_opts); then
	declare var
	declare -a optary=()

	for opt in $opts; do
		[ "$opt" == "h" ] && continue
		var=
		optary=()

		# If there's a colon in the opt string, then it has a value
		# associated with it.
		[[ "$opt" == *:* ]] && {
			IFS=":" read -ra optary <<< "$opt"
			opt="${optary[0]}"
			var="${optary[1]}"
		}
		echo -en "\t\t-$opt ) " >> "$ofile"

		if [ -n "$var" ]; then
			echo -e "shift" >> "$ofile"
			echo -e "\t\t     var"'="$1"' >> "$ofile"
		else
			echo >> "$ofile"
		fi
		echo -e "\t\t     ;;" >> "$ofile"
	done
	echo -en \
'		-h | --help )
		     echo -e "$usagestr"
		     exit 0
		     ;;
		* )  argv+=("$1")
		     ;;
	    esac
	    shift
	done
}

' >> "$ofile"
else
	echo >> "$ofile"
fi

echo -en '#** main
#*
main() {
        # Trap for control-c
        trap control_c SIGINT
' >> "$ofile"

$b_cfgmgr || $b_color && echo -e "\n\tinit" >> "$ofile"
($b_args || $b_opts) && echo -e "\n\tparseopts "'"$@"' >> "$ofile"

$b_args && {
	declare -a argary=()
	declare -i idx

	IFS=" " read -ra argary <<< "$args"
	for ((idx = 0; idx < ${#argary[@]}; idx++)); do
		echo -e "\t${argary[idx]}="'"${argv['"$idx"']}"' >> "$ofile"
	done
	echo >> "$ofile"
} || echo >> "$ofile"


if $b_ui; then
	echo -e "\texitme "'$ui_exit_ok' >> "$ofile"
else
	echo -e "\texitme 0" >> "$ofile"
fi

echo -en '}

main "$@"
' >> "$ofile"

chmod +x "$ofile"

