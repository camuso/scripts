#!/usr/bin/env bash
set -euo pipefail

# --- helpers ---
log() {
    echo "[$(date +'%F %T')] $*"
}

hr() {
    echo "------------------------------------------------------------"
}

# --- capability detection ---
detect_capabilities() {
    local pqosd
    pqosd="$(pqos -I os -d 2>&1 || true)"

    # monitoring
    if echo "$pqosd" | grep -q "CMT"; then
        has_cmt="yes"
    else
        has_cmt="no"
    fi
    if echo "$pqosd" | grep -q "MBM"; then
        has_mbm="yes"
    else
        has_mbm="no"
    fi
    if echo "$pqosd" | grep -q "PMU events:"; then
        has_pmu="yes"
    else
        has_pmu="no"
    fi

    # l3 cat
    if echo "$pqosd" | grep -q "L3 Cache Allocation (CAT)"; then
        has_l3cat="yes"
    else
        has_l3cat="no"
    fi

    # mba
    if echo "$pqosd" | grep -q "Memory Bandwidth Allocation (MBA)"; then
        has_mba="yes"
        mba_num_cos="$(echo "$pqosd" | awk '/Memory Bandwidth Allocation \(MBA\)/,/^$/ {if ($0 ~ /Num COS:/) {print $NF}}' | tail -n1)"
        mba_ctrl="$(echo "$pqosd" | awk '/Memory Bandwidth Allocation \(MBA\)/,/^$/ {if ($0 ~ /CTRL:/) {print $NF}}' | tail -n1)"
    else
        has_mba="no"
        mba_num_cos="0"
        mba_ctrl="unknown"
    fi
}

# --- capability test ---
test_capabilities() {
    hr
    log "Testing kernel exposure of capabilities..."
    if [ "$has_cmt" = "yes" ] || [ "$has_mbm" = "yes" ]; then
        log "Monitoring counters appear supported."
    elif [ "$has_pmu" = "yes" ]; then
        log "PMU fallback monitoring available."
    else
        log "No monitoring capability available."
    fi

    if [ "$has_l3cat" = "yes" ]; then
        log "L3 CAT allocation supported."
    else
        log "L3 CAT not supported."
    fi

    if [ "$has_mba" = "yes" ]; then
        log "MBA supported (Num COS: $mba_num_cos, CTRL: $mba_ctrl)."
    else
        log "MBA not supported."
    fi
}

# --- monitor_rdt ---
monitor_rdt() {
    hr
    log "Running monitor_rdt workload..."

    if [ "$has_cmt" = "yes" ] || [ "$has_mbm" = "yes" ]; then
        pqos -I os -m "all:0" -o monitor.csv &
        local mon_pid=$!
        sleep 1
        dd if=/dev/zero of=/dev/null bs=1M count=256 status=none

        if kill -0 "$mon_pid" 2>/dev/null; then
            kill "$mon_pid" 2>/dev/null || true
            wait "$mon_pid" 2>/dev/null || true
        fi

        log "Monitoring results saved to monitor.csv"

        mon_last=""
        mon_fields=""
        if [ -f monitor.csv ]; then
            mon_last="$(tail -n1 monitor.csv)"
            local header
            header="$(head -n1 monitor.csv)"
            local i=1
            for col in $header; do
                local val
                val="$(echo "$mon_last" | awk -v n=$i '{print $n}')"
                mon_fields="${mon_fields}\"${col}\":\"${val}\","
                i=$((i+1))
            done
            mon_fields="${mon_fields%,}"
        fi
    else
        log "Skipping pqos -m: no RDT monitoring counters available."
        mon_last=""
        mon_fields=""
        return
    fi
}

# --- human-readable summary ---
print_summary() {
    hr
    echo "=== SUMMARY of Intel RDT Support ==="
    if [ "$has_cmt" = "yes" ] || [ "$has_mbm" = "yes" ]; then
        echo "Monitoring (RDT counters): Supported (CMT=$has_cmt, MBM=$has_mbm)"
    elif [ "$has_pmu" = "yes" ]; then
        echo "Monitoring: PMU fallback supported"
    else
        echo "Monitoring: Not supported"
    fi

    echo "L3 Cache Allocation (CAT): $([ "$has_l3cat" = "yes" ] && echo Supported || echo Not supported)"
    if [ "$has_mba" = "yes" ]; then
        echo "Memory Bandwidth Allocation (MBA): Supported (Num COS: $mba_num_cos, CTRL: $mba_ctrl)"
    else
        echo "Memory Bandwidth Allocation (MBA): Not supported"
    fi

    if [ -n "$mon_last" ]; then
        echo "Monitor RDT last sample: $mon_last"
    else
        echo "Monitor RDT: no data"
    fi
}

# --- machine-readable JSON ---
print_json() {
    hr
    echo "=== JSON summary ==="
    cat <<EOF
{
    "monitoring": {
        "cmt": "$has_cmt",
        "mbm": "$has_mbm",
        "pmu": "$has_pmu"
    },
    "l3cat": {
        "present": "$has_l3cat"
    },
    "mba": {
        "present": "$has_mba",
        "num_cos": "$mba_num_cos",
        "ctrl": "$mba_ctrl"
    },
    "monitor_rdt": {
        "status": "skipped"
    }
}
EOF
}

# --- main ---
main() {
    detect_capabilities
    test_capabilities
    monitor_rdt
    print_summary
    print_json
    log "Tests complete."
}

main "$@"
