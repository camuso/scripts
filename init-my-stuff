#!/bin/bash
#
# init-my-stuff 1.0
# set -x

declare -i optcount=0
declare remotename
declare logfile="$HOME/.initmystuff.log"
declare repolist="rcbak hints etcbk misc ipmi"
declare b_pushpriv=false
declare b_gitrepo=true
declare clonestr
declare distro
declare installagent
declare installflags
declare fetched=false
declare majersion=

echo "Installing environment on ..."
hostname
echo

while getopts hpg OPTION; do
    case "$OPTION" in

	h ) optcount=$((optcount+1))
	    ;;
	p ) optcount=$((optcount+1))
	    b_pushpriv=true
	    ;;
	g ) optcount=$((optcount+1))
	    b_gitrepo=false
	    ;;
	* ) echo "unrecognized option -$OPTION"
	    exit 127
    esac
done

shift $optcount
remotename="$1"

# ========================================================================
# To determine whether dnf or yum is the installagent, get the distro and
# version numbers.
# ------------------------------------------------------------------------
#
if [ -f /etc/os-release ]; then
	foo=$(grep -w 'ID' /etc/os-release | cut -d"=" -f2)

	# Strip off the double quote marks
	#
	foo=${foo%\"}
	foo=${foo#\"}

	# distro is the lowercase of the ID we pulled out of /etc/os-release
	#
	distro=$(echo "$foo" | tr '[:upper:]' '[:lower:]')

	# ([ "$distro" == "rhel" ] || [ "$distro" == "fedora" ]) || \
	#	{ echo  "$distro is not Redhat" }

	echo "Distro: $distro"

	if [[ "$distro" == "fedora" ]]; then
		installagent=dnf
		installflags="--allowerasing --best"
	elif [[ "$distro" == "rhel" ]]; then
		# Get the major version and strip off any leading double quotes
		#
		majversion=$(grep -w 'VERSION_ID' /etc/os-release | cut -d= -f2 | cut -d. -f1)
		majversion=${majversion#\"}

		# Determine the install agent based on the major version
		#
		if [ $majversion -lt 8 ]; then
			installagent="yum"
			installflags="--nogpgcheck --skip-broken"
		else
			installagent="dnf"
			installflags="--allowerasing --best"
		fi

	elif [[ "$distro" == "ubuntu" ]]; then
		installagent='apt-get'
	else
		echo "$distro is not a distro supported by this script."
	fi

else
	echo "No /etc/os-release file. Assuming distro is RHEL less than 8."
	distro="rhel"
	installagent="yum"
	installflags="--nogpgcheck --skip-broken"
fi

# ========================================================================
# Can't go any further without rsync and git
# ------------------------------------------------------------------------
#
which rsync
[ $? -eq 0 ] || $installagent install -y rsync

which git
[ $? -eq 0 ] || $installagent install -y git

cd		# make sure we're home
> "$logfile"	# init the log file

# If we're creating a system that will have push privileges to the
# repos, then use ssh access, else use http.
# For ssh access, the user will have to add the ssh key to the github
# account.
#
$b_pushpriv && clonestr="git clone git@github.com:camuso/" \
	    || clonestr="git clone https://github.com/camuso/"

# If we don't have an ssh key, generate it.
#
[ -f $HOME/.ssh/id_rsa ] || \
	ssh-keygen -N "" -f $HOME/.ssh/id_rsa | tee -a "$logfile" 2>&1

echo "*******************************" | tee -a "$logfile"
echo "* Clone or update Env Files   *" | tee -a "$logfile"
echo "*       Version 3.0           *" | tee -a "$logfile"
echo "*******************************" | tee -a "$logfile"
echo

for repo in $repolist; do
	if [ -e $repo ]; then
		if [ -d "$repo"/.git ]; then
			echo "Updating $repo" | tee -a "$logfile" 2>&1
			cd $repo
			git config pull.rebase false
			git pull
			cd -
		else
			echo "Converting directory $repo to git repo" | tee -a "$logfile" 2>&1
			rm -rf $repo
			$clonestr$repo.git $repo
			cd $repo
			git config pull.rebase false
		fi
	else
		echo "Cloning $repo ..." | tee -a "$logfile" 2>&1
		$clonestr$repo.git $repo
	fi
	# chown -R tcamuso.tcamuso $repo
	# chmod -R u+wrx,go+rx,go-w $repo
done
echo -e "---------------" | tee -a "$logfile"

echo "*******************************" >> "$logfile" 2>&1
echo "* Clone or update bin scripts  *" >> "$logfile" 2>&1
echo "*******************************" >> "$logfile" 2>&1
echo

# Update or create the bin directory.
#
if [ -d bin/.git ]; then
	cd bin
	echo "Updating bin repo..." | tee -a "$logfile" 2>&1
	git config pull.rebase false
	git pull
else
	[ -e bin ] && rm -rf bin
	echo "Creating bin repo..."  | tee -a "$logfile" 2>&1
	${clonestr}scripts.git bin
	cd bin
	git config pull.rebase false
fi
cd
echo "Returning to $PWD..."
echo -e "---------------\n" | tee -a "$logfile"


# Copy etc and rc files out of their archive directories into their respective
# real directories, but only if they're newer.
#
echo "************************************************" >> "$logfile" 2>&1
echo "* Copying Env files from Backup Directories    *" >> "$logfile" 2>&1
echo "* but only if they're newer than existing ones *" >> "$logfile" 2>&1
echo "************************************************" >> "$logfile" 2>&1
echo >> "$logfile" 2>&1
echo "rsync contents of rcbak to home directory" | tee -a "$logfile"
rsync -Pvat --cvs-exclude rcbak/ . 2>&1 | tee -a $logfile
echo -e "---------------\n" | tee -a "$logfile"

# Can only do the following if root
#
if [ $(id -u) -eq 0 ]; then
	echo "rsync contents of etcbk to /etc" | tee -a "$logfile"
	rsync -Pvat --cvs-exclude etcbk/ /etc/.| tee -a "$logfile"
	echo -e "---------------\n" | tee -a "$logfile"
fi

echo "************************************************" >> "$logfile" 2>&1
echo >> "$logfile" 2>&1

# If we have a "user" it's because were running remotely, so
# do the remote cleanup.
#
if [ "$remotename" ]; then
	echo "*********************" >> "$logfile" 2>&1
	echo "* Doing Rmote Fixup *" >> "$logfile" 2>&1
	echo "*********************" >> "$logfile" 2>&1
	echo "" >> "$logfile" 2>&1
	bin/fixup-rsync $remotename | tee -a "$logfile"
fi
cd -

echo

# If we are running as root and install has been requested, then install
# the development tools.
#
get_rcmtools()
{
	# if rcm-tools is already installed with the distro, then skip this.
	[ -f /etc/yum.repos.d/rcm-tools.repo ] && return

	echo -n "Installing rcm tools for " | tee -a "$logfile"

	if [[ "$distro" == "fedora" ]]; then
		echo "fedora" | tee -a "$logfile"
		curl -k -L -o /etc/yum.repos.d/rcm-tools.repo \
			http://download.devel.redhat.com/rel-eng/internal/rcm-tools-fedora.repo \
			| tee -a "$logfile"
		return
	fi

	case "$majversion" in
		"6" )   echo "RHEL-6" | tee -a "$logfile"
			curl -k -L -o /etc/yum.repos.d/rcm-tools.repo \
			http://download.devel.redhat.com/rel-eng/RCMTOOLS/rcm-tools-rhel-6-server.repo
			return 0
 			;;
		"7" )	echo "RHEL-7" | tee -a "$logfile"
			curl -k -L -o /etc/yum.repos.d/rcm-tools.repo \
			http://download.devel.redhat.com/rel-eng/RCMTOOLS/rcm-tools-rhel-7-server.repo
			return 0
			;;
		"8" )	echo "RHEL-8" | tee -a "$logfile"
			curl -k -L -o /etc/yum.repos.d/rcm-tools.repo \
			http://download.devel.redhat.com/rel-eng/RCMTOOLS/rcm-tools-rhel-8-baseos.repo
			return 0
			;;
		"9" ) 	echo "RHEL-8 for RHEL-9" | tee -a "$logfile"
			curl -k -L -o /etc/yum.repos.d/rcm-tools.repo \
			http://download.devel.redhat.com/rel-eng/RCMTOOLS/rcm-tools-rhel-8-baseos.repo
			return 0
			;;
	esac

	echo ""
	return 1
}


get_epel() {
	echo -n "Installing EPEL for " | tee -a "$logfile"
	case "$majversion" in
		"6" )   echo "RHEL-6" | tee -a "$logfile"
			yum install -y https://archives.fedoraproject.org/pub/archive/epel/6/x86_64/epel-release-6-8.noarch.rpm
			return 0
 			;;
		"7" )	echo "RHEL-7" | tee -a "$logfile"
			yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
			return 0
			;;
		"8" )	echo "RHEL-8" | tee -a "$logfile"
			yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm
			return 0
			;;
		"9" ) 	echo "RHEL-8 for RHEL-9" | tee -a "$logfile"
			yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm
			return 0
			;;
	esac

	echo | tee -a "$logfile"
	return 1
}

get_certs()
{
	# If rcm tools are already installed, favor them over the downloaded ones.
	#
	local b_rcmsaved=false

	if [ -f /etc/yum.repos.d/rcm-tools.repo ]; then
		mv /etc/yum.repos.d/rcm-tools.repo /etc/yum.repos.d/rcm-tools.repo.save
		b_rcmsaved=true
	fi

	which wget
	[ $? -eq 0 ] || yum install -y wget

	# install the RH certs
	# See: https://docs.engineering.redhat.com/display/RCMDOC/RCM+Tools+Release+Guide#RCMToolsReleaseGuide-Installredhat-internal-cert-installrpm
	#
	~/bin/install-rhit-cert

	$b_rcmsaved && \
		mv /etc/yum.repos.d/rcm-tools.repo.save /etc/yum.repos.d/rcm-tools.repo
}

if [ "$2" == "install" ] && [ "$remotename" == "root" ]; then

	declare arch=$(uname -m)
	declare rcmurl=""
	declare installagent=""

	get_certs
	get_rcmtools

	dnf copr enable -y bmeneguele/rhkernel-devtools

	if [ "$distro" == "fedora" ]; then
		installagent=dnf
		dnf copr enable -y james/centpkg
		dnf install -y fedpkg rhel-packager centpkg-sig
	fi

	if [[ "$distro" == "rhel" ]]; then
		get_epel
		installagent=yum
	fi

	# $installagent groupinstall -y 'X Window System' 'GNOME'

	$installagent group install -y "Development Tools"

	$installagent install --nogpgcheck -y $installflags \
	annobin-annocheck \
	automake \
	annobin \
	annobin-annocheck \
	elfutils-libelf-devel \
	gcc \
	gcc-c++ \
	go \
	bc \
	bind-utils \
	bison \
	brewkoji \
	ca-certificates \
	cmake \
	conserver-client \
	cscope \
	dwarves libdwarves1 \
	elfutils-devel elfutils-libs elfutils-libelf \
	elinks \
	ethtool \
	flex \
	git-email \
	golang \
	hostname \
	ipmitool \
	kmod \
	kmod-libs \
	krb5-workstation krb5-libs \
	lab \
	libdwarf libdwarf-devel \
	lynx \
	make \
	mutt \
	ncurses ncurses-devel \
	net-tools \
	nmap \
	OpenIPMI \
	openssl openssl-devel \
	patch patchutils \
	python-bugzilla-cli \
	rhpkg \
	rpm-build \
	rsync \
	texinfo \
	tpm-tools \
	usbutils \
	vim vim-enhanced vim-filesystem \
	watchdog \
	waiverdb-cli \
	xclip \
	xorg-x11-apps \
	xz \
	zenity \
	2>&1 | tee -a $logfile

	# orphaned packages
	#
	# trousers trousers-devel \
	# koji \
	# http://dl.fedoraproject.org/pub/epel/7/x86_64/q/quilt-0.63-2.el7.noarch.rpm
	# vim-powerline \
	# krb5-auth-dialog \
	# kmodtool \
	# python-bugzilla \
	# git-lab-porcelain \

	mkdir -p /work
	cd /work

	[ -d /work/netperf ] || {
		git clone https://github.com/HewlettPackard/netperf.git 2>&1 | tee -a $logfile
		cd netperf
		./autogen.sh 2>&1 | tee -a $logfile
		./configure 2>&1 | tee -a $logfile
		make 2>&1 | tee -a $logfile
		make install 2>&1 | tee -a $logfile
	}

	# If the caller passed a -g option, it means no git repo,
	# so return to the top directory and exit.
	#
	$b_gitrepo || { cd; exit; }

	# Create the empty repo directories
	#
	declare repolist="/root/.config/patchreview/repolist"
	while read line; do
		echo "$line"
		[ -d "$line" ] || mkdir -p $line
	done < "$repolist"

	# Add the user and give him ownership of all the work directories
	useradd tcamuso
	ssh-keyscan -H gitlab.com >> ~/.ssh/known_hosts

	# Create the upstream linux kernel repo
	#
	cd /work/upstream
	[ -f kernel/.git/config ] || {
		git clone \
		git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git \
		kernel \
		2>&1 | tee -a $logfile
		cd kernel
		git remote add gh-ipmi https://github.com/cminyard/linux-ipmi.git \
			2>&1 | tee -a $logfile
		git remote add net-next \
			https://git.kernel.org/pub/scm/linux/kernel/git/netdev/net-next.git \
			2>&1 | tee -a $logfile
		git remote add scsi \
			https://git.kernel.org/pub/scm/linux/kernel/git/jejb/scsi.git \
			2>&1 | tee -a $logfile
		git remote add power \
			https://git.kernel.org/pub/scm/linux/kernel/git/powerpc/linux.git \
			2>&1 | tee -a $logfile
		git remote add perf \
			https://git.kernel.org/pub/scm/linux/kernel/git/jolsa/perf.git \
			2>&1 | tee -a $logfile
		git remote add linux-rt-devel \
			https://git.kernel.org/pub/scm/linux/kernel/git/rt/linux-rt-devel.git \
			2>&1 | tee -a $logfile
		git remote add crypto \
			https://git.kernel.org/pub/scm/linux/kernel/git/herbert/cryptodev-2.6.git \
			2>&1 | tee -a $logfile
		git remote add bluetooth \
			git://git.kernel.org/pub/scm/linux/kernel/git/bluetooth/bluetooth-next.git \
			2>&1 | tee -a $logfile
		git fetch -p --all 2>&1 | tee -a $logfile
	}

	cd /work

	if [ "$distro" == "rhel" ]; then
		mkdir $majversion
		cd $majversion
		[ -f kernel/.git/config ] || {
			git clone git@gitlab.com:redhat/rhel/src/kernel/rhel-$majversion.git \
				kernel 2>&1 | tee -a $logfile
		}
	fi

	if [ "$distro" == "fedora" ]; then
		[ -d /work/7 ] || mkdir -p /work/7
		cd /work/7
		[ -f kernel/.git/config ] || {
			git clone git@gitlab.com:redhat/rhel/src/kernel/rhel-7.git \
				kernel 2>&1 | tee -a $logfile
			cd kernel
			git fetch
			git pull
			git remote add tcamuso \
			git@gitlab.com:tcamuso/rhel-8.git | tee -a $logfile
		}

		[ -d /work/8 ] || mkdir -p /work/8
		cd /work/8
		[ -f kernel/.git/config ] || {
			git clone git@gitlab.com:redhat/rhel/src/kernel/rhel-8.git \
				kernel 2>&1 | tee -a $logfile
			cd kernel
			git fetch
			git pull
			git remote add tcamuso \
				git@gitlab.com:tcamuso/rhel-8.git | tee -a $logfile
		}

		[ -d /work/c9s ] || mkdir -p /work/c9s
		cd /work/c9s
		[ -f kernel/.git/config ] || {
			git clone git@gitlab.com:redhat/centos-stream/src/kernel/centos-stream-9.git \
				kernel 2>&1 | tee -a $logfile
			cd kernel
			git fetch
			git pull
			git remote add tcamuso git@gitlab.com:tcamuso/centos-stream-9.git \
				| tee -a $logfile
		}

		[ -d /work/ark ] || mkdir -p /work/ark
		cd /work/ark
		[ -f kernel/.git/config ] || {
			git clone git@gitlab.com:cki-project/kernel-ark.git \
				kernel 2>&1 | tee -a $logfile
			cd kernel
			git fetch
			git pull
			git remote add tcamuso \
				git@gitlab.com:tcamuso/kernel-ark.git | tee -a $logfile
		}
	fi

	# Guarantee that I own all the /work directories.
	#
	chown -R tcamuso.tcamuso /work
fi

exit 0
