#!/bin/bash
#
# init-my-stuff 1.0
# set -x

declare tcmd="| tee -a "$logfile" 2>&1"
declare -i optcount=0
declare remoteuser
declare logfile="$HOME/.initmystuff.log"
declare repolist="rcbak hints etcbk misc ipmi"
declare b_pushpriv=false
declare b_gitrepo=true
declare clonestr
declare distro
declare installagent
declare installflags
declare fetched=false
declare majersion=
declare b_install=false
declare pkg=
declare gitlabtok
declare yumrepo="/etc/yum.repos.d"
declare host="$(hostname)"
declare tmpstr=

# Init the logfile
> "$logfile"

###############################################################################
# This trick uses the bash DEBUG command to trap every command issued
# and log it into the logfile.
#
log_command() {
	local output=
	local command="$BASH_COMMAND"
	local -a tokens=( $command )

	# Exclude some commands
	case ${tokens[0]} in
		"trap"  ) ;&
		"rptch" ) return
			  ;;
		"for"   ) ;&
		"while" ) echo "$command" >> "$logfile"
			  return
	esac

	output=$({ eval "$command"; } 2>&1)
	grep -q 'echo' <<< "$command" || echo "$command" >> "$logfile"
	[ -n "$output" ] && echo "$output" >> "$logfile"
	# eval "$command" 2>&1 | tee -a "$logfile"
}

trap 'log_command' DEBUG
###############################################################################

rptch() {
	local ch="$1"
	local -i num="$2"
	local -i idx

	for ((idx = 0; idx < num; ++idx)); do
		echo -n "$ch"
	done
}

tmpstr="$(rptch "*" ${#host})"

echo "******************************$tmpstr"
echo "* Installing environment on $host *"
echo "******************************$tmpstr"

echo "logfile: $logfile" >> "$logfile"

[ -f /etc/os-release ] || { echo "No os-release file!" ; exit 1; }

echo "Getting distro and version information"
distro="$(grep -m1 ID /etc/os-release | awk -F '=' '{print $2}' | tr -d '"')"
echo " distro: $distro"

version="$(grep -m1 VERSION_ID /etc/os-release | awk -F '=' '{print $2}' | tr -d '"')"
echo "version: $version"

if ([ "$distro" == "rhel" ] || [ "$distro" == "centos" ]]); then
	majvers="$(echo "$version" | awk -F '.' '{print $1}')"
	echo "majvers: $majvers"
fi
echo

while getopts hipg OPTION; do
    case "$OPTION" in

	h ) optcount=$((optcount+1))
	    ;;
	i ) optcount=$((optcount+1))
	    b_install=true
	    ;;
	p ) optcount=$((optcount+1))
	    b_pushpriv=true
	    ;;
	g ) optcount=$((optcount+1))
	    b_gitrepo=false
	    ;;
	* ) echo "unrecognized option -$OPTION"
	    exit 127
    esac
done

shift $optcount
remoteuser="$1"
remotehost="$2"
echo "remoteuser: $remoteuser"
echo "remotehost: $remotehost"

# ========================================================================
# Determine whether dnf or yum is the installagent
# ------------------------------------------------------------------------
#
if [[ "$distro" == "fedora" ]]; then
	installagent=dnf
	installflags="--allowerasing --best"

elif [[ "$distro" == "rhel" ]] || [[ "$distro" == "centos" ]]; then
	if [ $majvers -lt 8 ]; then
		installagent="yum"
		installflags="--nogpgcheck --skip-broken"
	else
		installagent="dnf"
		installflags="--allowerasing --best"
	fi

elif [[ "$distro" == "ubuntu" ]]; then
	installagent='apt-get'
else
	echo "$distro is not a distro supported by this script."
fi

echo

# ========================================================================
# Can't go any further without which rsync, wget, curl, and git
# ------------------------------------------------------------------------
#
$installagent install -y which
which rsync || sudo $installagent install -y rsync
which wget || sudo $installagent install -y wget
which curl || sudo $installagent install -y curl
which git || sudo $installagent install -y git

cd		# make sure we're home

# If we're creating a system that will have push privileges to the
# repos, then use ssh access, else use http.
# For ssh access, the user will have to add the ssh key to the github
# account.
#
$b_pushpriv && clonestr="git clone git@github.com:camuso/" \
	    || clonestr="git clone https://github.com/camuso/"

# Get the gitlab token
# If called by ark2host, then the lab.toml file should be there.
#
if [ -f ~/.config/lab/lab.toml ]; then
	cd ~/.config/lab/
	gitlabtok="$(grep token lab.toml | awk -F' ' '{print $3}' | tr -d \")"
	cd -
else
	echo "No lab.toml file!"
fi

# If we don't have an ssh key, generate it.
#
[ -f $HOME/.ssh/id_rsa ] || \
	ssh-keygen -N "" -f $HOME/.ssh/id_rsa

# copy the ssh key to gitlab
#
if [ -n "$gitlabtok" ]; then
	curl --header "PRIVATE-TOKEN: $gitlabtok" \
		--request POST \
		--form "title=Automated Key" \
		--form "key=$(cat ~/.ssh/id_rsa.pub)" \
		https://gitlab.com/api/v4/user/keys \
		|| echo "You must enter your keys manually."
fi
echo

echo "*******************************"
echo "* Clone or update Env Files   *"
echo "*******************************"
echo

echo "repolist: $repolist"
for repo in $repolist; do
	if [ -e $repo ]; then
		if [ -d "$repo"/.git ]; then
			echo "Updating $repo"
			cd $repo
			git config pull.rebase false
			git pull
			cd -
		else
			echo "Converting directory $repo to git repo"
			rm -rf $repo
			$clonestr$repo.git $repo
			cd $repo
			git config pull.rebase false
		fi
	else
		echo "Cloning $repo ..."
		$clonestr$repo.git $repo
	fi
	# chown -R tcamuso.tcamuso $repo
	# chmod -R u+wrx,go+rx,go-w $repo
done

echo "*******************************"
echo "* Clone or update bin scripts *"
echo "*******************************"
echo

# Update or create the bin directory.
#
if [ -d bin/.git ]; then
	cd bin
	echo "Updating bin repo..."
	git config pull.rebase false
	git pull
else
	[ -e bin ] && rm -rf bin
	echo "Creating bin repo..."
	${clonestr}scripts.git bin
	cd bin
	git config pull.rebase false
fi
cd
echo "Returning to $PWD..."
echo -e "---------------\n"

# Copy etc and rc files out of their archive directories into their respective
# real directories, but only if they're newer.
#
echo "************************************************"
echo "* Copying Env files from Backup Directories    *"
echo "* but only if they're newer than existing ones *"
echo "************************************************"
echo >> "$logfile"
echo "rsync contents of rcbak to home directory"
rsync -Pat --cvs-exclude rcbak/ .
echo -e "---------------\n"

# Can only do the following if root
#
if [ $(id -u) -eq 0 ] && useradd tcamuso; then
	echo 'tcamuso ALL=(ALL)NOPASSWD: ALL' >> /etc/sudoers
	echo "rsync contents of etcbk to /etc"
	rsync -Pat --cvs-exclude etcbk/ /etc/.
	echo -e "---------------\n"
fi

# If we have a "user" it's because were running remotely, so
# do the remote cleanup.
#
if [ "$remoteuser" ]; then
	echo "**********************"
	echo "* Doing Remote Fixup *"
	echo "**********************"
	echo
	$HOME/bin/fixup-rsync $remoteuser
fi
cd -

echo

# If we are running as root and install has been requested, then install
# the development tools.
#
# Globals:
#   distro
#   version
#   majverson - rhel and centos only
#
get_rcmtools() {
	echo "**********************"
	echo "* Getting tools repos *"
	echo "**********************"
	echo

	yes | dnf copr enable bmeneguele/rhkernel-devtools
	yes | dnf copr enable james/centpkg
	echo
	return 0
}

# Globals:
#   distro
#   version
#   majverson - rhel and centos only
#   installagent - dnf or yum
#
get_epel() {
	echo -n "Installing EPEL for $distro-$majvers"
	$installagent install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-"$majvers".noarch.rpm
	echo
	return 1
}

# Globals:
#   distro
#   version
#   majverson - rhel and centos only
#
get_certs()
{
	# install the RH certs
	# See: https://docs.engineering.redhat.com/display/RCMDOC/RCM+Tools+Release+Guide#RCMToolsReleaseGuide-Installredhat-internal-cert-installrpm
	#

	curl -o /etc/pki/ca-trust/source/anchors/RH-IT-Root-CA.crt \
		https://certs.corp.redhat.com/certs/2015-IT-Root-CA.pem

	curl -o /etc/pki/ca-trust/source/anchors/2022-IT-Root-CA.pem \
		https://certs.corp.redhat.com/certs/2022-IT-Root-CA.pem

	update-ca-trust
}

# Globals:
#   distro
#   version
#   majverson - rhel and centos only
#   installagent - dnf or yum
#
if $b_install && [ "$remoteuser" == "root" ]; then
	declare arch=$(uname -m)
	declare rcmurl=""
	declare filesys

	get_certs
	get_rcmtools

	$installagent copr enable -y bmeneguele/rhkernel-devtools

	if [ "$distro" == "fedora" ]; then
		$installagent copr enable -y james/centpkg
		$installagent install -y fedpkg rhel-packager centpkg-sig
	fi

	if [[ "$distro" == "rhel" ]] || [[ "$distro" == "centos" ]]; then
		get_epel
	fi

	# $installagent groupinstall -y 'X Window System' 'GNOME'

	$installagent group install -y "Development Tools"

	for pkg in \
	annobin-annocheck \
	automake \
	annobin \
	annobin-annocheck \
	centpkg \
	elfutils-libelf-devel \
	gcc \
	gcc-c++ \
	go \
	bc \
	bind-utils \
	bison \
	brewkoji \
	ca-certificates \
	cmake \
	conserver-client \
	cscope \
	dwarves libdwarves1 \
	elfutils-devel elfutils-libs elfutils-libelf \
	elinks \
	ethtool \
	flex \
	git-email \
	golang \
	hostname \
	ipmitool \
	kmod \
	kmod-libs \
	krb5-workstation krb5-libs \
	lab \
	libdwarf libdwarf-devel \
	lynx \
	make \
	mutt \
	ncurses ncurses-devel \
	net-tools \
	nmap \
	OpenIPMI \
	openssl openssl-devel \
	patch patchutils \
	perl \
	pv \
	python-bugzilla-cli \
	rhpkg \
	rpm-build \
	rsync \
	texinfo \
	tpm-tools \
	usbutils \
	vim vim-enhanced vim-filesystem \
	watchdog \
	waiverdb-cli \
	xclip \
	xorg-x11-apps \
	xz \
	zenity \
	; do
		$installagent install -y $installflags $pkg
	done

	# orphaned packages
	#
	# trousers trousers-devel \
	# koji \
	# http://dl.fedoraproject.org/pub/epel/7/x86_64/q/quilt-0.63-2.el7.noarch.rpm
	# vim-powerline \
	# krb5-auth-dialog \
	# kmodtool \
	# python-bugzilla \
	# git-lab-porcelain

	[ -d /work ] || {
		filesys=$(awk '{print $2}' < <(df -hT | grep -w '/'))
		echo "filesys:$filesys:"
trap : DEBUG
		case "$filesys" in
			"xfs" ) # yes | $HOME/bin/mkworkdir-noq
				mkdir /work
				;;
			"btrfs" ) btrfs subvolume create /work
				;;
		esac
	}
fi
