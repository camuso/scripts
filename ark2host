#!/bin/bash
# ark2host
#
# Copy archives to a remote host and unpack them.
#
# Uses 'runremote' script to run local script 'init-my-stuff' on
# the remote system.
#

declare BLD="\033[1m"
declare UND="\033[4m"
declare OFF="\033[0m"

declare usage=$(
cat <<EOF

$(basename $0) [options] <user@host>

Migrate archived environment in git repos to host.

Options:
  -f file  - send only the named archive
  -i       - install default apps to root@host
  -p       - host does not have push priveleges to git repos
  -g       - do not install linux git repos
  -h       - this help text

EOF

)

declare -i NOERR=0
declare -i ERR_NOFIL=1

declare -a errmsg=(
""
" not a valid file."
)

function do_usage {
	local exval=$1
	echo "$usage"
	exit $exval
}

function err_exit {
	local err=$1
	local str="$2"
	echo -e "\n$BLD$str${errmsg[$err]}$OFF"
	do_usage 1
}

argc=$#
[ $argc -lt 1 ] && do_usage $NOERR

remote=${!argc}

sshcmd="ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
rsyncmd="rsync -Pvat --no-owner --no-group"
file=""
user=""
pushpriv=""
installer=false
nolinuxrepo=""

while getopts "giphf:" OPTION; do
	case "$OPTION" in
		g )	nolinuxrepo="-g"
			;;
		f )	file="$OPTARG"
			[ -f "$file" ] || err_exit $ERR_NOFIL "$file"
			;;
		i )	installer=true
			;;
		p )	pushpriv="-p"
			;;
		h )	do_usage $NOERR
			;;
	esac
done

user="$(echo "$remote" | cut -d'@' -f1)"
hos="$(echo $remote | cut -d'@' -f2)"

echo "connecting with $remote..."

if $installer; then
	runremote $user $hos ~/bin/init-my-stuff -i $pushpriv $nolinuxrepo $user
else
	runremote $user $hos ~/bin/init-my-stuff $pushpriv $nolinuxrepo $user
fi

echo
exit
