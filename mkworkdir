#!/bin/bash
#
# mkworkdir

set -euo pipefail
IFS=$'\n\t'

MYDIR="$(dirname "$(readlink -f "$0")")"
MYLIB="$MYDIR/lib"

declare usagestr=$(
cat <<EOF

$(basename $0)

Description:
        NOTE: For xfs filesystems only!
	Remove and recreate home directory with smaller size and create
	a /work logical volume with a size large enough to do actual work.

Arguments:
	help : print this text to the screen.

\0
EOF
)

usage() {
	echo -e "$usagestr"
	exit 1
}

declare warning=$(
cat <<EOF

 Be sure you have backed-up or moved everything in your /home directory,
 because it will be destroyed.

 Press ctrl-c NOW if you need to do that first.
 Press any other key to continue.
\0
EOF
)

declare homemap= 	# extracted from fstab
declare workmap=	# same as homemap but with work in place of home
declare homedir=	# fixed as "/home"
declare workdir=	# fixed as "/work"
declare worksiz=	# size of work directory, half of homdir size
declare newhomesiz=	# new size of homedir is half of original size

declare -i aok=0
declare -i novg=1
declare -i novfree=2

declare -a errmsg=(
""
"Cannot find VG in vgs fields."
"Cannot find VFree in vgs fields."
)

# exitme
#
# Arguments
#   $1 - exit code
#   $2 - optional message
#
exitme() {
	local -i code="$1"
	local msg="$2"

	((code == 0)) && exit "$code"
	echo -e "$msg"
	usage
	exit "$code"
}

update_fstab() {
	local dir="$1"
	local map="$2"
	local uid
	local fline

	uid="$(blkid -s UUID -o value "$map")"
	fline="$(grep -n -E "[[:space:]]$dir[[:space:]]" /etc/fstab | cut -d: -f1)"

	# If the line already exists in the fstab, delete it, because
	# we're going to replace it.
	[ -n "$fline" ] && sed -i.bak "$fline"d /etc/fstab

	printf 'UUID=%s %s xfs defaults 0 0\n' "$uid" "$dir" >> /etc/fstab
}

main() {
	[[ "${1:-}" == *h* ]] && usage
	(( EUID == 0 )) || exitme 1 "Must be root to run this script"

	local homesiz	# size of the home directory extracted from lvs
	# /dev/mapper names
	local homemap	# e.g. /dev/mapper/rhel_dell--per440--01-home
	local workmap	# e.g. /dev/mapper/rhel_dell--per440--01-work
	# fstab entries
	local homefs	# fstab entry for /home
	local workfs	# fstab entry for /work
	local line
	local uuid_ref
	local uuid
	local vgname

	# Find which logical volume is the home directory
	uuid_ref="$(awk '$2=="/home" && $1 ~ /^UUID=/ { print $1 }' /etc/fstab)" \
		|| exitme 1 "Can't find \'home\' in /etc/fstab"
	uuid="${uuid_ref#UUID=}"
	homemap="$(blkid -U "$uuid")"
	workmap="${homemap/home/work}"

	# verify /dev/mapper/...-home is XFS, else abort
	fsdev_type=$(blkid -s TYPE -o value "$homemap")
	if [[ "$fsdev_type" != "xfs" ]]; then
	  exitme 1 "$homemap is not XFS (found: $fsdev_type). Aborting."
	fi

	homedir="/home"
	workdir="/work"

	# Derive the VG name by invoking lvs for the $homemap.
	# Remove leading white space with awk.
	vgname="$(lvs --noheadings -o vg_name "$homemap" | awk '{$1=$1; print}')"

	# Check for existing work LV
	if lvdisplay "$vgname/work" &>/dev/null; then
		exitme 1 "'work' LV already exists in $vgname"
	fi

	# Pull the /home LV size in GB as an integer
	# Use awk to convert to integer and remove leading white space.
	homesiz="$(
	  lvs --noheadings --units g -o lv_size "${vgname}/home" \
	    | awk '{ print int($1) }'
	)"

	# Compute new sizes
	newhomesiz=$(( homesiz / 2 ))
	worksiz=$(( homesiz - newhomesiz ))

	# Debug output
cat <<EOF
VG name:      $vgname
Current size: ${homesiz}G
New /home:    ${newhomesiz}G
/work size:   ${worksiz}G
EOF
	umount -v -l "$homedir"
	lvremove -v /dev/"$vgname"/home
	lvcreate -v -L "${newhomesiz}"G -n home "$vgname"
	lvcreate -v -L "${worksiz}"G -n work "$vgname"

	mkfs.xfs "$homemap"
	mkfs.xfs "$workmap"
	mkdir -p "$homedir" "$workdir"

	update_fstab "$homedir" "$homemap"
	update_fstab "$workdir" "$workmap"

	systemctl daemon-reload
	mount -a

	restorecon -R /work
	restorecon -R /home
}

main "$@"

exit 0
