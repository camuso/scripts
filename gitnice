#!/bin/bash
#
# gitnice
#

declare arg=
declare opt=
declare numregex='^[0-9]+$'
declare number=
declare cmtauth=
declare cmtdate=
declare autdate=
declare reverse=
declare hashwid="%<(8)"
declare authwid=""
declare fmtstr=""
declare b_format=true
declare hashsiz="h"
declare usagestr=
declare cmtexpr=
declare path=
declare -a gitopt=()

declare gitold=
declare gver=
declare -i gmaj=
declare -i gmin=

gver=$(git --version | cut -d' ' -f3)
gmaj=$(echo "$gver" | cut -d'.' -f1)
gmin=$(echo "$gver" | cut -d'.' -f2)
[ "$gmaj" -lt 2 ] && [ "$gmin" -lt 8 ] && gitold=true || gitold=false


usagestr=$(
cat <<EOF

$(basename "$0") [options] [commitexpr] [path]

  Displays commits in --oneline format, with options as detailed below.
  With no commitexpr, only the most recent commit is displayed.
  If the commitexpr does not provide a range,  only that one commit is displayed.

  commitexpr - any valid git commit expression.
  path - any path, or a list of space-separated paths

  Options and arguments can be entered in any order.

  commitexpr - Commit expression can be any valid commit expression, e.g.
     befb28f26
     befb28f26~1..
     9930702cfebb..e87443a5f68d
     c5586d0f711e~1..HEAD

  Options
  -c        - show commit date
  -d        - show author date
  -a        - show author
  -s number - space out author to columns of "number" width (git 2.8+ only)
  -r        - show in reverse order (oldest first)
  -w        - show full 40-char hash. Default is "--short"
  -h        - this help text

  Additionally, except for formatting options, any valid git log option can
  also be entered.

  Examples:
   $(basename "$0")
       prints the most recent commit in the current repo

   $(basename "$0") -d -c -5
       prints the 5 most recent commits with the author date and the
       actuall commit date

   $(basename "$0") -d --no-merges \\\

     c68432e802b11.. \\\

     drivers/char/ipmi include/linux/ipmi.h
       prints all commits with author dates, except for merges, for
       the listed paths, starting with commit c68432e802b11.

\0
EOF
)

usage() {
	echo -e "$usagestr"
	exit "$1"
}

# If output is to terminal, then do the special formatting.
# Else, if being redirected, just plain output.
#
# [ -t 1 ] && b_format=true || b_format=false

is_validcmtexpr() {
	git log -n1 "$1" > /dev/null 2>&1
	return $?
}

for arg in "$@"; do

	if [ "${arg:0:1}" == '-' ]; then
		opt="${arg:1}"

		if [[ $opt =~ $numregex ]]; then
			number=$opt;
			shift
			continue
		fi

		case "$opt" in
		s ) $gitold && continue
			shift
			authwid="%<($arg,mtrunc)"
			shift
			;;
		c ) $b_format && cmtdate="%C(bold green)%cd " || autdate="%cd "
			shift
			;;
		d ) $b_format && autdate="%C(bold green)%ad " || autdate="%ad "
			shift
			;;
		a ) $b_format && cmtauth="%C(bold yellow)%ae " || cmtauth="%ae "
			shift
			;;
		r ) reverse="--reverse"
			shift
			;;
		w ) hashsiz="H"
			shift
			;;
		h ) usage 0
			;;
		* ) gitopt+=( "$arg" )
			shift
		esac
	fi

	if [ -e "$arg" ]; then
		path="$path $arg"
		continue
	else
		is_validcmtexpr "$arg" && cmtexpr="$arg"
		continue
	fi
done

$gitold && hashwid=
[ "$cmtauth" ] || authwid=""

$b_format && \
	fmtstr="$hashwid%C(bold green)%$hashsiz $cmtdate$autdate$authwid$cmtauth%C(reset)%s" \
|| \
	fmtstr="$hashwid%$hashsiz $cmtdate$autdate$authwid$cmtauth %s"

[ -z "$number" ] && number="1"
[ -n "$cmtexpr" ] && [[ "$cmtexpr" = *".."* ]] && number=
grep -q '\-\-since' <<< "${gitopt[@]}" && number=
grep -q '\-\-after' <<< "${gitopt[@]}" && number=
[ -n "$number" ] && number="-$number"
# [ -n "$path" ] && path=" -- $path"

git log --date=short --pretty=format:"$fmtstr" $reverse $number ${gitopt[@]} $cmtexpr -- $path

exit $?
