#!/bin/bash
#
# gitnice
#

declare -i optcount=0
declare number="-n 1"
declare cmtauth=
declare cmtdate=
declare autdate=
declare reverse=
declare hashwid="%<(8)"
declare authwid=""
declare fmtstr=""
declare cmtexpr="-1"
declare b_format=true
declare hashsiz="h"

declare gver=$(git --version | cut -d' ' -f3)
declare -i gmaj=$(echo $gver | cut -d'.' -f1)
declare -i gmin=$(echo $gver | cut -d'.' -f2)
declare gitold
[ $gmaj -lt 2 ] && [ $gmin -lt 8 ] && gitold=true || gitold=false

declare usagestr=$(
cat <<EOF

$(basename "$0") [options] [commitexpr]

  Displays commits in --oneline format, with options as detailed below.
  With no options and no arguments, the most recent commit is displayed
  as "git log --oneline -n1"

  commitexpr - Commit expression can be any valid commit expression, e.g.
  1234567, or 89abcde...f0123456, or -12

  Options
  -c        - show commit date
  -d        - show author date
  -a        - show author
  -s number - space out author to columns of "number" width (git 2.8+ only)
  -r        - show in reverse order (oldest first)
  -w        - show full 40-char hash. Default is "--short"
  -h        - this help text
\0
EOF
)

usage() {
	echo -e "$usagestr"
	exit $1
}

# If output is to terminal, then do the special formatting.
# Else, if being redirected, just plain output.
#
# [ -t 1 ] && b_format=true || b_format=false

# leading colon in options list tells the option parser to parse errors
# silently, allowing the user to address parsing errors.
# The hyphen tells the parser to ignore double-dash -- options passed
# to git as well as the double-dash command line separator.
#
while getopts :acds:rwh- OPTION; do
    case "$OPTION" in

	s ) $gitold && continue
	    authwid="%<($OPTARG,mtrunc)"
	    let optcount++
	    ;;
	c ) $b_format && cmtdate="%C(bold green)%cd " || autdate="%cd "
	    let optcount++
	    ;;
	d ) $b_format && autdate="%C(bold green)%ad " || autdate="%ad "
	    let optcount++
	    ;;
	a ) $b_format && cmtauth="%C(bold yellow)%ae " || cmtauth="%ae "
	    let optcount++
	    ;;
	r ) reverse="--reverse"
	    let optcount++
	    ;;
	w ) hashsiz="H"
	    let optcount++
	    ;;
	h ) echo "Option: $OPTION"
	    usage 0
	    ;;
	- ) break
    esac
done

shift $optcount
cmdline=($@)
# echo "cmdline: \""$cmdline"\""
$gitold && hashwid=
[ "$cmtauth" ] || authwid=""

$b_format && \
	fmtstr="$hashwid%C(bold green)%$hashsiz $cmtdate$autdate$authwid$cmtauth%C(reset)%s" \
|| \
	fmtstr="$hashwid%$hashsiz $cmtdate$autdate$authwid$cmtauth %s"

if [ "$cmdline" ]; then
	git log $reverse --date=short --pretty=format:"$fmtstr" "${cmdline[@]}"
else
	git log $reverse --date=short --pretty=format:"$fmtstr" -1
fi

exit $?
