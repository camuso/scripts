#!/bin/bash
#
# chrepo

unset BLD && declare BLD="\e[1m"
unset UND && declare UND="\e[4m"
unset OFF && declare OFF="\e[m"

unset BLK && declare BLK="\e[0;90m"
unset RED && declare RED="\e[0;91m"
unset GRN && declare GRN="\e[0;92m"
unset YEL && declare YEL="\e[0;93m"
unset BLU && declare BLU="\e[0;94m"
unset MGT && declare MGT="\e[0;95m"
unset CYN && declare CYN="\e[0;96m"
unset WHT && declare WHT="\e[0;97m"
unset LIL && declare LIL="$CYN"
unset LNK && declare LNK="$UND\e[1;96m"

unset BBLK && declare BBLK="\e[1;90m"
unset BRED && declare BRED="\e[1;91m"
unset BGRN && declare BGRN="\e[1;92m"
unset BYEL && declare BYEL="\e[1;93m"
unset BBLU && declare BBLU="\e[1;94m"
unset BMGT && declare BMGT="\e[1;95m"
unset BCYN && declare BCYN="\e[1;96m"
unset BWHT && declare BWHT="\e[1;97m"
unset BLIL && declare BLIL="\e[1m$LIL"
unset BWOR && declare BWOR='\e[1;37;41m'

declare INF="$YEL"
declare MNU="$BYEL"
declare STA="$BGRN"
declare WRN="$BRED"
declare CAU="$BLIL"
declare URL="$CYN"

declare qstr="${MNU}'q'$OFF"

declare repomap=$HOME/.config/patchreview/repomap
declare repolist=$HOME/.config/patchreview/repolist
declare usagestr=$(
cat <<EOF

chrepo [reponame | show]

Description:
	cd to a directory denoted by "repodir"

	Create a ~/.config/patchreview/repomap file to map names
	to repo directories, with the name in the first field and
	the directory in the second. E.g...
	rh7 /work/7/kernel
	rh8 /work/7/kernel

Arguments:
	show 	 -  dumps the contents of ~/.config/patchreview/repomap

	reponame - the name mapped to a specific directory in the
	           ~/.config/patchreview/repomap file

	If you do not present a name from the repomap firle as an arugment,
	you will get a numbered list of repo directories stored in your
	repolist file.

	If that file does not exist, then create it by putting the names
	of your repo directories in ...
	~/.config/patchreview/repomap

\0
EOF
)

declare norepolist=$(
cat <<EOF

The $repolist file containing a list of your repo directories does
not exist. Please create it.
\0
EOF
)

declare nomatch=$(
cat <<EOF

The repo name you submitted could not be found in
$repomap.

EOF
)

usage() {
	echo -en "$usagestr"
}

#** getchar(): reads one char and echoes it to the screen
#
# Returns the char in the reference veriable.
# User does not need to press RETURN/ENTER
#
# $1 - reference variable to receive the char
#*
getchar() {
	local -n uigc_char="$1"
	read -r -n1 uigc_char
	echo
	return 0
}

#** promptgetchar(): print a prompt and get a char with echo
#
# Returns the character in the reference variable
# User does not need to press RETURN/ENTER
#
# $1 - prompt, may include escape chars
# $2 - reference variable to receive the char
#*
# Prints a prompt passed in $1 and returns the char in $2
#
promptgetchar() {
	echo -en "$1"
	getchar "$2"
	return 0
}

#** _getuser_: reads user input
#
# Read multi char input terminated by RETURN/ENTER.
# Does not support backslash continuation lines.
#
# $1 - prompt string
# $2 - reference variable to receive user input
#*
_getuser_() {
	local promptstring="$1"
	local -n uigu_var="$2"

	echo -ne "$INF$promptstring$OFF"
	read -e -r uigu_var
	eval "uigu_var=\"$uigu_var\""
}

#** loop_range_q()
#
# $1 - minimum
# $2 - maximum
# $3 - reference value to receive the user's choice
#
# Loop until user gives a number in the range defined by the args or
# enters 'q' to quit and return to the caller with the 'q'
#*
loop_range_q() {
	local min="$1"
	local max="$2"
	local number
	local cmd
	local pstr=\
"$OFF${INF}Please enter a number between $MNU$min$INF and $MNU$max$OFF or $qstr: "

	echo -e "${INF}Press $qstr$INF to return without making a selection.$OFF"
	((max < 10)) && cmd=promptgetchar || cmd=_getuser_
	# echo "cmd: $cmd"

	while true; do
		$cmd "$pstr" number

		[ "$number" = "q" ] && return 1

		if [[ $number =~ ^-?[0-9]+$ ]]  && \
		   [[ $number -ge $min ]]       && \
		   [[ $number -le $max ]]; then
			eval "$3"="$number"
			echo
			return 0
		fi
	done
}

chrepo() {
	[ ${#@} -eq 1 ] || { pwd; return 0; }
	( [ "$1" == "help" ] || [ "$1" == "-h" ] ) && { usage; return 0; }

	local arg="$1"
	local repod=
	local dary=()
	local dndx=0
	local dnum=

	if [ -f "$repomap" ]; then
		[ "$arg" == "show" ] && { cat "$repomap"; return 0; }
	fi

	line=$(grep -w $arg $repomap)

	if [ "$line" ]; then
		repod=$(echo $line | cut -d' ' -f2)
	else
		echo -e "$nomatch"
		[ -f "$repolist" ] || { echo -e "$norepolist"; return 1; }

		dary=($(cat $repolist))
		for ((dndx = 0; dndx < ${#dary[@]}; ++dndx)); do
			echo -e "$MNU$((dndx+1)). $OFF${dary[dndx]}"
		done

		loop_range_q 1 ${#dary[@]} dnum || return 1
		repod=${dary[dnum-1]}

		[ -d "$repod" ] || {
			echo -e "$WRN$repod is not a directory!$OFF"
			return 1
		}
	fi

	cd $repod
	pwd
	return 0
}
