#!/bin/bash
#
# wcherp
#

[ -n "$MYDIR" ] || {
	declare MYDIR=
	MYDIR="$(dirname -- "${0}")"
}

[ -n "$MYLIB" ] || {
	declare MYLIB=
	MYLIB="$MYDIR"/lib
}

declare MYMAN="$MYDIR"/man
declare MYDATA=
MYDATA="$(realpath ./.data)"
declare MYHLP="$MYMAN"/cherp.txt
declare MYNAME=
MYNAME="$(basename "$0")"

[ "$ui_loaded" ]            || source "$MYLIB"/ui.source
[ "$ptversion_loaded" ]     || source "$MYLIB"/patchtools-version.source
[ "$configmanager_loaded" ] || source "$MYLIB"/config-manager.source

declare usagestr=
usagestr="$(
cat <<EOF

$(basename "$0") [options]

Options
-------
-V : split screen vertically (default)
-H : split screen horizontally

This script spawns the cherp backport script as a split screen.
One pane has cherp running in it, the other tails the Backport
Commits file containing commits to be backported from upstream,

The required screen splitter is tmux. If it is not installed,
you will be prompted whether you want to install it. The
script will exit if tmux is not installed and you don't want
to install it.
\0
EOF
)"

declare b_vertical=true
declare b_256=false
declare upcommitsfile=
declare -i tbackground=

usage() {
	echo -e "$usagestr"
	exit 0
}

exitme() {
	exit $1
}

# control_c: run if user hits control-c
#
# Global
#   CTLC_EXIT - bash environment variable
#
control_c() {
	echo -e "\nCtrl-c detected\nCleaning up and exiting."
	exit $CTLC_EXIT
}

parseops() {
	local arg=
	local opt=

	while (($# > 0)); do
	    arg="$1"

	    if [ "${arg:0:1}" == '-' ]; then
		opt="${arg:1}"

		case "$opt" in
		    H ) b_vertical=false
			;;
		    V ) b_vertical=true
			;;
		    *  ) echo "unrecognized option $arg"
			 echo -e "$usagestr"
			 exitme 127
		esac
	    fi

	    shift
	done
}

init() {
	local myb

	configfile="$MYDATA/cherp.conf"
	cfgtemplate="$MYLIB/cherp.conf"

	cfg_start "$cfgtemplate" "$configfile"

	if ((tbackground < tb_lite || tbackground > tb_dark)); then
		ui_setbg tbackground
		cfg_set_item "tbackground" "$tbackground"
	else
		ui_do_colors "$tbackground"
	fi

	[[ $TERM =~ "256" ]] && b_256=true
}

main() {
	local errstr

	[[ $1 =~ (-h|^help) ]] && usage

	init

	echo -e "$MNU$UND"
	echo -e "Patchtools $version: wcherp$OFF"
	echo -e "$INF A tmux wrapper for cherp, invokes tmux with two panes:\n" \
		"One to run cherp and another to tail the Backports File.$OFF"

	errstr=$(rpm -q tmux) || {
		echo -e	"\n$WRN$errstr$OFF\n"
		loop_yn "${MNU}Would you like to install tmux now? y/n : $OFF" || exitme 1
		sudo dnf install -y tmux
	}

	parseops "$@"

	if $b_vertical && ((tcols < 200)); then
		echo -e "$WRN Your terminal window only has $STA$tcols$WRN columns.$OFF\n" \
		        "Please change your terminal width to at least 200 columns\n"
		exitme 1
	fi

	if ! $b_vertical && ((tlines < 60)); then
		echo -e "$WRN Your terminal window only has $STA$tlines$WRN lines.$OFF\n" \
			"Please change your terminal length to at least 60 lines\n"
		exitme 1
	fi

	# Start tmux session with vertically split window
	tmux new-session -d -s mysession

	# Split the window
	$b_vertical && tmux split-window -h || tmux split-window -v

	# Run your script in the first pane
	tmux select-pane -t 0
	tmux set-buffer -b cherpbuf "export TERM=$TERM; reset; <&0; cherp
"
	tmux paste-buffer -b cherpbuf

	# If the file exists, then spawn vim to edit it.
	if [ -f "$upcommitsfile" ]; then
		# Vim the backport commits file in the second pane
		tmux select-pane -t 1
		tmux set-buffer -b tailbuf \
			"export term=$TERM; reset; watch -n 1 'tail --retry -f -n +1 $upcommitsfile'
"
		tmux paste-buffer -b tailbuf
		# tmux send-keys -t mysession:0.1 C-m
	fi

	tmux select-pane -t 0
	# Attach to the session
	tmux attach-session -t mysession

	ui_exit ui_exit_ok
}

main "$@"
