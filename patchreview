#!/bin/bash
#
# patchreview
#
# This script assumes that you have already extracted your patches into
# the directory named as "indir" below. Only files named "*.patch" will
# be considered.
#
# To create a patch set from email ...
# In mutt, tag the thread you want to extract with esc-t. Untag the
# prologue, as it's not a patch. Then extract the thread into text
# files using ;-esc-C (uppercase C). When prompted for the directory,
# type the name of the mailbox directory or uparrow to the previous
# save.
#
# This script can also be used to compare any two patch sets.
#
# Calls on the following external scripts.
#
# ./patcmp
# ./patbatcmp
# ./patbatcmpmgr
#

# Global background color declared here to provide color for all
# messages.
declare -i background=

#######################################
# Default file locations
#######################################
#
# Whatever directory this script and its companions are located in
# must be in the executable path.
#
# export PATH=$PATH:$MYDIR
#
# Where MYDIR is the directory in which this script and its companions
# are located.

# The following dictionary definitions and locations are inherited by the
# source files that follow.
#
declare MYDIR=
MYDIR="$(dirname "$(which "$(basename "$0")")")"

declare MYLIB=
MYLIB="$MYDIR"/lib

declare MYMAN=
MYMAN="$MYDIR"/man

declare MYDATA=
MYDATA="$PWD"/.data

# ui must be sourced before anything else happens.
source "$MYLIB"/ui.source

ui_setbg background

[ -d "$MYDATA" ] || mkdir -p "$MYDATA" || {
	echo -e "\
${CAU}patchreview cannot create: $MNU$MYDATA$OFF \
Please create $MNU$MYDATA$OFF from the command line."
	exit 1
}

#######################################
# External Source Files
#######################################
source "$MYLIB"/gitutilities.source
source "$MYLIB"/patch-common.source
source "$MYLIB"/patch-utils.source
source "$MYLIB"/patch-mrutilities.source
source "$MYLIB"/config-manager.source

#########################################
# Functions
#########################################

init_booleans() {
	# Only these two booleans are inited to true at the
	# beginning of every invocation of the script.
	#
	for bool in \
	b_rename_infiles \
	b_fmt_upstream
	do
		set_cfg_item $bool true
	done
}

# get_booleans
#
# Read the values of the program flow control booleans from the
# config file.
#
get_booleans() {
	# echo "patchreview::get_booleans()"
	local bool
	for bool in \
	b_rename_infiles \
	b_fmt_upstream \
	b_verbose \
	b_mrcomments \
	b_seekfixes
	do
		eval $bool="$(get_cfg_item $bool)"
		ui_digit2bool $bool
	done
}

# set_booleans
#
# Write the current values of the program flow booleans into the
# config file.
#
set_booleans() {
	# echo "patchreview::set_booleans()"
	local bool

	for bool in \
	b_rename_infiles \
	b_fmt_upstream \
	b_verbose \
	b_mrcomments \
	b_seekfixes
	do
		set_cfg_item $bool ${!bool}
		((++index))
	done
	return 0
}

clean_dir() {
	local delquery="Are you sure you want to delete the contents of:"
	local response=false

	getyn "$delquery\n\t$1\n" response
	$response && find "$1" -mindepth 1 -exec rm -rvf '{}' \;
}

clean_indir() {
	# remove everything in the indir, except any subdirs
	find "$indir" -maxdepth 1 -not -type d -exec rm -vf '{}' \;
	patchcount=0
}

clean_outdir() {
	find "$outdir" -maxdepth 1 -not -type d -exec rm -vf '{}' \;
	rm -vf "$outdir"/"$mismatch_file"
}

clean_directories() {
	local answer
	local cleanstr

	cleanstr=$(
cat <<EOF

    $BLD$UND\0Clean Directory$OFF
    Select one of$BLD

 1  Clean $OFF$indir$BLD
 2  Clean $OFF$outdir$BLD
 3  Clean both
\0
EOF
)
	echo -e "$cleanstr"
	loop_range_q 1 3 answer || return

	case $answer in
		1 ) clean_indir
		    ;;
		2 ) clean_outdir
		    ;;
		3 ) clean_indir
		    clean_outdir
		    ;;
		* ) echo "Not a valid selection for Clean Directories"
	esac
}

# reset_to_lasttag - reset the current branch to its most recent tag
#
# Also checks that the saved lasttag is the same as the lasttag of the
# current branch. If they are not, the reset is not executed and the user
# is warned, because the results would be a merge of two branches.
#
# Globals:
# 	lasttag
#
reset_to_lasttag() {
	local newlasttag
	local errstr

	git_get_lasttag newlasttag "$last_tag_file"

	errstr=$(
cat <<EOF

$WRN\0Warning
It appears the head was moved outside of this script.$INF
		Current branch: $STA$(git_getcurrentbranch)$INF
Most recent tag of that branch: $STA$lasttag$INF
Most recent tag in this script: $STA$newlasttag$INF

Please switch to the correct branch.
We won't reset the head.$OFF

\0
EOF
)
	[ "$newlasttag" =  "$lasttag" ] || { echo -e "$errstr"; return; }

	echo -e "$BLD\0Resetting git head to$OFF $lasttag."
	git reset --hard "$lasttag"
	b_allapplied=false
}

# nuke - delete files in indir and outdir, except logs, and reset to lasttag
#
#        Also calls the init sequence.
#
# Globals:
# 	indir
# 	outdir
# 	applymode
#
nuke() {
	loop_yn_ro "${MNU}Are you sure you want to delete everything in \n\
$STA$indir$MNU and \n$STA$outdir$MNU ? \n(y/n) : $OFF" || return
	clean_indir
	clean_outdir

	# Reset the git head to the last tag
	reset_to_lasttag

	# Init the booleans to their defaults
	init_booleans
	get_booleans

	# Set the apply mode to its default value
	applymode=$applymode_norm
	set_cfg_item applymode $applymode
}

# show_config_menu - display the configuration options and their current state
#
# Globals:
# 	indir
# 	indirstr
# 	infilecount
# 	outdir
# 	outdirstr
# 	patstr
# 	editor
#
show_config_menu() {
	local config_menu
	local remotes="$remote_dir : $remote_repo/$remote_branch"

	config_menu=$(
cat <<EOF
$MNU
       $UND\0Configuration       $OFF
   $MNU o$OFF  Operating mode           :$STA $(show_opmode)
   $MNU c$OFF  See comments first       :$STA $(show_mrcomments)
   $MNU s$OFF  Automatically Seek Fixes :$STA $(show_seekfixes)
   $(show_patches)
   $(show_workdir)
   $MNU u$OFF  Upstream Dir Repo/Branch :$STA $remotes$OFF
       Upstream URL             :$STA$(show_remote_url "$remote_repo")$OFF
   $MNU e$OFF  Diff Editor              :$STA $editor
   $MNU f$OFF  Patch Validation fuzz    :$STA $(show_patchvalfuzz)
   $MNU p$OFF  Cycle Patch Compare Mode :$STA $(show_cmpmode)$OFF
   $MNU v$OFF  Toggle verbose mode      : $(show_verbose)
   $MNU C$OFF  Toggle screen background : $(show_screenbg)
   $MNU h$OFF  Help text for this menu
   $MNU q$OFF  Quit and return to previous menu
\0
EOF
)
	echo -e "$config_menu"
}

# config_parser - config the options selected from the config menu
#
# Globals
# 	opmode
# 	opmode_mr
# 	opmode_states
# 	b_mrflag
# 	indir
# 	indirstr
# 	outdir
# 	outdirstr
#
config_parser() {
	local opt

	while :; do
		get_booleans
		init_loopvars
		show_config_menu
		promptgetchar "$MNU    Enter one of the above: $OFF" opt

		case $opt in
		o )	change_opmode
			;;
		c )	ui_toggle b_mrcomments
			set_cfg_item "b_mrcomments" "$b_mrcomments"
			;;
		d )	set_dir "$indirstr" "indir" indir
			;;
		w )	set_dir "$outdirstr" "outdir" outdir
			;;
		u )	set_remote_seek
			;;
		e )	set_editor
			;;
		f )	set_patchvalfuzz
			;;
		p )	ui_cycle_state cmpmode "$cmpmode_states"
			set_cfg_item "cmpmode" "$cmpmode"
			;;
		v )	ui_toggle b_verbose
			set_cfg_item "b_verbose" "$b_verbose"
			;;
		s )	ui_toggle b_seekfixes
			set_cfg_item "b_seekfixes" "$b_seekfixes"
			;;
		C )	ui_cycle_state background 2
			cfg_set_item background "$background"
			terminal_background="$background"
			ui_set_colors
			;;
		h )     ptpage -b "$background" "$config_man"
			;;
		q ) 	return
			;;
		esac
	done
}

# show_extops - display the extended operations menu
#
# Presents the Discrete Operations
#
# Globals
# 	b_mrflag
# 	indir
# 	outdir
# 	current_head_trunc
# 	indirstr
# 	outdirstr
# 	lasttag
#
show_extops() {
	local opt
	local extops

	extops=$(
cat <<EOF
$MNU\
    $UND\0Discrete Operations $OFF \
$( $b_mrflag || echo -e "\n$MNU R$OFF  Rename mail files in     :$STA $indir$OFF")
$MNU i$OFF  Init to defaults
$MNU h$OFF  help text
$MNU F$OFF  Format commits into      :$STA $outdir
$MNU S$OFF  Seek missing Fixes
$MNU P$OFF  Compare Patches \
 $(show_apply_patches)
$MNU B$OFF  Create a new branch at   :$STA $(get_current_head_trunc)
$MNU G$OFF  Git reset to             :$STA $lasttag
$MNU C$OFF  Clean the $STA$indirstr$OFF and/or $STA$outdirstr$OFF directories
$MNU N$OFF  Nuke the directories and reset head to most recent tag \
 $(show_view_logs)
$OFF

EOF
)
	echo -e "$extops"
}

# show_mr_menu - display the Merge Request opmode of the Main menu
#
# Gobals
# 	lasttag
# 	remote_repo
# 	remote_branch
# 	mergelist_filter
# 	menumode
# 	menumode_ext
#
show_mr_menu() {
	local opt
	local remotes="$remote_dir : $remote_repo/$remote_branch"
	local mr_menu

	mr_menu=$(
cat <<EOF
$MNU
    $UND\0Environment:$STA $(show_opmode)$MNU Version: $STA$version$OFF
$MNU c$OFF  Config Menu
    Most recent tag          :$STA $lasttag$OFF
    Current Head             :$STA $(get_current_head_trunc)$OFF
$MNU b$OFF  Current git branch       :$STA $(git_getcurrentbranch)$OFF
$MNU W$OFF  Working repo             :$STA $PWD$OFF
$(show_patches)
$(show_workdir)
$MNU u$OFF  Upstream dir repo/branch :$STA $remotes$OFF
$MNU g$OFF  grep Merge List for      : $(show_mrfilter) \
 $(show_mrstatus)
$MNU
    $UND\0Main Controls     $OFF
$MNU M$OFF  Enter a specific Merge Request for review
$MNU m$OFF  Show the list of Merge Requests and select one for review
$MNU v$OFF  $(show_comments)
$MNU r$OFF  Refresh the list of Merge Requests and select one for review
$MNU a$OFF  Ack, Nack and/or Comment on a Merge Request
$MNU H$OFF  History of MR reviews
$MNU i$OFF  $(show_init)
$MNU q$OFF  Quit this script
$(show_discrete_ops)
$OFF

EOF
)
	echo -e "$mr_menu"
	[ "$menumode" -eq "$menumode_ext" ] && show_extops
}

# show_email_menu - display the email opmode of the main menu
#
# Globals:
# 	lasttag
#	current_head_trunc
#	remote_repo
# 	remote_branch
#
show_email_menu() {
	local opt
	local remotes="$remote_dir : $remote_repo/$remote_branch"
	local setting=
	local email_menu

	email_menu=$(
cat <<EOF
$MNU
    $UND\0Environment:$STA $(show_opmode)$MNU Version: $STA$version$OFF
$MNU c$OFF  Config Menu
    Most recent tag          :$STA $lasttag$OFF
    Current Head             :$STA $(get_current_head_trunc)$OFF
$MNU b$OFF  Current git branch       :$STA $(git_getcurrentbranch)$OFF
$(show_patches)
$(show_workdir)
$MNU u$OFF  Upstream dir repo/branch :$STA $remotes$OFF
$MNU
    $UND\0Batch Run Parameters$OFF
$MNU 1$OFF  Compare mode             :$STA $(show_cmpmode)$OFF
$MNU 2$OFF  Patch apply mode         :$STA $(show_applymode)$OFF
$MNU 3$OFF  Patch apply fail mode    :$STA $(show_applyfailmode)$OFF
$MNU 4$OFF  Seek missing Fixes       :$STA $(show_seekfixes)$OFF \
 $(show_nextpatch)$BLD
$MNU
    $UND\0Main Controls     $OFF
$MNU r$OFF  Run in batch mode
$MNU i$OFF  Init to defaults
$MNU h$OFF  help text
$MNU q$OFF  Quit this script
$(show_discrete_ops)
$OFF
EOF
)
	echo -e "$email_menu"
	[ "$menumode" -eq $menumode_ext ]  && show_extops
}

call_selmr() {
	select_merge_request && return $rc_run || return $rc_pass
}

call_getmr() {
	get_merge_request -u && return $rc_run || return $rc_pass
}

# case_qanret - look for return values from call to query_acknack
#
# This function allows query_acknack to act as an adjunct menu for
# the main patchreview menu. It guarantees that calls to query_acknack
# will return to menu_parser to execute calls to run patchreviews from
# the query_acknack menu. This is necessary, because a patchreview will
# call query_acknack after comparing patches. Allowing query_acknack to
# call another patchreview directly would start an unintended recursion,
# because, in effect, query_acknack will be calling itself at the end
# of the chain of patchreview functions.
#
# Globals:
#   menuinput   - a main menu selection
#   mrqan_news  - display the current list of MRs
#   mrqan_newg  - get a new specific MR to review
#   rc_continue - present the main patchreview menu
#   rc_run      - run the patchreview
#
# Arguments:
#   $1 - return value from MR ack/nak menu
#
case_qanret() {
	local stat=
	menuinput=
	case $1 in
	    $mrqan_news ) menuinput='m'; stat=$rc_continue ;;
	    $mrqan_newg ) menuinput='M'; stat=$rc_continue ;;
	    $mrqan_run  ) stat=$rc_run ;;
		      * ) menuinput=; stat=$rc_continue ;;
	esac
	return $stat
}

menu_parser() {
	local stat

	# menuinput is global!
	#
	case "$menuinput" in
	    H ) query_review_history
		;;
	    W )	set_working_repo
		;;
	    c )	config_parser
		;;
	    o )	ui_cycle_state opmode $opmode_states
		set_cfg_item "opmode" "$opmode"
		((opmode == opmode_mr)) && b_mrflag=true || b_mrflag=false fi
		;;
	    g )	grep_mrlist && return $rc_run
		;;
	    a )	$b_mrflag && {
		ui_call query_acknack stat
		case_qanret $stat
		return $?
		}
		;;
	    m )	$b_mrflag && { call_selmr; return $?; }
		;;
	    M )	$b_mrflag && { call_getmr; return $?; }
		;;
	    u )	set_remotedir
		set_remote_seek
		;;
	    b )	git_setbranch "$branchlist"
		git_get_lasttag lasttag "$last_tag_file"
		;;
	    d )	set_dir "$indirstr" "indir" indir
		;;
	    w )	set_dir "$outdirstr" "outdir" outdir
		;;
	    e )	set_editor
		;;
	    f )	print_missing_fixes
		;;
	    x )	ui_cycle_state menumode $menumode_states
		set_cfg_item "menumode" "$menumode"
		;;
	    R )	$b_mrflag || renpatfiles
		;;
	    F )	format_upstream_patches
		;;
	    S )	seek_missing_fixes
		;;
	    A )	[ $applymode -ne $applymode_off ] && ! $b_allapplied \
			&& exec_apply_patches
		;;
	    V )	view_logs
		;;
	    1 )	$b_mrflag || { ui_cycle_state cmpmode $cmpmode_states;
			       set_cfg_item "cmpmode" $cmpmode; }
		;;
	    2 )	$b_mrflag || { ui_cycle_state applymode "$applymode_states";
			       set_cfg_item "applymode" "$applymode"; }
		;;
	    3 )	$b_mrflag || { ui_cycle_state applyfailmode "$applyfailmode_states";
			       set_cfg_item "applyfailmode" "$applyfailmode"; }
		;;
	    4 )	$b_mrflag || { ui_toggle b_seekfixes;
			       set_cfg_item "b_seekfixes" "$b_seekfixes"; }
		;;
	    5 )	! $b_mrflag && $b_selpat && select_patch
		;;
	    C )	clean_directories
		;;
	    N )	nuke
		;;
	    G )	reset_to_lasttag
		rm -f "$usvbp_commits"
		;;
	    B )	create_branch
		;;
	    P )	compare_patches
		;;
	    i )	init_menu
		;;
	    q )	exit_me 0
		;;
	    r )	if $b_mrflag; then
			refresh_mergelist && return $rc_run
		else
			set_booleans
			return $rc_run
		fi
		;;
	    h )	ptpage -b "$background" "$main_man"
		;;
	    v )     get_merge_request -c
		;;
#	    T )	# test functions
		# hidden from main menu
		# ;;
	esac
	menuinput=
	return $rc_continue
}

init_files() {
	bp_commits="$outdir/$bp_commits_name"
	us_commits="$outdir/$us_commits_name"
	usvbp_commits="$outdir/$usvbp_commits_name"
	mmfile="$outdir/$mismatch_file"
	missing_fixes="$outdir/missing_fixes"
}

# init_loopvars - init the global variables used in menus
#
# This needs to be called for every pass through the config and
# main menus.
#
# Globals:
# 	All clearly visible on every line.
#
init_loopvars() {
	cfg_read_configfile
	((opmode == opmode_mr)) && b_mrflag=true
	init_files
	init_mr
}

# menu_loop - loop containing the call to the menu_parser
#
# The main function of this loop is to init all the variables that are
# presented in the primary and configuration menus, and to call the
# menu_parser function in a loop.
#
# Globals
# 	menuinput
# 	b_mrflag
# 	rc_run
# 	indir
#
menu_loop() {

	get_booleans
	init_loopvars

	# delete any "scratch" file from the indir
	#
	rm -f "$indir"/scratch

	local stat=0

	while true; do

		if [ -z "$menuinput" ]; then
			get_filecount
			if $b_mrflag; then show_mr_menu; else show_email_menu; fi
			promptgetchar "${MNU}Enter one of the above: $OFF" menuinput
		fi

		menu_parser $menuinput
		stat=$?
		# echo "menu_parser_stat: $stat"; read
		case $stat in
			$rc_pass )	menuinput="" ;;
			$rc_run  )	break ;;
		esac
	done
	return $stat
}

# get_labuser() - get the gitlab username for $USER
#
# Unfortunately, the gitlab username is not always the same as the $USER
# on the system. This function extracts the gitlab username from the
# ~/.config/lab/lab.toml file.
#
# Globals
# 	labuser
#
get_labuser() {
	# Global: labuser
	#
	local usrline
	local usrmsg

	usrmsg=$(
cat <<EOF
$INF
  You must create a lab.toml file in ~/.config/lab with the following
  contents.
$MNU
  [core]
    host = "https://gitlab.com"
    token = "<your-gitlab-token>"
    user = "<your-gitlab-username>"
$INF
  Please see: $STA
    https://docs.google.com/document/d/1PLPBqrnV-m4hr8Jos_7dhYGYqtMdiuCZZC72t2ljyEA/edit
$OFF
EOF
)
	[ -s ~/.config/lab/lab.toml ] || {
		echo -e "$usrmsg"
		return 1
	}

	usrline=$(grep user ~/.config/lab/lab.toml | cut -d'=' -f2)
	labuser=$(echo "$usrline" | tr -d ' \"')

	return 0
}

###########################################
# Parameter Initialization
###########################################
#
# GLobals
# 	MYDATA
# 	last_tag_file
# 	branchlist
#
init_parms() {
	local confline
	local configfile=
	local cfgtemplate=

	get_labuser || exit 1

	configfile="$MYDATA/patchreview.conf"
	cfgtemplate="$MYLIB/patchreview.conf"
	branchlist="$MYDATA/branchlist"
	last_tag_file="$MYDATA/lasttag"

	cfg_start "$cfgtemplate" "$configfile"
	cfg_set_item "background" "$background"

	# Trap for control-c
	#
	trap control_c SIGINT

	# ################################################################
	#
	# Init the config fields that must not be blank
	# 	indir
	# 	outdir
	# 	editor
	#	remote_dir
	# 	remote_repo
	# 	remote_branch
	#
	# ################################################################

	[ -n "$editor" ] || set_editor

	if [ -d "$indir" ]; then
		indir=$(realpath "$indir")
		set_cfg_item "indir" "$indir"
	else
		set_dir $indirstr "indir" indir
	fi

	if [ -d "$outdir" ]; then
		outdir=$(realpath "$outdir")
		set_cfg_item "outdir" "$outdir"
	else
		outdir="$indir/tmp"
		set_dir $outdirstr "outdir" outdir
	fi

	[ -d "$remote_dir" ] || set_remotedir
	if [ -z "$remote_repo" ] || [ -z "$remote_branch" ]; then set_remote_seek; fi

	init_mr
}

##############################################
# Main Program Loop
##############################################
#
# main_loop - this is the loop for the top layer of the script
#
# When menu_loop returns, the patchreview is executed using the variables
# and environment selected by the user in the menu_loop.
#
# Globals:
# 	menuinput
# 	b_mrflag
# 	b_rename_infiles
# 	b_fmt_upstream
# 	b_seekfixes
# 	applymode
# 	applymode_off
# 	cmpmode
# 	cmpmode_off
#
main_loop() {
	local stat=0

	while true; do
		((stat != rc_run)) && menu_loop $menuinput
		# menu_stat=$?
		# echo "menu_loop_stat: $menu_stat"

		if ! $b_mrflag && $b_rename_infiles; then
			exec_boolean "b_rename_infiles" false "renpatfiles" && continue
		fi

		if $b_mrflag; then
			format_upstream_patches
		else
			$b_fmt_upstream && format_upstream_patches
		fi

		if ((applymode != applymode_off)); then
			exec_apply_patches && continue
		fi

		$b_seekfixes && seek_missing_fixes

		if ((cmpmode != cmpmode_off)); then
			ui_call compare_patches stat || continue
			$b_mrflag && {
				ui_call query_acknack stat
				case_qanret $stat
				stat=$?
			}
		fi
	done
}

cmd_getmr() {
	while :; do
		getuser "Enter a merge request number or $qstr$INF to quit: " \
			current_mr
		if [ "$current_mr" == "q" ]; then
			exit_me $ui_err_missing_arg
		else
			break
		fi
	done
}

cmd_mr() {
	local cmdline=
	local stat
	local index
	local regex='^[0-9]+$'

	current_mr=

	while (( $# > 0 )) ;do
		[[ $1 =~ $regex ]] && current_mr=$1 || cmdline="$cmdline $1"
		shift
	done

	[ -n "$current_mr" ] || cmd_getmr

	if [ -z "$cmdline" ] || [[ $cmdline == *"run"* ]]; then
		if get_merge_request_patches "$current_mr"; then
			format_upstream_patches
		else
			exit_me 0
		fi
		seek_missing_fixes
		compare_patches
		query_acknack
		exit_me 0
	fi
}

# cmd_check_fixes - execute the -S command line option
#
cmd_check_fixes() {
	local stat=0

	get_filecount
	$b_rename_infiles && exec_boolean "b_rename_infiles" false "renpatfiles"
	seek_missing_fixes
	return 0
}

cmd_show_verbose() {

	if $b_verbose; then
		curr="${STA}ON$OFF"
		next="${STA}OFF$OFF"
	else
		curr="${STA}OFF$OFF"
		next="${STA}ON$OFF"
	fi

	echo -e "set verbose displays $next$INF : currently $curr"
}

cmd_show_status() {
	local statscreen

	statscreen=$(
cat <<EOF

  $MNU${UND}Current $(basename "$0") status$INF
  editor    : $STA$editor$INF
  branch    : $STA$(git_getcurrentbranch)$INF
  patch     : $STA$indir$INF
  work      : $STA$outdir$INF
  upstream  : $STA$remote_dir$INF
  remote    : $STA$remote_repo$MNU/$STA$remote_branch$INF
  verbose   : $STA$($b_verbose && echo "ON" || echo "OFF")$INF
$OFF
EOF
)
	echo -e "$statscreen"
}

check_labstatus() {
	local labmsg

	labmsg=$(
cat <<EOF
$INF
  You must install the$MNU lab$OFF ustility from this repo: $STA
  Repo        : copr:copr.fedorainfracloud.org:bmeneguele:rhkernel-devtools
$INF
  You must also create a$MNU lab.toml$INF file in$MNU ~/.config/lab$INF with the following
  contents.
$MNU
  [core]
    host = "https://gitlab.com"
    token = "<your-gitlab-token>"
    user = "<your-gitlab-username>"
$INF
  Please see: $URL
    https://docs.google.com/document/d/1PLPBqrnV-m4hr8Jos_7dhYGYqtMdiuCZZC72t2ljyEA/edit
$OFF
EOF
)
	which lab > /dev/null 2>&1 || {
		echo -e "$labmsg"
		exit 1
	}
}

check_env() {
	check_labstatus
	git_checkrepo || { git_invrepomsg && exit 1; }
	init_parms
	init_files
}

# parse_cmdline - command line interface
#
parse_cmdline() {
	local argc=$#
	local cmdlineops

	cmdlineops=$(
cat <<EOF

  $MNU$UND$(basename "$0") command line interface$OFF$MNU

              $STA${UND}Environment$OFF$MNU
  version  $INF : show $(basename "$0") version$MNU
  help     $INF : command line help (this text)$MNU
  man      $INF : patchreview manual$MNU

  editor   $INF ; choose one of three available editors for diff presentation$MNU
  upstream $INF : select a directory for your upstream repo and remote/branches$MNU
  branch   $INF : select the downstream branch to work on$MNU
  patch    $INF : name the directory that contains the downstream patches$MNU
  work     $INF : name the directory to receive the git-formatted patches from
              the upstream repos in the upstream repo directory.$MNU

  remote   $INF : select the upstream remote repo/branch to search for upstream
              fixes$MNU

  verbose  $INF : set screen output to verbose mode (verbose ON)$MNU
  quiet    $INF : set screen output to quiet mode (verbose OFF)$MNU
  status   $INF : show the current status of the above parameters$MNU

              $STA${UND}Operations$OFF$MNU
  mr <num> $INF : run patchreview on the mr number. This will automatically run
              the format, seek, and compare commands in that order.$MNU

  format   $INF : format upstream patches into the $outdirstr directory using upstream
              commits automatically extracted from patches in the $indirstr directory$MNU

  seek     $INF : Seek missing fixes in the remote repo/branch, typically added to
              the upstream repo in the upstream directory.$MNU

  compare  $INF : compare the RHEL patches with upstream and present any diffs in
              the diff editor.$MNU

  rename   $INF : rename patchfiles in the $indirstr directory. Useful if downloaded
              from a mail client$OFF
EOF
)
	while (( $# > 0 )) ;do
		key="$1"
		case $key in
			"mr" )		shift; cmd_mr "$@"
					;;
			"seek" ) 	cmd_check_fixes
					;;
			"rename" )	renpatfiles
					;;
			"format" )  	format_upstream_patches
					;;
			"status" )	cmd_show_status
					;;
			"-P" )		;&
			"compare" )	compare_patches
					;;
			"editor" )	set_editor
					;;
			"branch" )	! git_checkrepo && git_invrepomsg && exit 1
					git_setbranch "$branchlist"
					;;
			"upstream" )	set_remotedir
					set_remote_seek
					;;
			"remote" )	;&
			"remotes" )	set_remote_seek
					;;
			"work" )	! git_checkrepo && git_invrepomsg && exit 1
					set_dir "$outdirstr" "outdir" outdir
					;;
			"patch" )	! git_checkrepo && git_invrepomsg && exit 1
					set_dir "$indirstr" "indir" indir
					;;
			"-V" )		;&
			"-vv" )		;&
			"verbose" )	;&
			"-verbose" )	b_verbose=true
					set_cfg_item "b_verbose" $b_verbose
					;;
			"quiet" )	b_verbose=false
					set_cfg_item "b_verbose" $b_verbose
					;;
			"-v" )		;&
			"version" )	;&
			"-version" )	;&
			"--version" ) 	show_version
					;;
			"-h" )		;&
			"help" )	;&
			"-help" ) 	;&
			"--help" )	echo -e "$cmdlineops"
					;;
			"man" )		less "$main_man"
					;;
			* ) echo -e "$STA$key ${WRN}is an invalid argument!$OFF\n"
			    exit 1
		esac
		shift
	done
	exit_me 0
}

#############################
# main() entry point
#############################
main() {
	local argc=$#

	if ((argc == 0)); then
		check_env
		git_get_lasttag lasttag "$last_tag_file"
		main_loop
	else

		check_env
		[ "$1" == "man" ] && {
			ptpage -b $background "$main_man"
			exit 0
		}
		parse_cmdline "$@"
	fi

	exit 0
}

# Call main.
# Exit when done.
#
main "$@"
exit_me 0
